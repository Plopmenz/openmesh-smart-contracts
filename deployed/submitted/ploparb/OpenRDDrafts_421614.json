{
  "type": "deployment",
  "id": "OpenRDDrafts_421614",
  "batch": "ploparb",
  "batchIndex": 7,
  "deploymentAddress": "0xcA27dDccd950bD201630999B2Dd9CDDA9B429BEC",
  "constructorArgs": ["0x4436DF92364aBc450AfeC494ED492C2C9D713bc5"],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x00000000000000000000000000000000000000000000000000706c6f7061726260a03461007057601f610cc838819003918201601f19168301916001600160401b038311848410176100745780849260209460405283398101031261007057516001600160a01b038116810361007057608052604051610c3f90816100898239608051818181607301526103600152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c90816301ffc9a7146109845750806323c5a088146109605780638b88a687146109295780638da5cb5b146108fb5780638e3e37dd146100a65763c305a6d91461005e575f80fd5b346100a2575f3660031901126100a2576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b346100a257600319610100368201126100a2576100c16109f1565b906001600160401b03602435116100a2573660236024350112156100a2576001600160401b0360243560040135116100a25736602480356004013581350101116100a25760603660431901126100a25760403660a31901126100a2576001600160401b0360e435116100a25760e060e4353603918201126100a2576001600160a01b0382165f9081526020819052604090205415158061088a575b50610165610a43565b90608460e43501356001600160601b03811681036100a257600460e435013560221983018112156100a25760e43501916001600160401b036004840135116100a2576004830135360360248401136100a257602460e43501356001600160401b03811681036100a2576101dc604460e43501610aa5565b6101ea606460e43501610aa5565b9160e43560a4013560221985018112156100a25760e43501926001600160401b036004850135116100a257600484013560061b360360248501136100a25760e43560c4013594602219018512156100a2576001600160401b0360048660e435010135116100a25760e4358501600481013560051b36036024909101136100a257906020916102a89795936001600160401b03604051998a98637e19374560e01b878b015260c060248b015260e48a0190602460048201359101610ab9565b931660448801526001600160a01b0390811660648801521660848601528481036023190160a486015260048401358152019160248101905f905b6004810135821061083d575050508282036023190160c484015260e4358101600481013580845260051b83016020908101936024909201925f92918201905b60048160e43501013584106106615750505050500391610349601f1993848101835282610a22565b6001600160601b036040519261035e84610a07565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168452166020830152604082015261039e83610b01565b526103a882610b01565b506103b1610a43565b916001600160a01b036103c2610b3d565b16916103cc610b3d565b5060a4356001600160a01b03811691908290036100a25761044d9161044161041e604051958693634e8cbc7160e11b6020860152602485015260c435604485015260a0606485015260c4840190610b74565b5f60848401526023198382030160a4840152602435600401356024803501610ab9565b03908101835282610a22565b6040519161045a83610a07565b82525f6020830152604082015261047082610b01565b5261047a81610b01565b506044356001600160a01b038116908190036100a25760405163dabdb38960e01b81526001600160a01b0384166004820152606435602482015260806044820152915f9183918290849082906104d4906084830190610b74565b82606483015203925af18015610656575f90610549575b6104f59150610b01565b516020818051810103126100a25760200151906001600160a01b03610518610b3d565b16906001600160a01b03167f69d0c870d9a0b9acf4247715c6c953e76c2738fd500530fee003963edaf6ee485f80a4005b503d805f833e6105598183610a22565b8101906040818303126100a2578051906001600160401b0382116100a257019080601f830112156100a2578151916001600160401b038311610642578260051b91604051936105ab6020850186610a22565b8452602080850193830101918183116100a25760208101935b8385106105d95750505050506104f5906104eb565b84516001600160401b0381116100a25782019083603f830112156100a25760208201519061060682610b22565b6106136040519182610a22565b82815285604084860101116100a25761063760209493859460408685019101610b53565b8152019401936105c4565b634e487b7160e01b5f52604160045260245ffd5b6040513d5f823e3d90fd5b919395509193601f198482030183528535906082198360e435013603018212156100a2576001600160a01b0361069f60e43585018401602401610aed565b16815260e435830182016044810135903603604219018112156100a2578360e43501830101916001600160401b036024840135116100a257602483013560061b360360448401136100a2576060602083015260248301356060830152608082019260448101905f905b602481013582106107fd5750505060e43584018101606481013591903603604219018212156100a2578460e435010101916001600160401b036024840135116100a2576060602484013502360360448401136100a257816040602093830391015260248301358152019060448101905f905b602481013582106107a05750505060208060019297019301940191929093879594610321565b90919283358015158091036100a25781526001600160a01b036107c560208601610aed565b1660208201526040840135906affffffffffffffffffffff82168092036100a25760608160019360408394015201940192019061077a565b909194604080600192838060a01b036108158a610aed565b1681526001600160601b0361082c60208b01610ad9565b166020820152019601920190610708565b918094919395503560018060a01b0381168091036100a25760408083600193600495526001600160601b0361087460208a01610ad9565b16602082015201950193019050869492916102e2565b6108e9575f808080806001600160a01b0387165af13d156108e4573d6108af81610b22565b906108bd6040519283610a22565b81525f60203d92013e5b156108d2578261015c565b6040516302cc263b60e51b8152600490fd5b6108c7565b6040516318020b0760e31b8152600490fd5b346100a2575f3660031901126100a2576020604051733f70b483a5cc80cf6e80916621bf40a11081743d8152f35b346100a25760203660031901126100a2576001600160a01b0361094a6109f1565b165f525f602052602060405f2054604051908152f35b346100a25760203660031901126100a257335f525f60205260043560405f20555f80f35b346100a25760203660031901126100a2576004359063ffffffff60e01b82168092036100a257602091638e3e37dd60e01b81149081156109c6575b5015158152f35b63a84d060f60e01b8114915081156109e0575b50836109bf565b6301ffc9a760e01b149050836109d9565b600435906001600160a01b03821682036100a257565b606081019081106001600160401b0382111761064257604052565b90601f801991011681019081106001600160401b0382111761064257604052565b60409060405191604083018381106001600160401b03821117610642576040526001835282915f5b602080821015610a9d57835160209291610a8482610a07565b5f82525f81830152606086830152828801015201610a6b565b505091925050565b356001600160a01b03811681036100a25790565b908060209392818452848401375f828201840152601f01601f1916010190565b35906001600160601b03821682036100a257565b35906001600160a01b03821682036100a257565b805115610b0e5760200190565b634e487b7160e01b5f52603260045260245ffd5b6001600160401b03811161064257601f01601f191660200190565b6084356001600160a01b03811681036100a25790565b5f5b838110610b645750505f910152565b8181015183820152602001610b55565b908082519081815260208091019281808460051b8301019501935f915b848310610ba15750505050505090565b9091929394958480600192601f1990818682030187528a5191601f6060878060a01b0385511684528585015186850152806040809601519585015284518091850152610bf581608096888888019101610b53565b011601019801930193019194939290610b9156fea26469706673582212201f4bd92e3816e72f350baa1acfa75c69b816b91351cc2f72027c535ff76e245e64736f6c634300081700330000000000000000000000004436df92364abc450afec494ed492c2c9d713bc5",
  "gas": "743700",
  "from": "0xaF7E68bCb2Fc7295492A00177f14F59B92814e70",
  "transactionSettings": {
    "chainId": 421614,
    "nonce": "4",
    "baseFee": "1000000000",
    "priorityFee": "100000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ploparb",
  "artifact": {
    "abi": [
      {
        "type": "constructor",
        "inputs": [
          {
            "name": "_tasks",
            "type": "address",
            "internalType": "contract ITasks"
          }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "createDraftTask",
        "inputs": [
          {
            "name": "_dao",
            "type": "address",
            "internalType": "contract IDAO"
          },
          { "name": "_metadata", "type": "string", "internalType": "string" },
          {
            "name": "_managementInfo",
            "type": "tuple",
            "internalType": "struct ICreateTrustlessAction.ManagementInfo",
            "components": [
              {
                "name": "manager",
                "type": "address",
                "internalType": "contract IDAOManager"
              },
              { "name": "role", "type": "uint256", "internalType": "uint256" },
              {
                "name": "trustlessActions",
                "type": "address",
                "internalType": "contract ITrustlessActions"
              }
            ]
          },
          {
            "name": "_trustlessActionsInfo",
            "type": "tuple",
            "internalType": "struct ICreateTrustlessAction.TrustlessActionsInfo",
            "components": [
              {
                "name": "manager",
                "type": "address",
                "internalType": "contract IDAOManager"
              },
              { "name": "role", "type": "uint256", "internalType": "uint256" }
            ]
          },
          {
            "name": "_taskInfo",
            "type": "tuple",
            "internalType": "struct ITaskDrafts.CreateTaskInfo",
            "components": [
              {
                "name": "metadata",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "deadline",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "manager",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "disputeManager",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "nativeBudget",
                "type": "uint96",
                "internalType": "uint96"
              },
              {
                "name": "budget",
                "type": "tuple[]",
                "internalType": "struct ITasks.ERC20Transfer[]",
                "components": [
                  {
                    "name": "tokenContract",
                    "type": "address",
                    "internalType": "contract IERC20"
                  },
                  {
                    "name": "amount",
                    "type": "uint96",
                    "internalType": "uint96"
                  }
                ]
              },
              {
                "name": "preapproved",
                "type": "tuple[]",
                "internalType": "struct ITasks.PreapprovedApplication[]",
                "components": [
                  {
                    "name": "applicant",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "nativeReward",
                    "type": "tuple[]",
                    "internalType": "struct ITasks.NativeReward[]",
                    "components": [
                      {
                        "name": "to",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "amount",
                        "type": "uint96",
                        "internalType": "uint96"
                      }
                    ]
                  },
                  {
                    "name": "reward",
                    "type": "tuple[]",
                    "internalType": "struct ITasks.Reward[]",
                    "components": [
                      {
                        "name": "nextToken",
                        "type": "bool",
                        "internalType": "bool"
                      },
                      {
                        "name": "to",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "amount",
                        "type": "uint88",
                        "internalType": "uint88"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "getCost",
        "inputs": [
          { "name": "_dao", "type": "address", "internalType": "contract IDAO" }
        ],
        "outputs": [
          { "name": "cost", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "owner",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "pure"
      },
      {
        "type": "function",
        "name": "supportsInterface",
        "inputs": [
          { "name": "_interfaceId", "type": "bytes4", "internalType": "bytes4" }
        ],
        "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "tasks",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "contract ITasks" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "updateCost",
        "inputs": [
          { "name": "_cost", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "event",
        "name": "TrustlessActionCreated",
        "inputs": [
          {
            "name": "dao",
            "type": "address",
            "indexed": true,
            "internalType": "contract IDAO"
          },
          {
            "name": "trustlessActions",
            "type": "address",
            "indexed": true,
            "internalType": "contract ITrustlessActions"
          },
          {
            "name": "actionId",
            "type": "uint256",
            "indexed": true,
            "internalType": "uint256"
          }
        ],
        "anonymous": false
      },
      { "type": "error", "name": "TransferToDAOFailed", "inputs": [] },
      { "type": "error", "name": "Underpaying", "inputs": [] }
    ],
    "bytecode": "0x60a03461007057601f610cc838819003918201601f19168301916001600160401b038311848410176100745780849260209460405283398101031261007057516001600160a01b038116810361007057608052604051610c3f90816100898239608051818181607301526103600152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080806040526004361015610012575f80fd5b5f3560e01c90816301ffc9a7146109845750806323c5a088146109605780638b88a687146109295780638da5cb5b146108fb5780638e3e37dd146100a65763c305a6d91461005e575f80fd5b346100a2575f3660031901126100a2576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b5f80fd5b346100a257600319610100368201126100a2576100c16109f1565b906001600160401b03602435116100a2573660236024350112156100a2576001600160401b0360243560040135116100a25736602480356004013581350101116100a25760603660431901126100a25760403660a31901126100a2576001600160401b0360e435116100a25760e060e4353603918201126100a2576001600160a01b0382165f9081526020819052604090205415158061088a575b50610165610a43565b90608460e43501356001600160601b03811681036100a257600460e435013560221983018112156100a25760e43501916001600160401b036004840135116100a2576004830135360360248401136100a257602460e43501356001600160401b03811681036100a2576101dc604460e43501610aa5565b6101ea606460e43501610aa5565b9160e43560a4013560221985018112156100a25760e43501926001600160401b036004850135116100a257600484013560061b360360248501136100a25760e43560c4013594602219018512156100a2576001600160401b0360048660e435010135116100a25760e4358501600481013560051b36036024909101136100a257906020916102a89795936001600160401b03604051998a98637e19374560e01b878b015260c060248b015260e48a0190602460048201359101610ab9565b931660448801526001600160a01b0390811660648801521660848601528481036023190160a486015260048401358152019160248101905f905b6004810135821061083d575050508282036023190160c484015260e4358101600481013580845260051b83016020908101936024909201925f92918201905b60048160e43501013584106106615750505050500391610349601f1993848101835282610a22565b6001600160601b036040519261035e84610a07565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168452166020830152604082015261039e83610b01565b526103a882610b01565b506103b1610a43565b916001600160a01b036103c2610b3d565b16916103cc610b3d565b5060a4356001600160a01b03811691908290036100a25761044d9161044161041e604051958693634e8cbc7160e11b6020860152602485015260c435604485015260a0606485015260c4840190610b74565b5f60848401526023198382030160a4840152602435600401356024803501610ab9565b03908101835282610a22565b6040519161045a83610a07565b82525f6020830152604082015261047082610b01565b5261047a81610b01565b506044356001600160a01b038116908190036100a25760405163dabdb38960e01b81526001600160a01b0384166004820152606435602482015260806044820152915f9183918290849082906104d4906084830190610b74565b82606483015203925af18015610656575f90610549575b6104f59150610b01565b516020818051810103126100a25760200151906001600160a01b03610518610b3d565b16906001600160a01b03167f69d0c870d9a0b9acf4247715c6c953e76c2738fd500530fee003963edaf6ee485f80a4005b503d805f833e6105598183610a22565b8101906040818303126100a2578051906001600160401b0382116100a257019080601f830112156100a2578151916001600160401b038311610642578260051b91604051936105ab6020850186610a22565b8452602080850193830101918183116100a25760208101935b8385106105d95750505050506104f5906104eb565b84516001600160401b0381116100a25782019083603f830112156100a25760208201519061060682610b22565b6106136040519182610a22565b82815285604084860101116100a25761063760209493859460408685019101610b53565b8152019401936105c4565b634e487b7160e01b5f52604160045260245ffd5b6040513d5f823e3d90fd5b919395509193601f198482030183528535906082198360e435013603018212156100a2576001600160a01b0361069f60e43585018401602401610aed565b16815260e435830182016044810135903603604219018112156100a2578360e43501830101916001600160401b036024840135116100a257602483013560061b360360448401136100a2576060602083015260248301356060830152608082019260448101905f905b602481013582106107fd5750505060e43584018101606481013591903603604219018212156100a2578460e435010101916001600160401b036024840135116100a2576060602484013502360360448401136100a257816040602093830391015260248301358152019060448101905f905b602481013582106107a05750505060208060019297019301940191929093879594610321565b90919283358015158091036100a25781526001600160a01b036107c560208601610aed565b1660208201526040840135906affffffffffffffffffffff82168092036100a25760608160019360408394015201940192019061077a565b909194604080600192838060a01b036108158a610aed565b1681526001600160601b0361082c60208b01610ad9565b166020820152019601920190610708565b918094919395503560018060a01b0381168091036100a25760408083600193600495526001600160601b0361087460208a01610ad9565b16602082015201950193019050869492916102e2565b6108e9575f808080806001600160a01b0387165af13d156108e4573d6108af81610b22565b906108bd6040519283610a22565b81525f60203d92013e5b156108d2578261015c565b6040516302cc263b60e51b8152600490fd5b6108c7565b6040516318020b0760e31b8152600490fd5b346100a2575f3660031901126100a2576020604051733f70b483a5cc80cf6e80916621bf40a11081743d8152f35b346100a25760203660031901126100a2576001600160a01b0361094a6109f1565b165f525f602052602060405f2054604051908152f35b346100a25760203660031901126100a257335f525f60205260043560405f20555f80f35b346100a25760203660031901126100a2576004359063ffffffff60e01b82168092036100a257602091638e3e37dd60e01b81149081156109c6575b5015158152f35b63a84d060f60e01b8114915081156109e0575b50836109bf565b6301ffc9a760e01b149050836109d9565b600435906001600160a01b03821682036100a257565b606081019081106001600160401b0382111761064257604052565b90601f801991011681019081106001600160401b0382111761064257604052565b60409060405191604083018381106001600160401b03821117610642576040526001835282915f5b602080821015610a9d57835160209291610a8482610a07565b5f82525f81830152606086830152828801015201610a6b565b505091925050565b356001600160a01b03811681036100a25790565b908060209392818452848401375f828201840152601f01601f1916010190565b35906001600160601b03821682036100a257565b35906001600160a01b03821682036100a257565b805115610b0e5760200190565b634e487b7160e01b5f52603260045260245ffd5b6001600160401b03811161064257601f01601f191660200190565b6084356001600160a01b03811681036100a25790565b5f5b838110610b645750505f910152565b8181015183820152602001610b55565b908082519081815260208091019281808460051b8301019501935f915b848310610ba15750505050505090565b9091929394958480600192601f1990818682030187528a5191601f6060878060a01b0385511684528585015186850152806040809601519585015284518091850152610bf581608096888888019101610b53565b011601019801930193019194939290610b9156fea26469706673582212201f4bd92e3816e72f350baa1acfa75c69b816b91351cc2f72027c535ff76e245e64736f6c63430008170033",
    "compiler": { "version": "v0.8.23+commit.f704f362" },
    "contractName": "src/TaskDrafts/TaskDrafts.sol:TaskDrafts",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/openmesh-admin/lib/ens-reverse-claimable/src/ENSReverseClaimable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSReverseClaimable {\n    /// @notice ENS reverse name resolution is claimable by the owner of the contract.\n    function owner() external pure virtual returns (address) {\n        return 0xaF7E68bCb2Fc7295492A00177f14F59B92814e70; // plopmenz.eth\n    }\n}\n"
        },
        "lib/openmesh-admin/src/Openmesh.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Openmesh {\n    address constant OPENMESH_ADMIN = 0x3F70b483A5cc80cF6E80916621bF40A11081743D;\n}\n"
        },
        "lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ENSReverseClaimable} from \"../lib/ens-reverse-claimable/src/ENSReverseClaimable.sol\";\nimport {Openmesh} from \"./Openmesh.sol\";\n\ncontract OpenmeshENSReverseClaimable is Openmesh, ENSReverseClaimable {\n    /// @inheritdoc ENSReverseClaimable\n    function owner() external pure override returns (address) {\n        return OPENMESH_ADMIN;\n    }\n}\n"
        },
        "lib/openrd-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "lib/openrd-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
        },
        "lib/openrd-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
        },
        "lib/openrd-foundry/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
        },
        "lib/openrd-foundry/src/Escrow.sol": {
          "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract Escrow {\r\n    using SafeERC20 for IERC20;\r\n\r\n    error AlreadyInitialized();\r\n    error NotOwner();\r\n    error NativeTransferFailed();\r\n\r\n    address internal owner;\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /// @notice Initializes the Escrow with the sender of the transaction as owner.\r\n    /// @dev This should be called in the same transaction as deploying the escrow, to prevent front running.\r\n    function __Escrow_init() public payable {\r\n        if (owner != address(0)) {\r\n            revert AlreadyInitialized();\r\n        }\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Transfers a certain amount of ERC20 token to a given address. Can only be called by the owner.\r\n    /// @param token The ERC20 contract address.\r\n    /// @param to The address to recieve the tokens.\r\n    /// @param amount The amount of ERC20 token to receive.\r\n    /// @dev Wont do anything if amount is 0.\r\n    function transfer(IERC20 token, address to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        if (amount != 0) {\r\n            token.safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Transfers a certain amount of native currency to a given address. Can only be called by the owner.\r\n    /// @param to The address to recieve the currency.\r\n    /// @param amount The amount of native currency to receive.\r\n    /// @dev Wont do anything if amount is 0.\r\n    function transferNative(address payable to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        if (amount != 0) {\r\n            // Use call instead of transfer for correct gas estimation to smart contracts\r\n            (bool succes,) = to.call{value: amount}(\"\");\r\n            if (!succes) {\r\n                revert NativeTransferFailed();\r\n            }\r\n        }\r\n    }\r\n}\r\n"
        },
        "lib/openrd-foundry/src/ITasks.sol": {
          "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Escrow, IERC20} from \"./Escrow.sol\";\r\n\r\ninterface ITasks {\r\n    error TaskDoesNotExist();\r\n    error TaskNotOpen();\r\n    error TaskNotTaken();\r\n    error TaskNotClosed();\r\n    error TaskClosed();\r\n\r\n    error NotManager();\r\n    error NotExecutor();\r\n    error NotDisputeManager();\r\n\r\n    error RewardAboveBudget();\r\n    error RewardDoesntEndWithNextToken();\r\n    error NotEnoughNativeCurrencyAttached();\r\n    error ApplicationDoesNotExist();\r\n    error NotYourApplication();\r\n    error ApplicationNotAccepted();\r\n    error SubmissionDoesNotExist();\r\n    error SubmissionAlreadyJudged();\r\n    error JudgementNone();\r\n\r\n    error RequestDoesNotExist();\r\n    error RequestAlreadyAccepted();\r\n    error RequestNotAccepted();\r\n    error RequestAlreadyExecuted();\r\n\r\n    error Overflow();\r\n    error ManualBudgetIncreaseNeeded();\r\n    error PartialRewardAboveFullReward();\r\n    error NativeTransferFailed();\r\n    error ERC1167FailedCreateClone();\r\n\r\n    // The budget here repesents the call of the funder to the escrow, the actual value in the escrow (actual budget) might differ in case of transfer fees / rewards.\r\n    event TaskCreated(\r\n        uint256 indexed taskId,\r\n        string metadata,\r\n        uint64 deadline,\r\n        address manager,\r\n        address disputeManager,\r\n        address creator,\r\n        uint96 nativeBudget,\r\n        ERC20Transfer[] budget,\r\n        Escrow escrow\r\n    );\r\n    event ApplicationCreated(\r\n        uint256 indexed taskId,\r\n        uint32 indexed applicationId,\r\n        string metadata,\r\n        address applicant,\r\n        NativeReward[] nativeReward,\r\n        Reward[] reward\r\n    );\r\n    event ApplicationAccepted(uint256 indexed taskId, uint32 indexed applicationId);\r\n    event TaskTaken(uint256 indexed taskId, uint32 indexed applicationId);\r\n    event SubmissionCreated(uint256 indexed taskId, uint8 indexed submissionId, string metadata);\r\n    event SubmissionReviewed(\r\n        uint256 indexed taskId, uint8 indexed submissionId, SubmissionJudgement judgement, string feedback\r\n    );\r\n    event TaskCompleted(uint256 indexed taskId, TaskCompletionSource source);\r\n\r\n    event CancelTaskRequested(uint256 indexed taskId, uint8 indexed requestId, string metadata);\r\n    event TaskCancelled(uint256 indexed taskId, string metadata);\r\n    event RequestAccepted(uint256 indexed taskId, RequestType indexed requestType, uint8 indexed requestId);\r\n    event RequestExecuted(uint256 indexed taskId, RequestType indexed requestType, uint8 indexed requestId, address by);\r\n\r\n    event DeadlineChanged(uint256 indexed taskId, uint64 newDeadline);\r\n    event BudgetChanged(uint256 indexed taskId); // Quite expensive to transfer budget into a datastructure to emit\r\n    event RewardIncreased(\r\n        uint256 indexed taskId, uint32 indexed applicationId, uint96[] nativeIncrease, uint88[] increase\r\n    );\r\n    event MetadataChanged(uint256 indexed taskId, string newMetadata);\r\n    event ManagerChanged(uint256 indexed taskId, address newManager);\r\n    event PartialPayment(uint256 indexed taskId, uint96[] partialNativeReward, uint88[] partialReward);\r\n\r\n    /// @notice A container for ERC20 transfer information.\r\n    /// @param tokenContract ERC20 token to transfer.\r\n    /// @param amount How much of this token should be transfered. uint96 to keep struct packed into a single uint256.\r\n    struct ERC20Transfer {\r\n        IERC20 tokenContract;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a native reward payout.\r\n    /// @param to Whom the native reward should be transfered to.\r\n    /// @param amount How much native reward should be transfered. uint96 to keep struct packed into a single uint256.\r\n    struct NativeReward {\r\n        address to;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a reward payout.\r\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\r\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\r\n    /// @notice nextToken should always be true for the last entry\r\n    /// @param to Whom this token should be transfered to.\r\n    /// @param amount How much of this token should be transfered. uint88 to keep struct packed into a single uint256.\r\n    struct Reward {\r\n        bool nextToken;\r\n        address to;\r\n        uint88 amount;\r\n    }\r\n\r\n    /// @notice A container for a task application.\r\n    /// @param metadata Metadata of the application. (IPFS hash)\r\n    /// @param applicant Who has submitted this application.\r\n    /// @param accepted If the application has been accepted by the manager.\r\n    /// @param nativeReward How much native currency the applicant wants for completion.\r\n    /// @param reward How much rewards the applicant wants for completion.\r\n    struct Application {\r\n        string metadata;\r\n        // Storage block seperator\r\n        address applicant;\r\n        bool accepted;\r\n        uint8 nativeRewardCount;\r\n        uint8 rewardCount;\r\n        // Storage block seperator\r\n        mapping(uint8 => NativeReward) nativeReward;\r\n        mapping(uint8 => Reward) reward;\r\n    }\r\n\r\n    struct OffChainApplication {\r\n        string metadata;\r\n        address applicant;\r\n        bool accepted;\r\n        NativeReward[] nativeReward;\r\n        Reward[] reward;\r\n    }\r\n\r\n    /// @notice For approving people on task creation (they are not required to make an application).\r\n    struct PreapprovedApplication {\r\n        address applicant;\r\n        NativeReward[] nativeReward;\r\n        Reward[] reward;\r\n    }\r\n\r\n    enum SubmissionJudgement {\r\n        None,\r\n        Accepted,\r\n        Rejected\r\n    }\r\n\r\n    /// @notice A container for a task submission.\r\n    /// @param metadata Metadata of the submission. (IPFS hash)\r\n    /// @param judgement Judgement cast on the submission.\r\n    /// @param feedback A response from the manager. (IPFS hash)\r\n    struct Submission {\r\n        string metadata;\r\n        string feedback;\r\n        SubmissionJudgement judgement;\r\n    }\r\n\r\n    // This is for future expansion of the request system\r\n    enum RequestType {CancelTask}\r\n\r\n    /// @notice A container for shared request information.\r\n    /// @param accepted If the request was accepted.\r\n    /// @param executed If the request was executed.\r\n    struct Request {\r\n        bool accepted;\r\n        bool executed;\r\n    }\r\n\r\n    /// @notice A container for a request to cancel the task.\r\n    /// @param request Request information.\r\n    /// @param metadata Metadata of the request. (IPFS hash, Why the task should be cancelled)\r\n    struct CancelTaskRequest {\r\n        Request request;\r\n        string metadata;\r\n    }\r\n\r\n    enum TaskState {\r\n        Open,\r\n        Taken,\r\n        Closed\r\n    }\r\n\r\n    /// @notice A container for task-related information.\r\n    /// @param metadata Metadata of the task. (IPFS hash)\r\n    /// @param deadline Block timestamp at which the task expires if not completed.\r\n    /// @param escrow The address of the escrow which holds the budget funds.\r\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param nativeBudget Maximum native currency reward that can be earned by completing the task.\r\n    /// @param creator Who has created the task.\r\n    /// @param disputeManager Who has the permission to complete the task without the managers approval.\r\n    /// @param manager Who has the permission to manage the task.\r\n    /// @param state Current state the task is in.\r\n    /// @param applications Applications to take the job.\r\n    /// @param executorApplication Index of the application that will execture the task.\r\n    /// @param submissions Submission made to finish the task.\r\n    struct Task {\r\n        string metadata;\r\n        // Storage block seperator\r\n        uint64 deadline;\r\n        Escrow escrow;\r\n        // Storage block seperator\r\n        uint96 nativeBudget;\r\n        address creator;\r\n        // Storage block seperator\r\n        address disputeManager;\r\n        // Storage block seperator\r\n        address manager;\r\n        TaskState state;\r\n        uint32 executorApplication;\r\n        uint8 budgetCount;\r\n        uint32 applicationCount;\r\n        uint8 submissionCount;\r\n        uint8 cancelTaskRequestCount;\r\n        // Storage block seperator\r\n        mapping(uint8 => ERC20Transfer) budget;\r\n        mapping(uint32 => Application) applications;\r\n        mapping(uint8 => Submission) submissions;\r\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\r\n    }\r\n\r\n    struct OffChainTask {\r\n        string metadata;\r\n        uint64 deadline;\r\n        uint32 executorApplication;\r\n        address manager;\r\n        address disputeManager;\r\n        address creator;\r\n        TaskState state;\r\n        Escrow escrow;\r\n        uint96 nativeBudget;\r\n        ERC20Transfer[] budget;\r\n        OffChainApplication[] applications;\r\n        Submission[] submissions;\r\n        CancelTaskRequest[] cancelTaskRequests;\r\n    }\r\n\r\n    enum TaskCompletionSource {\r\n        SubmissionAccepted,\r\n        Dispute\r\n    }\r\n\r\n    /// @notice Retrieves the current amount of created tasks.\r\n    function taskCount() external view returns (uint256);\r\n\r\n    /// @notice Retrieves all task information by id.\r\n    /// @param _taskId Id of the task.\r\n    function getTask(uint256 _taskId) external view returns (OffChainTask memory);\r\n\r\n    /// @notice Retrieves multiple tasks in a single call.\r\n    /// @param _taskIds Ids of the tasks.\r\n    function getTasks(uint256[] calldata _taskIds) external view returns (OffChainTask[] memory);\r\n\r\n    /// @notice Create a new task.\r\n    /// @param _metadata Metadata of the task. (IPFS hash)\r\n    /// @param _deadline Block timestamp at which the task expires if not completed.\r\n    /// @param _manager Who will manage the task (become the manager).\r\n    /// @param _disputeManager Who will manage the disputes (handle situations where the manager and executor are in disagreement).\r\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param _preapprove List of addresses (with reward) that are able to take the task without creating an application themselves.\r\n    /// @return taskId Id of the newly created task.\r\n    function createTask(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        address _manager,\r\n        address _disputeManager,\r\n        ERC20Transfer[] calldata _budget,\r\n        PreapprovedApplication[] calldata _preapprove\r\n    ) external payable returns (uint256 taskId);\r\n\r\n    /// @notice Apply to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of your application.\r\n    /// @param _nativeReward Wanted native currency for completing the task.\r\n    /// @param _reward Wanted rewards for completing the task.\r\n    /// @return applicationId Id of the newly created application.\r\n    function applyForTask(\r\n        uint256 _taskId,\r\n        string calldata _metadata,\r\n        NativeReward[] calldata _nativeReward,\r\n        Reward[] calldata _reward\r\n    ) external returns (uint32 applicationId);\r\n\r\n    /// @notice Accept application to allow them to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationIds Indexes of the applications to accept.\r\n    /// @dev Will revert if applicant reward is higher than the budget. increaseBudget should be called beforehand.\r\n    function acceptApplications(uint256 _taskId, uint32[] calldata _applicationIds) external;\r\n\r\n    /// @notice Take the task after your application has been accepted.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationId Index of application you made that has been accepted.\r\n    function takeTask(uint256 _taskId, uint32 _applicationId) external;\r\n\r\n    /// @notice Create a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of the submission. (IPFS hash)\r\n    /// @return submissionId Id of the newly created submission.\r\n    function createSubmission(uint256 _taskId, string calldata _metadata) external returns (uint8 submissionId);\r\n\r\n    /// @notice Review a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _submissionId Index of the submission that is reviewed.\r\n    /// @param _judgement Outcome of the review.\r\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\r\n    function reviewSubmission(\r\n        uint256 _taskId,\r\n        uint8 _submissionId,\r\n        SubmissionJudgement _judgement,\r\n        string calldata _feedback\r\n    ) external;\r\n\r\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Why the task was cancelled. (IPFS hash)\r\n    /// @return cancelTaskRequestId Id of the newly created request for task cancellation.\r\n    function cancelTask(uint256 _taskId, string calldata _metadata) external returns (uint8 cancelTaskRequestId);\r\n\r\n    /// @notice Accepts a request, executing the proposed action.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    /// @param _execute If the request should also be executed in this transaction.\r\n    function acceptRequest(uint256 _taskId, RequestType _requestType, uint8 _requestId, bool _execute) external;\r\n\r\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    function executeRequest(uint256 _taskId, RequestType _requestType, uint8 _requestId) external;\r\n\r\n    /// @notice Extend the deadline of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _extension How much to extend the deadline by.\r\n    function extendDeadline(uint256 _taskId, uint64 _extension) external;\r\n\r\n    /// @notice Increase the budget of the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _increase How much to increase each tokens amount by.\r\n    /// @dev Any attached native reward will also be used to increase the budget.\r\n    function increaseBudget(uint256 _taskId, uint96[] calldata _increase) external payable;\r\n\r\n    /// @notice Increase the reward of an application of the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationId Id of the application.\r\n    /// @param _nativeIncrease How much to increase each native amount by.\r\n    /// @param _increase How much to increase each tokens amount by.\r\n    function increaseReward(\r\n        uint256 _taskId,\r\n        uint32 _applicationId,\r\n        uint96[] calldata _nativeIncrease,\r\n        uint88[] calldata _increase\r\n    ) external;\r\n\r\n    /// @notice Edit the metadata of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newMetadata New metadata of the task.\r\n    /// @dev This metadata update might change the task completely. Show a warning to people who applied before the change.\r\n    function editMetadata(uint256 _taskId, string calldata _newMetadata) external;\r\n\r\n    /// @notice Transfers the manager role to a different address.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newManager What address should become the manager.\r\n    function transferManagement(uint256 _taskId, address _newManager) external;\r\n\r\n    /// @notice Completes the task through dispute resolution.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _partialNativeReward How much of each native reward should be paid out.\r\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\r\n    function completeByDispute(\r\n        uint256 _taskId,\r\n        uint96[] calldata _partialNativeReward,\r\n        uint88[] calldata _partialReward\r\n    ) external;\r\n\r\n    /// @notice Releases a part of the reward to the executor without marking the task as complete.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _partialNativeReward How much of each native reward should be paid out.\r\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\r\n    /// @dev Will fetch balanceOf to set the budget afterwards, can be used in case funds where sent manually to the escrow to sync the budget.\r\n    function partialPayment(uint256 _taskId, uint96[] calldata _partialNativeReward, uint88[] calldata _partialReward)\r\n        external;\r\n}\r\n"
        },
        "lib/trustless-actions/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
        },
        "lib/trustless-actions/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "lib/trustless-actions/lib/trustless-management/lib/osx-commons/contracts/src/dao/IDAO.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IDAO\n/// @author Aragon Association - 2022-2023\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\n/// @custom:security-contact sirt@aragon.org\ninterface IDAO {\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\n    /// @param to The address to call.\n    /// @param value The native token value to be sent with the call.\n    /// @param data The bytes-encoded function selector and calldata for the call.\n    struct Action {\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\n    /// @param _where The address of the contract.\n    /// @param _who The address of a EOA or contract to give the permissions.\n    /// @param _permissionId The permission identifier.\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\n    /// @return Returns true if the address has permission, false if not.\n    function hasPermission(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        bytes memory _data\n    ) external view returns (bool);\n\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\n    /// @param _metadata The IPFS hash of the new metadata object.\n    function setMetadata(bytes calldata _metadata) external;\n\n    /// @notice Emitted when the DAO metadata is updated.\n    /// @param metadata The IPFS hash of the new metadata object.\n    event MetadataSet(bytes metadata);\n\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\n    /// @param _actions The array of actions.\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    /// @return The array of results obtained from the executed actions in `bytes`.\n    /// @return The resulting failure map containing the actions have actually failed.\n    function execute(\n        bytes32 _callId,\n        Action[] memory _actions,\n        uint256 _allowFailureMap\n    ) external returns (bytes[] memory, uint256);\n\n    /// @notice Emitted when a proposal is executed.\n    /// @param actor The address of the caller.\n    /// @param callId The ID of the call.\n    /// @param actions The array of actions executed.\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\n    /// @param failureMap The failure map encoding which actions have failed.\n    /// @param execResults The array with the results of the executed actions.\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\n    event Executed(\n        address indexed actor,\n        bytes32 callId,\n        Action[] actions,\n        uint256 allowFailureMap,\n        uint256 failureMap,\n        bytes[] execResults\n    );\n\n    /// @notice Emitted when a standard callback is registered.\n    /// @param interfaceId The ID of the interface.\n    /// @param callbackSelector The selector of the callback function.\n    /// @param magicNumber The magic number to be registered for the callback function selector.\n    event StandardCallbackRegistered(\n        bytes4 interfaceId,\n        bytes4 callbackSelector,\n        bytes4 magicNumber\n    );\n\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\n    /// @param _token The address of the token or address(0) in case of the native token.\n    /// @param _amount The amount of tokens to deposit.\n    /// @param _reference The reference describing the deposit reason.\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\n\n    /// @notice Emitted when a token deposit has been made to the DAO.\n    /// @param sender The address of the sender.\n    /// @param token The address of the deposited token.\n    /// @param amount The amount of tokens deposited.\n    /// @param _reference The reference describing the deposit reason.\n    event Deposited(\n        address indexed sender,\n        address indexed token,\n        uint256 amount,\n        string _reference\n    );\n\n    /// @notice Emitted when a native token deposit has been made to the DAO.\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\n    /// @param sender The address of the sender.\n    /// @param amount The amount of native tokens deposited.\n    event NativeTokenDeposited(address sender, uint256 amount);\n\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\n    /// @param _trustedForwarder The trusted forwarder address.\n    function setTrustedForwarder(address _trustedForwarder) external;\n\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\n    /// @return The trusted forwarder address.\n    function getTrustedForwarder() external view returns (address);\n\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\n    /// @param forwarder the new forwarder address.\n    event TrustedForwarderSet(address forwarder);\n\n    /// @notice Checks whether a signature is valid for a provided hash according to [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271).\n    /// @param _hash The hash of the data to be signed.\n    /// @param _signature The signature byte array associated with `_hash`.\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid and `0xffffffff` if not.\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\n\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\n    /// @param _interfaceId The ID of the interface.\n    /// @param _callbackSelector The selector of the callback function.\n    /// @param _magicNumber The magic number to be registered for the function signature.\n    function registerStandardCallback(\n        bytes4 _interfaceId,\n        bytes4 _callbackSelector,\n        bytes4 _magicNumber\n    ) external;\n\n    /// @notice Removed function being left here to not corrupt the IDAO interface ID. Any call will revert.\n    /// @dev Introduced in v1.0.0. Removed in v1.4.0.\n    function setSignatureValidator(address) external;\n}\n"
        },
        "lib/trustless-actions/lib/trustless-management/src/IDAOExtensionWithAdmin.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IDAO} from \"../lib/osx-commons/contracts/src/dao/IDAO.sol\";\n\ninterface IDAOExtensionWithAdmin {\n    error SenderIsNotAdmin();\n\n    event AdminSet(IDAO indexed dao, address admin);\n\n    /// @notice Registers or updates the admin of a DAO. The admin has the permission to change permissions.\n    /// @param _dao The DAO this admin will control.\n    /// @param _admin The address that will control the DAO.\n    /// @dev If no admin is set, this can only be called by the DAO itself. When an admin is set, only the existing admin can update.\n    function setAdmin(IDAO _dao, address _admin) external;\n}\n"
        },
        "lib/trustless-actions/lib/trustless-management/src/IDAOManager.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IDAOExtensionWithAdmin, IDAO} from \"./IDAOExtensionWithAdmin.sol\";\n\ninterface IDAOManager is IDAOExtensionWithAdmin {\n    error AccessDenied();\n\n    event Execution(\n        IDAO indexed dao,\n        uint256 indexed role,\n        address indexed sender,\n        IDAO.Action[] actions,\n        bytes[] returnValues,\n        uint256 failureMap\n    );\n\n    /// @notice Executes a list of actions as the DAO.\n    /// @param _dao Which DAO should execute the actions.\n    /// @param _role The role to use for validation if execution is allowed.\n    /// @param _actions The actions to execute.\n    /// @param _failureMap Which actions are allowed to fail without reverting the whole transaction.\n    /// @dev Only a single role means that a user satisfies multiple roles they might need to split their actions into multiple batches (one per role).\n    function asDAO(IDAO _dao, uint256 _role, IDAO.Action[] calldata _actions, uint256 _failureMap)\n        external\n        returns (bytes[] memory returnValues, uint256 failureMap);\n}\n"
        },
        "lib/trustless-actions/src/ITrustlessActions.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IDAOManager, IDAO} from \"../lib/trustless-management/src/IDAOManager.sol\";\n\ninterface ITrustlessActions {\n    error RequestDoesNotExist();\n    error RequestAlreadyExecuted();\n\n    event ActionCreated(\n        uint32 indexed id,\n        IDAO indexed dao,\n        IDAOManager manager,\n        uint256 role,\n        IDAO.Action[] actions,\n        uint256 failureMap,\n        string metadata\n    );\n    event ActionExecuted(\n        uint32 indexed id, IDAO indexed dao, address indexed executor, bytes[] returnValues, uint256 failureMap\n    );\n\n    /// @notice A container for multiple requests.\n    /// @param requestCount How many proposed actions have been created.\n    /// @param getRequest The proposed actions to be executed.\n    struct ActionRequests {\n        uint32 requestCount;\n        mapping(uint32 id => ActionRequest request) getRequest;\n    }\n\n    /// @notice A container for all info related to an execute action request.\n    /// @param executed If the action has been executed.\n    /// @param manager The management contract to use for the execution.\n    /// @param role The role to use for the execution.\n    /// @param actions The actions to execute.\n    /// @param failureMap Which actions are allowed to fail without reverting the transaction.\n    struct ActionRequest {\n        bool executed;\n        IDAOManager manager;\n        uint256 role;\n        IDAO.Action[] actions;\n        uint256 failureMap;\n    }\n\n    /// @notice Gets a certain action request.\n    /// @param _dao The DAO that has the request.\n    /// @param _id The id of the request.\n    function getAction(IDAO _dao, uint32 _id) external view returns (ActionRequest memory request);\n\n    /// @notice Creates a request to execute certain actions.\n    /// @param _manager The management contract to use for performing the actions.\n    /// @param _role The role of the management contract to use for performing the actions.\n    /// @param _actions The actions that are proposed to be executed.\n    /// @param _failureMap The actions that are allowed to be revert.\n    /// @param _metadata Additional info from the creator.\n    /// @dev The sender should be the DAO (utilizing a management solution).\n    function createAction(\n        IDAOManager _manager,\n        uint256 _role,\n        IDAO.Action[] calldata _actions,\n        uint256 _failureMap,\n        string calldata _metadata\n    ) external returns (uint32 id);\n\n    /// @notice Executes a certain action request.\n    /// @param _dao The DAO that has the request.\n    /// @param _id The id of the request.\n    /// @dev This is only possible if the request has not been executed yet and the conditions of the TrustlessActions implementation are met.\n    function executeAction(IDAO _dao, uint32 _id) external returns (bytes[] memory returnValues, uint256 failureMap);\n}\n"
        },
        "lib/trustless-actions/src/extensions/CreateTrustlessAction.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ERC165} from \"../../lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\n\nimport {ICreateTrustlessAction, IDAO} from \"./ICreateTrustlessAction.sol\";\n\nabstract contract CreateTrustlessAction is ICreateTrustlessAction {\n    function _createAction(\n        IDAO _dao,\n        string calldata _metadata,\n        ManagementInfo calldata _managementInfo,\n        TrustlessActionsInfo calldata _trustlessActionsInfo,\n        IDAO.Action[] memory _actions\n    ) internal returns (uint256 actionId) {\n        IDAO.Action[] memory createAction = new IDAO.Action[](1);\n        createAction[0] = IDAO.Action(\n            address(_managementInfo.trustlessActions),\n            0,\n            abi.encodeWithSelector(\n                _managementInfo.trustlessActions.createAction.selector,\n                _trustlessActionsInfo.manager,\n                _trustlessActionsInfo.role,\n                _actions,\n                0, // Failure map\n                _metadata\n            )\n        );\n\n        (bytes[] memory returnValues,) = _managementInfo.manager.asDAO(_dao, _managementInfo.role, createAction, 0);\n        (actionId) = abi.decode(returnValues[0], (uint256));\n        emit TrustlessActionCreated(_dao, _managementInfo.trustlessActions, actionId);\n    }\n}\n"
        },
        "lib/trustless-actions/src/extensions/ICreateTrustlessAction.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IDAOManager, IDAO} from \"../../lib/trustless-management/src/IDAOManager.sol\";\nimport {ITrustlessActions} from \"../ITrustlessActions.sol\";\n\ninterface ICreateTrustlessAction {\n    event TrustlessActionCreated(\n        IDAO indexed dao, ITrustlessActions indexed trustlessActions, uint256 indexed actionId\n    );\n\n    /// @notice A container for all info needed to create a trustless action.\n    /// @param manager Mangement solution used by the DAO (for creating trustless actions).\n    /// @param role Role to use to be allowed to create actions.\n    /// @param trustlessActions TrustlessActions contract where to create the action.\n    struct ManagementInfo {\n        IDAOManager manager;\n        uint256 role;\n        ITrustlessActions trustlessActions;\n    }\n\n    /// @notice A container for all info needed to execute a trustless action.\n    /// @param manager Mangement solution used by the DAO (for executing turstless actions).\n    /// @param role Role to use to be allowed to execute the trustless action.\n    struct TrustlessActionsInfo {\n        IDAOManager manager;\n        uint256 role;\n    }\n}\n"
        },
        "lib/trustless-actions/src/extensions/IPaidAction.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IDAO} from \"../../lib/trustless-management/src/IDAOManager.sol\";\n\ninterface IPaidAction {\n    error Underpaying();\n    error TransferToDAOFailed();\n\n    /// @notice A container for all settings related to a certain DAO.\n    /// @param cost How much native currency should be paid to be allowed to create an action.\n    struct PaidDaoSettings {\n        uint256 cost;\n    }\n\n    /// @notice The cost of a certain DAO.\n    function getCost(IDAO _dao) external view returns (uint256 cost);\n\n    /// @notice Updates the cost. The sender should be the DAO that wants to update.\n    /// @param _cost The new cost.\n    function updateCost(uint256 _cost) external;\n}\n"
        },
        "lib/trustless-actions/src/extensions/PaidAction.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ERC165} from \"../../lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\n\nimport {IPaidAction, IDAO} from \"./IPaidAction.sol\";\n\nabstract contract PaidAction is ERC165, IPaidAction {\n    mapping(IDAO dao => PaidDaoSettings paidSettings) private paidDaoSettings;\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IPaidAction).interfaceId || super.supportsInterface(_interfaceId);\n    }\n\n    /// @inheritdoc IPaidAction\n    function getCost(IDAO _dao) external view returns (uint256 cost) {\n        return paidDaoSettings[_dao].cost;\n    }\n\n    /// @inheritdoc IPaidAction\n    function updateCost(uint256 _cost) external {\n        paidDaoSettings[IDAO(msg.sender)].cost = _cost;\n    }\n\n    function _ensurePaid(IDAO _dao) internal {\n        uint256 cost = paidDaoSettings[_dao].cost;\n\n        // Gas optimization\n        if (cost != 0) {\n            // Cost is required to create an action. It is sent to the DAO.\n            if (msg.value < cost) {\n                revert Underpaying();\n            }\n\n            // Normal address.transfer does not work with gas estimation\n            (bool success,) = address(_dao).call{value: msg.value}(\"\");\n            if (!success) {\n                revert TransferToDAOFailed();\n            }\n        }\n    }\n}\n"
        },
        "src/TaskDrafts/ITaskDrafts.sol": {
          "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {ITasks} from \"../../lib/openrd-foundry/src/ITasks.sol\";\r\nimport {ICreateTrustlessAction, IDAO} from \"../../lib/trustless-actions/src/extensions/ICreateTrustlessAction.sol\";\r\n\r\ninterface ITaskDrafts {\r\n    /// @notice A container for all info needed to create a task.\r\n    /// @param tasks The contract to create the task.\r\n    /// @param metadata The metadata of the created task.\r\n    /// @param deadline The deadline of the created task.\r\n    /// @param manager The manager of the created task.\r\n    /// @param disputeManager The dispute manager of the created task.\r\n    /// @param nativeBudget The native budget of the created task.\r\n    /// @param budget The budget of the created task.\r\n    /// @param preapproved The preapproved applicants of the created task.\r\n    struct CreateTaskInfo {\r\n        string metadata;\r\n        uint64 deadline;\r\n        address manager;\r\n        address disputeManager;\r\n        uint96 nativeBudget;\r\n        ITasks.ERC20Transfer[] budget;\r\n        ITasks.PreapprovedApplication[] preapproved;\r\n    }\r\n\r\n    /// @notice Create a proposal to create a task.\r\n    /// @param _dao The dao requested to create the task.\r\n    /// @param _metadata Metadata of the proposal.\r\n    /// @param _managementInfo The information related to creating the action.\r\n    /// @param _trustlessActionsInfo The infromation related to executing the action.\r\n    /// @param _taskInfo The task to be created if the proposal passes.\r\n    /// @dev Does not approve the budget for spending. The DAO should approve the budget in advance (select ERC20s can have a high allowance set)\r\n    function createDraftTask(\r\n        IDAO _dao,\r\n        string calldata _metadata,\r\n        ICreateTrustlessAction.ManagementInfo calldata _managementInfo,\r\n        ICreateTrustlessAction.TrustlessActionsInfo calldata _trustlessActionsInfo,\r\n        CreateTaskInfo calldata _taskInfo\r\n    ) external;\r\n}\r\n"
        },
        "src/TaskDrafts/TaskDrafts.sol": {
          "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {CreateTrustlessAction} from \"../../lib/trustless-actions/src/extensions/CreateTrustlessAction.sol\";\r\nimport {PaidAction} from \"../../lib/trustless-actions/src/extensions/PaidAction.sol\";\r\nimport {OpenmeshENSReverseClaimable} from \"../../lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol\";\r\n\r\nimport {ITaskDrafts, ITasks, IDAO} from \"./ITaskDrafts.sol\";\r\n\r\ncontract TaskDrafts is CreateTrustlessAction, PaidAction, OpenmeshENSReverseClaimable, ITaskDrafts {\r\n    ITasks public immutable tasks;\r\n\r\n    constructor(ITasks _tasks) {\r\n        tasks = _tasks;\r\n    }\r\n\r\n    /// @inheritdoc PaidAction\r\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\r\n        return _interfaceId == type(ITaskDrafts).interfaceId || super.supportsInterface(_interfaceId);\r\n    }\r\n\r\n    /// @inheritdoc ITaskDrafts\r\n    function createDraftTask(\r\n        IDAO _dao,\r\n        string calldata _metadata,\r\n        ManagementInfo calldata _managementInfo,\r\n        TrustlessActionsInfo calldata _trustlessActionsInfo,\r\n        CreateTaskInfo calldata _taskInfo\r\n    ) external {\r\n        _ensurePaid(_dao);\r\n\r\n        IDAO.Action[] memory actions = new IDAO.Action[](1);\r\n        actions[0] = IDAO.Action(\r\n            address(tasks),\r\n            _taskInfo.nativeBudget,\r\n            abi.encodeWithSelector(\r\n                tasks.createTask.selector,\r\n                _taskInfo.metadata,\r\n                _taskInfo.deadline,\r\n                _taskInfo.manager,\r\n                _taskInfo.disputeManager,\r\n                _taskInfo.budget,\r\n                _taskInfo.preapproved\r\n            )\r\n        );\r\n\r\n        _createAction(_dao, _metadata, _managementInfo, _trustlessActionsInfo, actions);\r\n    }\r\n}\r\n"
        }
      },
      "settings": {
        "remappings": [
          "@openzeppelin/contracts/=lib/trustless-actions/lib/openzeppelin-contracts/contracts/",
          "ds-test/=lib/trustless-actions/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
          "ens-reverse-claimable/=lib/openmesh-admin/lib/ens-reverse-claimable/src/",
          "erc4626-tests/=lib/trustless-actions/lib/openzeppelin-contracts/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "openmesh-admin/=lib/openmesh-admin/src/",
          "openrd-foundry/=lib/openrd-foundry/src/",
          "openzeppelin-contracts/=lib/trustless-actions/lib/openzeppelin-contracts/",
          "osx-commons/=lib/trustless-actions/lib/trustless-management/lib/osx-commons/",
          "smart-account/=lib/openmesh-admin/lib/smart-account/src/",
          "tag-manager/=lib/trustless-actions/lib/trustless-management/lib/tag-manager/src/",
          "trustless-actions/=lib/trustless-actions/src/",
          "trustless-management/=lib/trustless-actions/lib/trustless-management/src/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "shanghai",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/openmesh-smart-contracts/lib/openrd-dao-extensions",
  "submitted": {
    "transactionHash": "0x820dbacbb5f6bb2a4cd10c5c5e217e5f3e6bc1409c9813f1a2dcc890dec8a97b",
    "date": "2024-04-15T18:26:34.078Z"
  }
}
