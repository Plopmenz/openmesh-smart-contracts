{
  "type": "deployment",
  "id": "TagVotingSetup",
  "batch": "ploparb",
  "batchIndex": 35,
  "deploymentAddress": "0xa9dc74EcFceC61cCFDA2755BC671F8568b28a6E2",
  "constructorArgs": [],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x00000000000000000000000000000000000000000000000000706c6f7061726260a08060405234610084576129af8181016001600160401b0381118382101761007057829161104d833903905ff08015610065576001600160a01b0316608052604051610fc4908161008982396080518181816101ff015281816105a201526107da0152f35b6040513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b5f80fdfe60806040908082526004908136101562000017575f80fd5b5f3560e01c90816301ffc9a714620008c1575080632ae9c60014620008095780635c60da1b14620007c45780639cb0a124146200052a578063a8a9c29e14620004725763f10832f11462000069575f80fd5b34620003e25781600319360112620003e2576200008562000931565b9060249182359367ffffffffffffffff808611620003e25736602387011215620003e25785840135818111620003e2578601923686850111620003e25786620000cd62000b60565b940360e08112620003e25760a013620003e257825195620000ee8762000a3f565b808801356003811015620003e25787526200010c6044890162000b8b565b602098898901918252620001236064820162000b8b565b93868a019485526084820135908682168203620003e25760608b0191825260808b019060a4840135825260c48401359260018060a01b0397888516809503620003e2578e96898b948d519963a6beced760e01b908b0152169e8f8a8a0152516200018d8162000948565b6044890152519063ffffffff809216606489015251166084870152511660a48501525160c484015260e483015260e4610104910135818301528152610140808201928284108685111762000460578387526103f19081840192830196858810908811176200044e575062000b9e8439837f000000000000000000000000000000000000000000000000000000000000000016809552856101608201528151806101808301528a5f5b8281106200043757505090815f6101a06060959484010152601f8019910116010301905ff08015620003ee5716946200026d62000a93565b918351631befc40560e01b815288818881855afa9081156200042d57908992915f91620003f8575b50855190620002a48262000a3f565b5f8252898483015284878301525f60608301526080820152620002c78562000b1c565b52620002d38462000b1c565b5084516364e25fe560e11b815296879182905afa8015620003ee575f90620003b4575b620003b095508351906200030a8262000a3f565b5f8252878983015282858301525f606083015260808201526200032d8362000b3e565b52620003398262000b3e565b50825190620003488262000a3f565b5f82528782015285838201525f60608201527fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d60808201526200038b8262000b4f565b52620003978162000b4f565b50858301528080519586958652850152830190620009b1565b0390f35b508685813d8311620003e6575b620003cd818362000a70565b81010312620003e257620003b09451620002f6565b5f80fd5b503d620003c1565b83513d5f823e3d90fd5b83819492503d831162000425575b62000412818362000a70565b81010312620003e2578891515f62000295565b503d62000406565b85513d5f823e3d90fd5b8181860101516101a08286010152018b9062000235565b634e487b7160e01b5f90815260418b52fd5b634e487b7160e01b5f90815260418a52fd5b8234620003e25760606003198181360112620003e2576200049262000931565b5060243561ffff811603620003e2576044359067ffffffffffffffff8211620003e257829136030112620003e25790620004cb62000b60565b918151928391838352805180948401525f935b80851062000510575f818501830152601f01601f1916830183810382016020850152929350620003b0920190620009b1565b6080850151868601830152602090940193859350620004de565b509034620003e2576003198181360112620003e2576200054962000931565b916024359167ffffffffffffffff8311620003e2576060908386019336030112620003e2576200057862000a93565b91620005848162000b07565b8251631befc40560e01b8152909560209591926001600160a01b03927f000000000000000000000000000000000000000000000000000000000000000084169088868581855afa958615620007ba575f9662000785575b5084875191620005eb8362000a3f565b8160019c60018552168b840152169586888301525f60608301526080820152620006158862000b1c565b52620006218762000b1c565b50876200062e8362000b07565b918751948580926364e25fe560e11b82525afa80156200077b575f9062000745575b620006a19350848799979a989a51926200066a8462000a3f565b60018452168783015285898301525f606083015260808201526200068e8962000b3e565b526200069a8862000b3e565b5062000b07565b855192620006af8462000a3f565b600184528484015216848201525f60608201527fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d6080820152620006f38562000b4f565b52620006ff8462000b4f565b508251928180850191818652865180935285019501915f5b828110620007255785870386f35b9091929382620007388298875162000967565b9795019392910162000717565b508783813d831162000773575b6200075e818362000a70565b81010312620003e257620006a1925162000650565b503d62000752565b86513d5f823e3d90fd5b9095508881813d8311620007b2575b620007a0818362000a70565b81010312620003e25751945f620005db565b503d62000794565b87513d5f823e3d90fd5b8234620003e2575f366003190112620003e257517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b509034620003e2575f366003190112620003e257805167ffffffffffffffff91906060810183811182821017620008ae57825260609036903780519160608301908111838210176200089b5781939293526001906001845260209260208501525f8185015251918293905f945b600386106200088457606085f35b825160ff1681529483019491810191810162000876565b604184634e487b7160e01b5f525260245ffd5b604185634e487b7160e01b5f525260245ffd5b8234620003e2576020366003190112620003e257359063ffffffff60e01b8216809203620003e25760209163099718b560e41b811490811562000920575b81156200090e575b5015158152f35b6301ffc9a760e01b1490508362000907565b621574e360e91b81149150620008ff565b600435906001600160a01b0382168203620003e257565b600311156200095357565b634e487b7160e01b5f52602160045260245ffd5b90608060a09280516200097a8162000948565b83526020810151600180861b0380911660208501528060408301511660408501526060820151166060840152015160808201520190565b6040820181519160408452825180925260608401916020809401905f5b81811062000a215750505082015192828183039101528180845192838152019301915f5b82811062000a01575050505090565b909192938262000a15600192875162000967565b950193929101620009f2565b82516001600160a01b031685529385019391850191600101620009ce565b60a0810190811067ffffffffffffffff82111762000a5c57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111762000a5c57604052565b60408051916080916080840184811067ffffffffffffffff82111762000a5c576040526003845283925f5b60608082101562000afe5783516020929162000ada8262000a3f565b5f82525f8491818385015281888501528301525f8583015282890101520162000abe565b50505050909150565b356001600160a01b0381168103620003e25790565b80511562000b2a5760200190565b634e487b7160e01b5f52603260045260245ffd5b80516001101562000b2a5760400190565b80516002101562000b2a5760600190565b604051906040820182811067ffffffffffffffff82111762000a5c5760405260606020838281520152565b359063ffffffff82168203620003e25756fe6040608081526103f18038038061001581610211565b928339810190828183031261020d5780516001600160a01b0381169081810361020d576020838101516001600160401b039491939185821161020d57019085601f8301121561020d5781519161007261006d84610236565b610211565b928084528584019786828401011161020d5787866100909301610251565b823b156101b3577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916821790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28051158015906101ac575b610109575b855160cb90816103268239f35b8551936060850190811185821017610198578652602784527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c83850152660819985a5b195960ca1b8487015251610184945f918291845af4903d1561018f573d61017561006d82610236565b9081525f81943d92013e610272565b505f808080806100fc565b60609250610272565b634e487b7160e01b5f52604160045260245ffd5b505f6100f7565b865162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761019857604052565b6001600160401b03811161019857601f01601f191660200190565b5f5b8381106102625750505f910152565b8181015183820152602001610253565b919290156102d45750815115610286575090565b3b1561028f5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156102e75750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526103178151809281602486015260208686019101610251565b601f01601f19168101030190fdfe608060405236156051577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545f9081906001600160a01b0316368280378136915af43d5f803e15604d573d5ff35b3d5ffd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545f9081906001600160a01b0316368280378136915af43d5f803e15604d573d5ff3fea26469706673582212208baf8b022bd8aba0b284875ce9012fcc1c152e2b4d32d3ec6fcaff62ca34faef64736f6c63430008170033a2646970667358221220f6f666ee4de8561eb61fef5c2e9a379351fc88565171541ae60ea46f4a865d8764736f6c6343000817003360a080604052346100da57306080525f549060ff8260081c16610088575060ff8082160361004e575b6040516128d090816100df823960805181818161103901528181611181015261145c0152f35b60ff90811916175f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a15f610028565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c90816301ffc9a714611a1b5750806304aa0937146119f2578063054fd2c2146119cb5780630de21856146119ad5780630dfb278e1461171957806317d1b404146116e45780631befc405146116aa57806323d07188146116805780632ae9c600146116115780633659cfe6146114375780634162169f1461140f57806341de6830146113f55780634f1ef2861461110757806351f91066146110e957806352d1902d14611027578063536f9f421461100c5780635671576114610fe25780635c60da1b14610fae5780637c36e8e814610f875780638a4b00f814610f69578063970601d814610f175780639cba3021146107b4578063a230c52414610791578063a6beced714610470578063c7f758a8146102b6578063c9c4bfca1461027c578063cc63604a1461025e578063ce6366c414610229578063cf13114914610201578063da35c664146101e3578063f60046b2146101c55763fe0d94c11461017c575f80fd5b346101c15760203660031901126101c15760043561019981612560565b156101a9576101a7906125cb565b005b60249060405190639fefd0f160e01b82526004820152fd5b5f80fd5b346101c1575f3660031901126101c157602061016154604051908152f35b346101c1575f3660031901126101c157602061012d54604051908152f35b346101c15760203660031901126101c157602061021f6004356121e1565b6040519015158152f35b346101c15760603660031901126101c15760243560048110156101c15760443580151581036101c1576101a791600435611ff2565b346101c15760203660031901126101c157602061021f600435612560565b346101c1575f3660031901126101c15760206040517f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f58152f35b346101c15760203660031901126101c1575f60a06040516102d681611b4e565b82815282602082015282604082015282606082015282608082015201525f6040805161030181611b33565b82815282602082015201526004355f5261015f60205260405f206103248161250f565b60ff825416916104656040519161033a83611b4e565b6001600160401b03600182015460ff811661035481611b15565b855263ffffffff8160081c166020860152818160281c166040860152818160681c16606086015260a81c166080840152600281015460a08401526040805161039b81611b33565b600383015481526004830154602082015260058301548282015260a060086103c560078601611edb565b940154958351988998151589521515602089015280516103e481611b15565b8489015263ffffffff60208201511660608901526001600160401b03848201511660808901526001600160401b03606082015116828901526001600160401b0360808201511660c0890152015160e08701528051610100870152602081015161012087015201516101408501526101a06101608501526101a0840190611bf8565b906101808301520390f35b346101c1576101003660031901126101c1576001600160a01b03600435818116908190036101c15760a03660231901126101c15760c4359182168092036101c1575f549160ff8360081c161592838094610784575b801561076d575b156107115760ff1981166001175f5583610700575b5061050460ff5f5460081c166104f6816124af565b6104ff816124af565b6124af565b6bffffffffffffffffffffffff60a01b918260c954161760c95560443563ffffffff908181168082036101c157620f423f81116106d557606435928316908184036101c157620f42408083116106b75750608435916001600160401b038316908184036101c157610e1080831061069957506301e1338080831161069957506024359360038510156101c1577fa8a18d06ddd19f24a872740e3d364c86f62be25f7154525dda18ef07fda46f3e966105e060a0976105c188611e71565b6101609064ffffffff0082549160081b169064ffffffff001916179055565b6101609168ffffffff000000000067ffffffffffffffff60481b84549260481b169260281b169070ffffffffffffffffffffffff000000000019161717905560a4359283610161556040519461063581611b15565b85526020850152604084015260608301526080820152a16101919182541617905560e4356101925561066357005b61ff00195f54165f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b604490836040519163628819f760e11b835260048301526024820152fd5b604490836040519163cc80c19560e01b835260048301526024820152fd5b60405163cc80c19560e01b8152620f423f600482015263ffffffff83166024820152604490fd5b0390fd5b61ffff1916610101175f55836104e1565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156104cc5750600160ff8216146104cc565b50600160ff8216106104c5565b346101c15760203660031901126101c157602061021f6107af611aff565b6123df565b346101c15760e03660031901126101c1576001600160401b03600435116101c1573660236004350112156101c1576001600160401b0360043560040135116101c157366024600435600401356004350101116101c1576001600160401b03602435116101c1573660236024350112156101c1576001600160401b0360243560040135116101c15736602480356004013560051b81350101116101c1576001600160401b0360643516606435036101c1576001600160401b0360843516608435036101c157600460a43510156101c15760c435151560c435036101c15761016154151580610f07575b610eef575f196108ab43612447565b016108b542612447565b6064356001600160401b0316610e9d575b6001600160401b036101605460481c166001600160401b03818184160111610d68576084356001600160401b0316610e3f576001600160401b03821601915b61012d54916001830161012d556040516001600160401b03821681526001600160401b038516602082015260a060408201528361095160a083016004356004013560246004350161223f565b9180830360608201526024356004013583526020830160206024356004013560051b850101936024803501915f5b602435600401358110610d9a57505050507fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c929060443560808201528033940390a3825f5261015f60205260405f209360018501926cffffffffffffffff000000000084549360281b16916001600160401b0360681b9060681b16906001600160401b0360a81b9060a81b1690818364ffffffffff62ffffff60e81b01861617821717855560ff610160541692610a3484611b15565b64ffffffff01600160e81b03198516811782178317841786556101605464ffffffff00166001600160e81b031990951617171717179055610a73611dc1565b63ffffffff6101605460281c16620f424091828211610d7c5790610a9691611c84565b908082049106610d58575b6002830155604435610d4b575b5f5b602435600401358110610ae45760208260a435610ad0575b604051908152f35b610adf60c43560a43583611ff2565b610ac8565b60248160051b81350101356082196024353603018112156101c157600784015468010000000000000000811015610d375760018101806007870155811015610d2357600785015f52600360205f2091020190602481813501013560018060a01b0381168091036101c15782546001600160a01b031916178255602435810160448101356001840155606481013591903603604219018212156101c1576001600160401b0360248383823501010135116101c15760248035820183019081013536036044909101136101c157610bbc6002840154611e8c565b601f8111610cd2575b505f90601f6024848382350101013511600114610c32579160029160019594935f9160248483823501010135610c1e575b505f19602480359092019093010135600381901b9290921c191690851b179101555b01610ab0565b602435820184010160440135915089610bf6565b90600284015f5260205f20905f5b60248035850186010135601f19168110610cb1575060019594936002938793602493843583018401850135601f19811610610c89575b5050823501010135811b01910155610c18565b843583018401908101604401355f199186013560031b60f8169190911c191690558a80610c76565b90916020600181926044868989602435010101013581550193019101610c40565b600284015f9081526020908190209060248035850186010135601f810160051c83019111610d1c575b601f830160051c82018110610d11575050610bc5565b5f8155600101610cfb565b5080610cfb565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b6044356008830155610aae565b5f198114610d6857600101610aa1565b634e487b7160e01b5f52601160045260245ffd5b604483836040519163cc80c19560e01b835260048301526024820152fd5b919394509194601f1984820301835285356082196024353603018112156101c15760243501602481013560018060a01b0381168091036101c1578252604481013560208301526064810135604219823603018112156101c15701604460248201359101906001600160401b0381116101c15780360382136101c157610e2f60209283926060868160406001990152019161223f565b970193019101908894939161097f565b91608435926001600160401b038181851601166001600160401b036084351610610e695750610905565b604051631332703d60e21b81526001600160401b039384169190910183166004820152608435909216602483015250604490fd5b606435906001600160401b0381166001600160401b036064351610610ec257506108c6565b604051631332703d60e21b81526001600160401b0391821660048201526064359091166024820152604490fd5b604051633aae64d160e21b8152336004820152602490fd5b50610f11336123df565b1561089c565b346101c15760403660031901126101c157610f30611ae9565b6004355f5261015f602052600660405f20019060018060a01b03165f52602052602060ff60405f205416610f676040518092611ba5565bf35b346101c15760203660031901126101c157602061021f600435611e3a565b346101c1575f3660031901126101c157602063ffffffff6101605460081c16604051908152f35b346101c1575f3660031901126101c1575f8051602061287b833981519152546040516001600160a01b039091168152602090f35b346101c1575f3660031901126101c15760206001600160401b036101605460481c16604051908152f35b346101c15760203660031901126101c1576020610ac8611dc1565b346101c1575f3660031901126101c1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361107e5760206040515f8051602061287b8339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b346101c1575f3660031901126101c157602061019254604051908152f35b60403660031901126101c15761111b611aff565b602435906001600160401b0382116101c157366023830112156101c157816004013561114681611b8a565b6111536040519182611b69565b8181526020918282019436602483830101116101c157815f9260248693018837830101526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116906111af30831415611cff565b6111cb5f8051602061287b833981519152928284541614611d60565b6111de8160c9541636903390309061225f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561121657505050506101a79150612752565b8492939416906040516352d1902d60e01b81528581600481865afa5f91816113c6575b5061129a5760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9493940361136f576112ab82612752565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2825115801590611367575b6112e057005b5f806101a795604051956112f387611b33565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c86880152660819985a5b195960ca1b60408801525190845af4903d1561135e573d61134281611b8a565b906113506040519283611b69565b81525f81943d92013e6127e1565b606092506127e1565b5060016112da565b60405162461bcd60e51b815260048101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508681813d83116113ee575b6113de8183611b69565b810103126101c157519088611239565b503d6113d4565b346101c1575f3660031901126101c15760206040515f8152f35b346101c1575f3660031901126101c15760c9546040516001600160a01b039091168152602090f35b346101c1576020806003193601126101c157611451611aff565b6001600160a01b03917f0000000000000000000000000000000000000000000000000000000000000000831661148930821415611cff565b6114a55f8051602061287b833981519152918583541614611d60565b6114b88460c9541636903390309061225f565b60405190828201948286106001600160401b03871117610d3757856040525f835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914354165f1461151257505050506101a79150612752565b8492939416906040516352d1902d60e01b81528581600481865afa5f91816115e2575b506115965760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9493940361136f576115a782612752565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28251158015906115db576112e057005b505f6112da565b9091508681813d831161160a575b6115fa8183611b69565b810103126101c157519088611535565b503d6115f0565b346101c1575f3660031901126101c157606060405161162f81611b33565b36903760405161163e81611b33565b6001808252602090600460208401525f6040840152604051918293905f945b6003861061166a57606085f35b825160ff1681529483019491810191810161165d565b346101c1575f3660031901126101c157602060ff6101605416604051906116a681611b15565b8152f35b346101c1575f3660031901126101c15760206040517fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe58152f35b346101c15760603660031901126101c1576116fd611ae9565b6044359060048210156101c15760209161021f91600435612343565b346101c15760a03660031901126101c15760018060a01b0360c95416604051637ef7c88360e11b815230600482015260249133838301527fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe5604492818482015260806064820152366084820152365f60a48301375f60a4368301015260208160a481601f19601f3601168101030181865afa9081156119a2575f91611973575b501561194b57505081359063ffffffff92838316908184036101c157620f423f82116119245782359485168086036101c157620f42408082116119095750606435936001600160401b038516928386036101c157610e108085106118ee57506301e13380908185116118d4575050506004359360038510156101c1577fa8a18d06ddd19f24a872740e3d364c86f62be25f7154525dda18ef07fda46f3e9661186660a0976105c188611e71565b6101609168ffffffff000000000067ffffffffffffffff60481b84549260481b169260281b169070ffffffffffffffffffffffff0000000000191617179055608435928361016155604051946118bb81611b15565b85526020850152604084015260608301526080820152a1005b84906040519263628819f760e11b84526004840152820152fd5b9084906040519263628819f760e11b84526004840152820152fd5b9250906040519263cc80c19560e01b84526004840152820152fd5b60405163cc80c19560e01b8152620f423f600482015263ffffffff85166024820152604490fd5b6084928460405193630cb6f8ed60e21b85526004850152309084015233908301526064820152fd5b611995915060203d60201161199b575b61198d8183611b69565b810190612227565b856117b9565b503d611983565b6040513d5f823e3d90fd5b346101c15760203660031901126101c157602061021f600435611c97565b346101c1575f3660031901126101c157602063ffffffff6101605460281c16604051908152f35b346101c1575f3660031901126101c157610191546040516001600160a01b039091168152602090f35b346101c15760203660031901126101c1576004359063ffffffff60e01b82168092036101c15760209163433c580f60e11b8114908115611ad8575b8115611a64575b5015158152f35b63368d719960e21b811491508115611a7e575b5083611a5d565b63041de68360e41b811491508115611ac8575b8115611ab7575b8115611aa6575b5083611a77565b6301ffc9a760e01b14905083611a9f565b6352d1902d60e01b81149150611a98565b621574e360e91b81149150611a91565b63268c8a2f60e11b81149150611a56565b602435906001600160a01b03821682036101c157565b600435906001600160a01b03821682036101c157565b60031115611b1f57565b634e487b7160e01b5f52602160045260245ffd5b606081019081106001600160401b03821117610d3757604052565b60c081019081106001600160401b03821117610d3757604052565b90601f801991011681019081106001600160401b03821117610d3757604052565b6001600160401b038111610d3757601f01601f191660200190565b906004821015611b1f5752565b5f5b838110611bc35750505f910152565b8181015183820152602001611bb4565b90602091611bec81518092818552858086019101611bb2565b601f01601f1916010190565b908082519081815260208091019281808460051b8301019501935f915b848310611c255750505050505090565b9091929394958480611c67600193601f198682030187528a5190606090868060a01b038351168152848301518582015281604080940151938201520190611bd3565b9801930193019194939290611c15565b91908203918211610d6857565b81810292918115918404141715610d6857565b5f5261015f60205260405f2060018101549063ffffffff611cd4611cb9611dc1565b926003611ccb60048301548096611c77565b91015490611c77565b9260081c1691620f4240838103908111610d6857611cfb92611cf591611c84565b92611c84565b1090565b15611d0657565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15611d6757565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b60018060a01b036101915416602061019254602460405180948193631d2e63a360e21b835260048301525afa9081156119a2575f91611dfe575090565b90506020813d602011611e25575b81611e1960209383611b69565b810103126101c1575190565b3d9150611e0c565b91908201809211610d6857565b5f5261015f60205260405f206002611e69611e5e6004840154600585015490611e2d565b600384015490611e2d565b910154111590565b611e7a81611b15565b6101609060ff80198354169116179055565b90600182811c92168015611eba575b6020831014611ea657565b634e487b7160e01b5f52602260045260245ffd5b91607f1691611e9b565b6001600160401b038111610d375760051b60200190565b908154611ee781611ec4565b90604093611ef86040519384611b69565b81835282946020809401915f52835f20905f925b848410611f1b57505050505050565b858251611f2781611b33565b84546001600160a01b0316815260018581015483830152845160028701805491925f929091611f5582611e8c565b80865291838116908115611fd05750600114611f95575b5050509181611f8360019693600396950382611b69565b86820152815201930193019291611f0c565b909192505f52845f20915f925b828410611fbb575050508101830181611f836001611f6c565b80548585018801528c96909301928101611fa2565b60ff1916868901525050151560051b830185019150829050611f836001611f6c565b9190611fff813385612343565b156121b457825f5261015f60205260405f2060068101335f528060205260ff60405f20541690600491828110156121615760028103612174575082820180545f1981019190821161210257555b81841015928361216157600285036121155782018054906001820180921161210257555b335f5260205260405f20916120ef575060ff1981541660ff831617905561209a6040518092611ba5565b60016020820152827fb83d25c6a5d258561330739951487acb4bd09ba5190b5d32c4f261817d90679260403393a3806120e0575b6120d55750565b6120de906125cb565b565b506120ea81612560565b6120ce565b602190634e487b7160e01b5f525260245ffd5b601184634e487b7160e01b5f525260245ffd5b5f93506003850361213757600501805490600182018092116121025755612070565b5f935060018514612149575b50612070565b6003018054906001820180921161210257555f612143565b602183634e487b7160e01b5f525260245ffd5b6003810361219557506005830180545f19810191908211612102575561204c565b60010361204c576003830180545f19810191908211612102575561204c565b604051631c2d2c9560e21b8152600481018490523360248201526064916121df906044830190611ba5565bfd5b5f5261015f60205260405f2063ffffffff600182015460081c16620f424090808203918211610d6857600561221e611cfb93600486015490611c84565b93015490611c84565b908160209103126101c1575180151581036101c15790565b908060209392818452848401375f828201840152601f01601f1916010190565b929160018060a01b03809416938060405193637ef7c88360e11b85521691826004850152169182602482015260208160a4817f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f59788604483015260806064830152806084830152805f848401375f828201840152601f01601f19168101030181885afa9081156119a2575f91612324575b50156122fc5750505050565b6084945060405193630cb6f8ed60e21b85526004850152602484015260448301526064820152fd5b61233d915060203d60201161199b5761198d8183611b69565b5f6122f0565b5f5261015f60205260405f20916123598361250f565b156123d8576004811015611b1f57156123d257612375816123df565b156123d2576001600160a01b03165f90815260068201602052604090205460ff166004811015611b1f57151590816123b6575b506123b257600190565b5f90565b600101546002915060ff166123ca81611b15565b14155f6123a8565b50505f90565b5050505f90565b610191546101925460405163680cabbd60e11b81526001600160a01b03938416600482015260248101919091529160209183916044918391165afa9081156119a2575f9161242b575090565b612444915060203d60201161199b5761198d8183611b69565b90565b6001600160401b039081811161245b571690565b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608490fd5b156124b657565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61251842612447565b906001810154916001600160401b038091169081818560281c1611159384612551575b50505081612547575090565b60ff915054161590565b60681c161191505f808061253b565b805f5261015f60205260405f2060ff8154166123d25761257f8161250f565b156125c15760ff6001809201541661259681611b15565b036125bc576125a481611c97565b156125bc576125b290611e3a565b156123b257600190565b505f90565b506125a4816121e1565b805f52602061015f81526040805f2090600160ff198354161782555f61263060018060a01b0360c95416612606600760088701549601611edb565b8385518097819582946331c6fcc960e21b84528c6004850152606060248501526064840190611bf8565b90604483015203925af180156127485761266e575b5050507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f5f80a2565b3d805f843e61267d8184611b69565b82019181818403126101c15780516001600160401b03918282116101c157019280601f850112156101c15783519185806126b685611ec4565b6126c287519182611b69565b858152019360051b860101948286116101c157868101935b8685106126eb575050505050612645565b84518381116101c15782019084603f830112156101c157888201519061271082611b8a565b61271c89519182611b69565b828152868984860101116101c15761273d8b949385948b8685019101611bb2565b8152019401936126da565b50513d5f823e3d90fd5b803b15612786575f8051602061287b83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b9192901561284357508151156127f5575090565b3b156127fe5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156128565750805190602001fd5b60405162461bcd60e51b8152602060048201529081906106fc906024830190611bd356fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220aa3dd779b5263e534b9eb6246d7a3b08d46e2a45958e315908e9761240078db464736f6c63430008170033",
  "gas": "3296853",
  "from": "0xaF7E68bCb2Fc7295492A00177f14F59B92814e70",
  "transactionSettings": {
    "chainId": 421614,
    "nonce": "18",
    "baseFee": "1000000000",
    "priorityFee": "100000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ploparb",
  "artifact": {
    "abi": [
      { "type": "constructor", "inputs": [], "stateMutability": "nonpayable" },
      {
        "type": "function",
        "name": "implementation",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "prepareInstallation",
        "inputs": [
          { "name": "_dao", "type": "address", "internalType": "address" },
          { "name": "_data", "type": "bytes", "internalType": "bytes" }
        ],
        "outputs": [
          { "name": "plugin", "type": "address", "internalType": "address" },
          {
            "name": "preparedSetupData",
            "type": "tuple",
            "internalType": "struct IPluginSetup.PreparedSetupData",
            "components": [
              {
                "name": "helpers",
                "type": "address[]",
                "internalType": "address[]"
              },
              {
                "name": "permissions",
                "type": "tuple[]",
                "internalType": "struct PermissionLib.MultiTargetPermission[]",
                "components": [
                  {
                    "name": "operation",
                    "type": "uint8",
                    "internalType": "enum PermissionLib.Operation"
                  },
                  {
                    "name": "where",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "who",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "condition",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "permissionId",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  }
                ]
              }
            ]
          }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "prepareUninstallation",
        "inputs": [
          { "name": "_dao", "type": "address", "internalType": "address" },
          {
            "name": "_payload",
            "type": "tuple",
            "internalType": "struct IPluginSetup.SetupPayload",
            "components": [
              {
                "name": "plugin",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "currentHelpers",
                "type": "address[]",
                "internalType": "address[]"
              },
              { "name": "data", "type": "bytes", "internalType": "bytes" }
            ]
          }
        ],
        "outputs": [
          {
            "name": "permissions",
            "type": "tuple[]",
            "internalType": "struct PermissionLib.MultiTargetPermission[]",
            "components": [
              {
                "name": "operation",
                "type": "uint8",
                "internalType": "enum PermissionLib.Operation"
              },
              { "name": "where", "type": "address", "internalType": "address" },
              { "name": "who", "type": "address", "internalType": "address" },
              {
                "name": "condition",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "permissionId",
                "type": "bytes32",
                "internalType": "bytes32"
              }
            ]
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "prepareUpdate",
        "inputs": [
          { "name": "_dao", "type": "address", "internalType": "address" },
          { "name": "_fromBuild", "type": "uint16", "internalType": "uint16" },
          {
            "name": "_payload",
            "type": "tuple",
            "internalType": "struct IPluginSetup.SetupPayload",
            "components": [
              {
                "name": "plugin",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "currentHelpers",
                "type": "address[]",
                "internalType": "address[]"
              },
              { "name": "data", "type": "bytes", "internalType": "bytes" }
            ]
          }
        ],
        "outputs": [
          { "name": "initData", "type": "bytes", "internalType": "bytes" },
          {
            "name": "preparedSetupData",
            "type": "tuple",
            "internalType": "struct IPluginSetup.PreparedSetupData",
            "components": [
              {
                "name": "helpers",
                "type": "address[]",
                "internalType": "address[]"
              },
              {
                "name": "permissions",
                "type": "tuple[]",
                "internalType": "struct PermissionLib.MultiTargetPermission[]",
                "components": [
                  {
                    "name": "operation",
                    "type": "uint8",
                    "internalType": "enum PermissionLib.Operation"
                  },
                  {
                    "name": "where",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "who",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "condition",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "permissionId",
                    "type": "bytes32",
                    "internalType": "bytes32"
                  }
                ]
              }
            ]
          }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "protocolVersion",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "uint8[3]", "internalType": "uint8[3]" }
        ],
        "stateMutability": "pure"
      },
      {
        "type": "function",
        "name": "supportsInterface",
        "inputs": [
          { "name": "_interfaceId", "type": "bytes4", "internalType": "bytes4" }
        ],
        "outputs": [{ "name": "", "type": "bool", "internalType": "bool" }],
        "stateMutability": "view"
      },
      {
        "type": "error",
        "name": "InvalidUpdatePath",
        "inputs": [
          { "name": "fromBuild", "type": "uint16", "internalType": "uint16" },
          { "name": "thisBuild", "type": "uint16", "internalType": "uint16" }
        ]
      }
    ],
    "bytecode": "0x60a08060405234610084576129af8181016001600160401b0381118382101761007057829161104d833903905ff08015610065576001600160a01b0316608052604051610fc4908161008982396080518181816101ff015281816105a201526107da0152f35b6040513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b5f80fdfe60806040908082526004908136101562000017575f80fd5b5f3560e01c90816301ffc9a714620008c1575080632ae9c60014620008095780635c60da1b14620007c45780639cb0a124146200052a578063a8a9c29e14620004725763f10832f11462000069575f80fd5b34620003e25781600319360112620003e2576200008562000931565b9060249182359367ffffffffffffffff808611620003e25736602387011215620003e25785840135818111620003e2578601923686850111620003e25786620000cd62000b60565b940360e08112620003e25760a013620003e257825195620000ee8762000a3f565b808801356003811015620003e25787526200010c6044890162000b8b565b602098898901918252620001236064820162000b8b565b93868a019485526084820135908682168203620003e25760608b0191825260808b019060a4840135825260c48401359260018060a01b0397888516809503620003e2578e96898b948d519963a6beced760e01b908b0152169e8f8a8a0152516200018d8162000948565b6044890152519063ffffffff809216606489015251166084870152511660a48501525160c484015260e483015260e4610104910135818301528152610140808201928284108685111762000460578387526103f19081840192830196858810908811176200044e575062000b9e8439837f000000000000000000000000000000000000000000000000000000000000000016809552856101608201528151806101808301528a5f5b8281106200043757505090815f6101a06060959484010152601f8019910116010301905ff08015620003ee5716946200026d62000a93565b918351631befc40560e01b815288818881855afa9081156200042d57908992915f91620003f8575b50855190620002a48262000a3f565b5f8252898483015284878301525f60608301526080820152620002c78562000b1c565b52620002d38462000b1c565b5084516364e25fe560e11b815296879182905afa8015620003ee575f90620003b4575b620003b095508351906200030a8262000a3f565b5f8252878983015282858301525f606083015260808201526200032d8362000b3e565b52620003398262000b3e565b50825190620003488262000a3f565b5f82528782015285838201525f60608201527fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d60808201526200038b8262000b4f565b52620003978162000b4f565b50858301528080519586958652850152830190620009b1565b0390f35b508685813d8311620003e6575b620003cd818362000a70565b81010312620003e257620003b09451620002f6565b5f80fd5b503d620003c1565b83513d5f823e3d90fd5b83819492503d831162000425575b62000412818362000a70565b81010312620003e2578891515f62000295565b503d62000406565b85513d5f823e3d90fd5b8181860101516101a08286010152018b9062000235565b634e487b7160e01b5f90815260418b52fd5b634e487b7160e01b5f90815260418a52fd5b8234620003e25760606003198181360112620003e2576200049262000931565b5060243561ffff811603620003e2576044359067ffffffffffffffff8211620003e257829136030112620003e25790620004cb62000b60565b918151928391838352805180948401525f935b80851062000510575f818501830152601f01601f1916830183810382016020850152929350620003b0920190620009b1565b6080850151868601830152602090940193859350620004de565b509034620003e2576003198181360112620003e2576200054962000931565b916024359167ffffffffffffffff8311620003e2576060908386019336030112620003e2576200057862000a93565b91620005848162000b07565b8251631befc40560e01b8152909560209591926001600160a01b03927f000000000000000000000000000000000000000000000000000000000000000084169088868581855afa958615620007ba575f9662000785575b5084875191620005eb8362000a3f565b8160019c60018552168b840152169586888301525f60608301526080820152620006158862000b1c565b52620006218762000b1c565b50876200062e8362000b07565b918751948580926364e25fe560e11b82525afa80156200077b575f9062000745575b620006a19350848799979a989a51926200066a8462000a3f565b60018452168783015285898301525f606083015260808201526200068e8962000b3e565b526200069a8862000b3e565b5062000b07565b855192620006af8462000a3f565b600184528484015216848201525f60608201527fbf04b4486c9663d805744005c3da000eda93de6e3308a4a7a812eb565327b78d6080820152620006f38562000b4f565b52620006ff8462000b4f565b508251928180850191818652865180935285019501915f5b828110620007255785870386f35b9091929382620007388298875162000967565b9795019392910162000717565b508783813d831162000773575b6200075e818362000a70565b81010312620003e257620006a1925162000650565b503d62000752565b86513d5f823e3d90fd5b9095508881813d8311620007b2575b620007a0818362000a70565b81010312620003e25751945f620005db565b503d62000794565b87513d5f823e3d90fd5b8234620003e2575f366003190112620003e257517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b509034620003e2575f366003190112620003e257805167ffffffffffffffff91906060810183811182821017620008ae57825260609036903780519160608301908111838210176200089b5781939293526001906001845260209260208501525f8185015251918293905f945b600386106200088457606085f35b825160ff1681529483019491810191810162000876565b604184634e487b7160e01b5f525260245ffd5b604185634e487b7160e01b5f525260245ffd5b8234620003e2576020366003190112620003e257359063ffffffff60e01b8216809203620003e25760209163099718b560e41b811490811562000920575b81156200090e575b5015158152f35b6301ffc9a760e01b1490508362000907565b621574e360e91b81149150620008ff565b600435906001600160a01b0382168203620003e257565b600311156200095357565b634e487b7160e01b5f52602160045260245ffd5b90608060a09280516200097a8162000948565b83526020810151600180861b0380911660208501528060408301511660408501526060820151166060840152015160808201520190565b6040820181519160408452825180925260608401916020809401905f5b81811062000a215750505082015192828183039101528180845192838152019301915f5b82811062000a01575050505090565b909192938262000a15600192875162000967565b950193929101620009f2565b82516001600160a01b031685529385019391850191600101620009ce565b60a0810190811067ffffffffffffffff82111762000a5c57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f8019910116810190811067ffffffffffffffff82111762000a5c57604052565b60408051916080916080840184811067ffffffffffffffff82111762000a5c576040526003845283925f5b60608082101562000afe5783516020929162000ada8262000a3f565b5f82525f8491818385015281888501528301525f8583015282890101520162000abe565b50505050909150565b356001600160a01b0381168103620003e25790565b80511562000b2a5760200190565b634e487b7160e01b5f52603260045260245ffd5b80516001101562000b2a5760400190565b80516002101562000b2a5760600190565b604051906040820182811067ffffffffffffffff82111762000a5c5760405260606020838281520152565b359063ffffffff82168203620003e25756fe6040608081526103f18038038061001581610211565b928339810190828183031261020d5780516001600160a01b0381169081810361020d576020838101516001600160401b039491939185821161020d57019085601f8301121561020d5781519161007261006d84610236565b610211565b928084528584019786828401011161020d5787866100909301610251565b823b156101b3577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b031916821790557fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28051158015906101ac575b610109575b855160cb90816103268239f35b8551936060850190811185821017610198578652602784527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c83850152660819985a5b195960ca1b8487015251610184945f918291845af4903d1561018f573d61017561006d82610236565b9081525f81943d92013e610272565b505f808080806100fc565b60609250610272565b634e487b7160e01b5f52604160045260245ffd5b505f6100f7565b865162461bcd60e51b815260048101859052602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b5f80fd5b6040519190601f01601f191682016001600160401b0381118382101761019857604052565b6001600160401b03811161019857601f01601f191660200190565b5f5b8381106102625750505f910152565b8181015183820152602001610253565b919290156102d45750815115610286575090565b3b1561028f5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156102e75750805190602001fd5b6044604051809262461bcd60e51b8252602060048301526103178151809281602486015260208686019101610251565b601f01601f19168101030190fdfe608060405236156051577f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545f9081906001600160a01b0316368280378136915af43d5f803e15604d573d5ff35b3d5ffd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc545f9081906001600160a01b0316368280378136915af43d5f803e15604d573d5ff3fea26469706673582212208baf8b022bd8aba0b284875ce9012fcc1c152e2b4d32d3ec6fcaff62ca34faef64736f6c63430008170033a2646970667358221220f6f666ee4de8561eb61fef5c2e9a379351fc88565171541ae60ea46f4a865d8764736f6c6343000817003360a080604052346100da57306080525f549060ff8260081c16610088575060ff8082160361004e575b6040516128d090816100df823960805181818161103901528181611181015261145c0152f35b60ff90811916175f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160ff8152a15f610028565b62461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b6064820152608490fd5b5f80fdfe6080806040526004361015610012575f80fd5b5f3560e01c90816301ffc9a714611a1b5750806304aa0937146119f2578063054fd2c2146119cb5780630de21856146119ad5780630dfb278e1461171957806317d1b404146116e45780631befc405146116aa57806323d07188146116805780632ae9c600146116115780633659cfe6146114375780634162169f1461140f57806341de6830146113f55780634f1ef2861461110757806351f91066146110e957806352d1902d14611027578063536f9f421461100c5780635671576114610fe25780635c60da1b14610fae5780637c36e8e814610f875780638a4b00f814610f69578063970601d814610f175780639cba3021146107b4578063a230c52414610791578063a6beced714610470578063c7f758a8146102b6578063c9c4bfca1461027c578063cc63604a1461025e578063ce6366c414610229578063cf13114914610201578063da35c664146101e3578063f60046b2146101c55763fe0d94c11461017c575f80fd5b346101c15760203660031901126101c15760043561019981612560565b156101a9576101a7906125cb565b005b60249060405190639fefd0f160e01b82526004820152fd5b5f80fd5b346101c1575f3660031901126101c157602061016154604051908152f35b346101c1575f3660031901126101c157602061012d54604051908152f35b346101c15760203660031901126101c157602061021f6004356121e1565b6040519015158152f35b346101c15760603660031901126101c15760243560048110156101c15760443580151581036101c1576101a791600435611ff2565b346101c15760203660031901126101c157602061021f600435612560565b346101c1575f3660031901126101c15760206040517f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f58152f35b346101c15760203660031901126101c1575f60a06040516102d681611b4e565b82815282602082015282604082015282606082015282608082015201525f6040805161030181611b33565b82815282602082015201526004355f5261015f60205260405f206103248161250f565b60ff825416916104656040519161033a83611b4e565b6001600160401b03600182015460ff811661035481611b15565b855263ffffffff8160081c166020860152818160281c166040860152818160681c16606086015260a81c166080840152600281015460a08401526040805161039b81611b33565b600383015481526004830154602082015260058301548282015260a060086103c560078601611edb565b940154958351988998151589521515602089015280516103e481611b15565b8489015263ffffffff60208201511660608901526001600160401b03848201511660808901526001600160401b03606082015116828901526001600160401b0360808201511660c0890152015160e08701528051610100870152602081015161012087015201516101408501526101a06101608501526101a0840190611bf8565b906101808301520390f35b346101c1576101003660031901126101c1576001600160a01b03600435818116908190036101c15760a03660231901126101c15760c4359182168092036101c1575f549160ff8360081c161592838094610784575b801561076d575b156107115760ff1981166001175f5583610700575b5061050460ff5f5460081c166104f6816124af565b6104ff816124af565b6124af565b6bffffffffffffffffffffffff60a01b918260c954161760c95560443563ffffffff908181168082036101c157620f423f81116106d557606435928316908184036101c157620f42408083116106b75750608435916001600160401b038316908184036101c157610e1080831061069957506301e1338080831161069957506024359360038510156101c1577fa8a18d06ddd19f24a872740e3d364c86f62be25f7154525dda18ef07fda46f3e966105e060a0976105c188611e71565b6101609064ffffffff0082549160081b169064ffffffff001916179055565b6101609168ffffffff000000000067ffffffffffffffff60481b84549260481b169260281b169070ffffffffffffffffffffffff000000000019161717905560a4359283610161556040519461063581611b15565b85526020850152604084015260608301526080820152a16101919182541617905560e4356101925561066357005b61ff00195f54165f557f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498602060405160018152a1005b604490836040519163628819f760e11b835260048301526024820152fd5b604490836040519163cc80c19560e01b835260048301526024820152fd5b60405163cc80c19560e01b8152620f423f600482015263ffffffff83166024820152604490fd5b0390fd5b61ffff1916610101175f55836104e1565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b50303b1580156104cc5750600160ff8216146104cc565b50600160ff8216106104c5565b346101c15760203660031901126101c157602061021f6107af611aff565b6123df565b346101c15760e03660031901126101c1576001600160401b03600435116101c1573660236004350112156101c1576001600160401b0360043560040135116101c157366024600435600401356004350101116101c1576001600160401b03602435116101c1573660236024350112156101c1576001600160401b0360243560040135116101c15736602480356004013560051b81350101116101c1576001600160401b0360643516606435036101c1576001600160401b0360843516608435036101c157600460a43510156101c15760c435151560c435036101c15761016154151580610f07575b610eef575f196108ab43612447565b016108b542612447565b6064356001600160401b0316610e9d575b6001600160401b036101605460481c166001600160401b03818184160111610d68576084356001600160401b0316610e3f576001600160401b03821601915b61012d54916001830161012d556040516001600160401b03821681526001600160401b038516602082015260a060408201528361095160a083016004356004013560246004350161223f565b9180830360608201526024356004013583526020830160206024356004013560051b850101936024803501915f5b602435600401358110610d9a57505050507fa6c1f8f4276dc3f243459e13b557c84e8f4e90b2e09070bad5f6909cee687c929060443560808201528033940390a3825f5261015f60205260405f209360018501926cffffffffffffffff000000000084549360281b16916001600160401b0360681b9060681b16906001600160401b0360a81b9060a81b1690818364ffffffffff62ffffff60e81b01861617821717855560ff610160541692610a3484611b15565b64ffffffff01600160e81b03198516811782178317841786556101605464ffffffff00166001600160e81b031990951617171717179055610a73611dc1565b63ffffffff6101605460281c16620f424091828211610d7c5790610a9691611c84565b908082049106610d58575b6002830155604435610d4b575b5f5b602435600401358110610ae45760208260a435610ad0575b604051908152f35b610adf60c43560a43583611ff2565b610ac8565b60248160051b81350101356082196024353603018112156101c157600784015468010000000000000000811015610d375760018101806007870155811015610d2357600785015f52600360205f2091020190602481813501013560018060a01b0381168091036101c15782546001600160a01b031916178255602435810160448101356001840155606481013591903603604219018212156101c1576001600160401b0360248383823501010135116101c15760248035820183019081013536036044909101136101c157610bbc6002840154611e8c565b601f8111610cd2575b505f90601f6024848382350101013511600114610c32579160029160019594935f9160248483823501010135610c1e575b505f19602480359092019093010135600381901b9290921c191690851b179101555b01610ab0565b602435820184010160440135915089610bf6565b90600284015f5260205f20905f5b60248035850186010135601f19168110610cb1575060019594936002938793602493843583018401850135601f19811610610c89575b5050823501010135811b01910155610c18565b843583018401908101604401355f199186013560031b60f8169190911c191690558a80610c76565b90916020600181926044868989602435010101013581550193019101610c40565b600284015f9081526020908190209060248035850186010135601f810160051c83019111610d1c575b601f830160051c82018110610d11575050610bc5565b5f8155600101610cfb565b5080610cfb565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52604160045260245ffd5b6044356008830155610aae565b5f198114610d6857600101610aa1565b634e487b7160e01b5f52601160045260245ffd5b604483836040519163cc80c19560e01b835260048301526024820152fd5b919394509194601f1984820301835285356082196024353603018112156101c15760243501602481013560018060a01b0381168091036101c1578252604481013560208301526064810135604219823603018112156101c15701604460248201359101906001600160401b0381116101c15780360382136101c157610e2f60209283926060868160406001990152019161223f565b970193019101908894939161097f565b91608435926001600160401b038181851601166001600160401b036084351610610e695750610905565b604051631332703d60e21b81526001600160401b039384169190910183166004820152608435909216602483015250604490fd5b606435906001600160401b0381166001600160401b036064351610610ec257506108c6565b604051631332703d60e21b81526001600160401b0391821660048201526064359091166024820152604490fd5b604051633aae64d160e21b8152336004820152602490fd5b50610f11336123df565b1561089c565b346101c15760403660031901126101c157610f30611ae9565b6004355f5261015f602052600660405f20019060018060a01b03165f52602052602060ff60405f205416610f676040518092611ba5565bf35b346101c15760203660031901126101c157602061021f600435611e3a565b346101c1575f3660031901126101c157602063ffffffff6101605460081c16604051908152f35b346101c1575f3660031901126101c1575f8051602061287b833981519152546040516001600160a01b039091168152602090f35b346101c1575f3660031901126101c15760206001600160401b036101605460481c16604051908152f35b346101c15760203660031901126101c1576020610ac8611dc1565b346101c1575f3660031901126101c1577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316300361107e5760206040515f8051602061287b8339815191528152f35b60405162461bcd60e51b815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c00000000000000006064820152608490fd5b346101c1575f3660031901126101c157602061019254604051908152f35b60403660031901126101c15761111b611aff565b602435906001600160401b0382116101c157366023830112156101c157816004013561114681611b8a565b6111536040519182611b69565b8181526020918282019436602483830101116101c157815f9260248693018837830101526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116906111af30831415611cff565b6111cb5f8051602061287b833981519152928284541614611d60565b6111de8160c9541636903390309061225f565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff161561121657505050506101a79150612752565b8492939416906040516352d1902d60e01b81528581600481865afa5f91816113c6575b5061129a5760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9493940361136f576112ab82612752565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a2825115801590611367575b6112e057005b5f806101a795604051956112f387611b33565b602787527f416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c86880152660819985a5b195960ca1b60408801525190845af4903d1561135e573d61134281611b8a565b906113506040519283611b69565b81525f81943d92013e6127e1565b606092506127e1565b5060016112da565b60405162461bcd60e51b815260048101849052602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f786044820152681a58589b195555525160ba1b6064820152608490fd5b9091508681813d83116113ee575b6113de8183611b69565b810103126101c157519088611239565b503d6113d4565b346101c1575f3660031901126101c15760206040515f8152f35b346101c1575f3660031901126101c15760c9546040516001600160a01b039091168152602090f35b346101c1576020806003193601126101c157611451611aff565b6001600160a01b03917f0000000000000000000000000000000000000000000000000000000000000000831661148930821415611cff565b6114a55f8051602061287b833981519152918583541614611d60565b6114b88460c9541636903390309061225f565b60405190828201948286106001600160401b03871117610d3757856040525f835260ff7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914354165f1461151257505050506101a79150612752565b8492939416906040516352d1902d60e01b81528581600481865afa5f91816115e2575b506115965760405162461bcd60e51b815260048101879052602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201526d6f6e206973206e6f74205555505360901b6064820152608490fd5b9493940361136f576115a782612752565b7fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b5f80a28251158015906115db576112e057005b505f6112da565b9091508681813d831161160a575b6115fa8183611b69565b810103126101c157519088611535565b503d6115f0565b346101c1575f3660031901126101c157606060405161162f81611b33565b36903760405161163e81611b33565b6001808252602090600460208401525f6040840152604051918293905f945b6003861061166a57606085f35b825160ff1681529483019491810191810161165d565b346101c1575f3660031901126101c157602060ff6101605416604051906116a681611b15565b8152f35b346101c1575f3660031901126101c15760206040517fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe58152f35b346101c15760603660031901126101c1576116fd611ae9565b6044359060048210156101c15760209161021f91600435612343565b346101c15760a03660031901126101c15760018060a01b0360c95416604051637ef7c88360e11b815230600482015260249133838301527fbba35d41610b7d25c8e486006535c76bd423091563e694d206ae3d71ce949fe5604492818482015260806064820152366084820152365f60a48301375f60a4368301015260208160a481601f19601f3601168101030181865afa9081156119a2575f91611973575b501561194b57505081359063ffffffff92838316908184036101c157620f423f82116119245782359485168086036101c157620f42408082116119095750606435936001600160401b038516928386036101c157610e108085106118ee57506301e13380908185116118d4575050506004359360038510156101c1577fa8a18d06ddd19f24a872740e3d364c86f62be25f7154525dda18ef07fda46f3e9661186660a0976105c188611e71565b6101609168ffffffff000000000067ffffffffffffffff60481b84549260481b169260281b169070ffffffffffffffffffffffff0000000000191617179055608435928361016155604051946118bb81611b15565b85526020850152604084015260608301526080820152a1005b84906040519263628819f760e11b84526004840152820152fd5b9084906040519263628819f760e11b84526004840152820152fd5b9250906040519263cc80c19560e01b84526004840152820152fd5b60405163cc80c19560e01b8152620f423f600482015263ffffffff85166024820152604490fd5b6084928460405193630cb6f8ed60e21b85526004850152309084015233908301526064820152fd5b611995915060203d60201161199b575b61198d8183611b69565b810190612227565b856117b9565b503d611983565b6040513d5f823e3d90fd5b346101c15760203660031901126101c157602061021f600435611c97565b346101c1575f3660031901126101c157602063ffffffff6101605460281c16604051908152f35b346101c1575f3660031901126101c157610191546040516001600160a01b039091168152602090f35b346101c15760203660031901126101c1576004359063ffffffff60e01b82168092036101c15760209163433c580f60e11b8114908115611ad8575b8115611a64575b5015158152f35b63368d719960e21b811491508115611a7e575b5083611a5d565b63041de68360e41b811491508115611ac8575b8115611ab7575b8115611aa6575b5083611a77565b6301ffc9a760e01b14905083611a9f565b6352d1902d60e01b81149150611a98565b621574e360e91b81149150611a91565b63268c8a2f60e11b81149150611a56565b602435906001600160a01b03821682036101c157565b600435906001600160a01b03821682036101c157565b60031115611b1f57565b634e487b7160e01b5f52602160045260245ffd5b606081019081106001600160401b03821117610d3757604052565b60c081019081106001600160401b03821117610d3757604052565b90601f801991011681019081106001600160401b03821117610d3757604052565b6001600160401b038111610d3757601f01601f191660200190565b906004821015611b1f5752565b5f5b838110611bc35750505f910152565b8181015183820152602001611bb4565b90602091611bec81518092818552858086019101611bb2565b601f01601f1916010190565b908082519081815260208091019281808460051b8301019501935f915b848310611c255750505050505090565b9091929394958480611c67600193601f198682030187528a5190606090868060a01b038351168152848301518582015281604080940151938201520190611bd3565b9801930193019194939290611c15565b91908203918211610d6857565b81810292918115918404141715610d6857565b5f5261015f60205260405f2060018101549063ffffffff611cd4611cb9611dc1565b926003611ccb60048301548096611c77565b91015490611c77565b9260081c1691620f4240838103908111610d6857611cfb92611cf591611c84565b92611c84565b1090565b15611d0657565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b19195b1959d85d1958d85b1b60a21b6064820152608490fd5b15611d6757565b60405162461bcd60e51b815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201526b6163746976652070726f787960a01b6064820152608490fd5b60018060a01b036101915416602061019254602460405180948193631d2e63a360e21b835260048301525afa9081156119a2575f91611dfe575090565b90506020813d602011611e25575b81611e1960209383611b69565b810103126101c1575190565b3d9150611e0c565b91908201809211610d6857565b5f5261015f60205260405f206002611e69611e5e6004840154600585015490611e2d565b600384015490611e2d565b910154111590565b611e7a81611b15565b6101609060ff80198354169116179055565b90600182811c92168015611eba575b6020831014611ea657565b634e487b7160e01b5f52602260045260245ffd5b91607f1691611e9b565b6001600160401b038111610d375760051b60200190565b908154611ee781611ec4565b90604093611ef86040519384611b69565b81835282946020809401915f52835f20905f925b848410611f1b57505050505050565b858251611f2781611b33565b84546001600160a01b0316815260018581015483830152845160028701805491925f929091611f5582611e8c565b80865291838116908115611fd05750600114611f95575b5050509181611f8360019693600396950382611b69565b86820152815201930193019291611f0c565b909192505f52845f20915f925b828410611fbb575050508101830181611f836001611f6c565b80548585018801528c96909301928101611fa2565b60ff1916868901525050151560051b830185019150829050611f836001611f6c565b9190611fff813385612343565b156121b457825f5261015f60205260405f2060068101335f528060205260ff60405f20541690600491828110156121615760028103612174575082820180545f1981019190821161210257555b81841015928361216157600285036121155782018054906001820180921161210257555b335f5260205260405f20916120ef575060ff1981541660ff831617905561209a6040518092611ba5565b60016020820152827fb83d25c6a5d258561330739951487acb4bd09ba5190b5d32c4f261817d90679260403393a3806120e0575b6120d55750565b6120de906125cb565b565b506120ea81612560565b6120ce565b602190634e487b7160e01b5f525260245ffd5b601184634e487b7160e01b5f525260245ffd5b5f93506003850361213757600501805490600182018092116121025755612070565b5f935060018514612149575b50612070565b6003018054906001820180921161210257555f612143565b602183634e487b7160e01b5f525260245ffd5b6003810361219557506005830180545f19810191908211612102575561204c565b60010361204c576003830180545f19810191908211612102575561204c565b604051631c2d2c9560e21b8152600481018490523360248201526064916121df906044830190611ba5565bfd5b5f5261015f60205260405f2063ffffffff600182015460081c16620f424090808203918211610d6857600561221e611cfb93600486015490611c84565b93015490611c84565b908160209103126101c1575180151581036101c15790565b908060209392818452848401375f828201840152601f01601f1916010190565b929160018060a01b03809416938060405193637ef7c88360e11b85521691826004850152169182602482015260208160a4817f821b6e3a557148015a918c89e5d092e878a69854a2d1a410635f771bd5a8a3f59788604483015260806064830152806084830152805f848401375f828201840152601f01601f19168101030181885afa9081156119a2575f91612324575b50156122fc5750505050565b6084945060405193630cb6f8ed60e21b85526004850152602484015260448301526064820152fd5b61233d915060203d60201161199b5761198d8183611b69565b5f6122f0565b5f5261015f60205260405f20916123598361250f565b156123d8576004811015611b1f57156123d257612375816123df565b156123d2576001600160a01b03165f90815260068201602052604090205460ff166004811015611b1f57151590816123b6575b506123b257600190565b5f90565b600101546002915060ff166123ca81611b15565b14155f6123a8565b50505f90565b5050505f90565b610191546101925460405163680cabbd60e11b81526001600160a01b03938416600482015260248101919091529160209183916044918391165afa9081156119a2575f9161242b575090565b612444915060203d60201161199b5761198d8183611b69565b90565b6001600160401b039081811161245b571690565b60405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608490fd5b156124b657565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b61251842612447565b906001810154916001600160401b038091169081818560281c1611159384612551575b50505081612547575090565b60ff915054161590565b60681c161191505f808061253b565b805f5261015f60205260405f2060ff8154166123d25761257f8161250f565b156125c15760ff6001809201541661259681611b15565b036125bc576125a481611c97565b156125bc576125b290611e3a565b156123b257600190565b505f90565b506125a4816121e1565b805f52602061015f81526040805f2090600160ff198354161782555f61263060018060a01b0360c95416612606600760088701549601611edb565b8385518097819582946331c6fcc960e21b84528c6004850152606060248501526064840190611bf8565b90604483015203925af180156127485761266e575b5050507f712ae1383f79ac853f8d882153778e0260ef8f03b504e2866e0593e04d2b291f5f80a2565b3d805f843e61267d8184611b69565b82019181818403126101c15780516001600160401b03918282116101c157019280601f850112156101c15783519185806126b685611ec4565b6126c287519182611b69565b858152019360051b860101948286116101c157868101935b8685106126eb575050505050612645565b84518381116101c15782019084603f830112156101c157888201519061271082611b8a565b61271c89519182611b69565b828152868984860101116101c15761273d8b949385948b8685019101611bb2565b8152019401936126da565b50513d5f823e3d90fd5b803b15612786575f8051602061287b83398151915280546001600160a01b0319166001600160a01b03909216919091179055565b60405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b6064820152608490fd5b9192901561284357508151156127f5575090565b3b156127fe5790565b60405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606490fd5b8251909150156128565750805190602001fd5b60405162461bcd60e51b8152602060048201529081906106fc906024830190611bd356fe360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbca2646970667358221220aa3dd779b5263e534b9eb6246d7a3b08d46e2a45958e315908e9761240078db464736f6c63430008170033",
    "compiler": { "version": "v0.8.23+commit.f704f362" },
    "contractName": "src/TagVotingSetup.sol:TagVotingSetup",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/IERC1967Upgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967Upgradeable {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/interfaces/draft-IERC1822Upgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822ProxiableUpgradeable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/ERC1967/ERC1967UpgradeUpgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeaconUpgradeable.sol\";\nimport \"../../interfaces/IERC1967Upgradeable.sol\";\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../../utils/AddressUpgradeable.sol\";\nimport \"../../utils/StorageSlotUpgradeable.sol\";\nimport {Initializable} from \"../utils/Initializable.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967UpgradeUpgradeable is Initializable, IERC1967Upgradeable {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    function __ERC1967Upgrade_init() internal onlyInitializing {\n    }\n\n    function __ERC1967Upgrade_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(AddressUpgradeable.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlotUpgradeable.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlotUpgradeable.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822ProxiableUpgradeable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlotUpgradeable.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(AddressUpgradeable.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            AddressUpgradeable.isContract(IBeaconUpgradeable(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlotUpgradeable.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            AddressUpgradeable.functionDelegateCall(IBeaconUpgradeable(newBeacon).implementation(), data);\n        }\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/beacon/IBeaconUpgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeaconUpgradeable {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     * @custom:oz-retyped-from bool\n     */\n    uint8 private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint8 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\n     * constructor.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        bool isTopLevelCall = !_initializing;\n        require(\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\n            \"Initializable: contract is already initialized\"\n        );\n        _initialized = 1;\n        if (isTopLevelCall) {\n            _initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            _initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint8 version) {\n        require(!_initializing && _initialized < version, \"Initializable: contract is already initialized\");\n        _initialized = version;\n        _initializing = true;\n        _;\n        _initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        require(!_initializing, \"Initializable: contract is initializing\");\n        if (_initialized != type(uint8).max) {\n            _initialized = type(uint8).max;\n            emit Initialized(type(uint8).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint8) {\n        return _initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _initializing;\n    }\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/UUPSUpgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/UUPSUpgradeable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../interfaces/draft-IERC1822Upgradeable.sol\";\nimport \"../ERC1967/ERC1967UpgradeUpgradeable.sol\";\nimport {Initializable} from \"./Initializable.sol\";\n\n/**\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\n *\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\n * `UUPSUpgradeable` with a custom implementation of upgrades.\n *\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\n *\n * _Available since v4.1._\n */\nabstract contract UUPSUpgradeable is Initializable, IERC1822ProxiableUpgradeable, ERC1967UpgradeUpgradeable {\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\n    address private immutable __self = address(this);\n\n    /**\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\n     * fail.\n     */\n    modifier onlyProxy() {\n        require(address(this) != __self, \"Function must be called through delegatecall\");\n        require(_getImplementation() == __self, \"Function must be called through active proxy\");\n        _;\n    }\n\n    /**\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\n     * callable on the implementing contract but not through proxies.\n     */\n    modifier notDelegated() {\n        require(address(this) == __self, \"UUPSUpgradeable: must not be called through delegatecall\");\n        _;\n    }\n\n    function __UUPSUpgradeable_init() internal onlyInitializing {\n    }\n\n    function __UUPSUpgradeable_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\n     */\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\n        return _IMPLEMENTATION_SLOT;\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeTo(address newImplementation) public virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\n    }\n\n    /**\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\n     * encoded in `data`.\n     *\n     * Calls {_authorizeUpgrade}.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) public payable virtual onlyProxy {\n        _authorizeUpgrade(newImplementation);\n        _upgradeToAndCallUUPS(newImplementation, data, true);\n    }\n\n    /**\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\n     * {upgradeTo} and {upgradeToAndCall}.\n     *\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\n     *\n     * ```solidity\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\n     * ```\n     */\n    function _authorizeUpgrade(address newImplementation) internal virtual;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/CountersUpgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary CountersUpgradeable {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/StorageSlotUpgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlotUpgradeable {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/ERC165Upgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165Upgradeable.sol\";\nimport {Initializable} from \"../../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165Upgradeable is Initializable, IERC165Upgradeable {\n    function __ERC165_init() internal onlyInitializing {\n    }\n\n    function __ERC165_init_unchained() internal onlyInitializing {\n    }\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165Upgradeable).interfaceId;\n    }\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/introspection/IERC165Upgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165Upgradeable {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SafeCast.sol)\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\n * checks.\n *\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\n * easily result in undesired exploitation or bugs, since developers usually\n * assume that overflows raise errors. `SafeCast` restores this intuition by\n * reverting the transaction when such an operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n *\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\n * all math on `uint256` and `int256` and then downcasting.\n */\nlibrary SafeCastUpgradeable {\n    /**\n     * @dev Returns the downcasted uint248 from uint256, reverting on\n     * overflow (when the input is greater than largest uint248).\n     *\n     * Counterpart to Solidity's `uint248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint248(uint256 value) internal pure returns (uint248) {\n        require(value <= type(uint248).max, \"SafeCast: value doesn't fit in 248 bits\");\n        return uint248(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint240 from uint256, reverting on\n     * overflow (when the input is greater than largest uint240).\n     *\n     * Counterpart to Solidity's `uint240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint240(uint256 value) internal pure returns (uint240) {\n        require(value <= type(uint240).max, \"SafeCast: value doesn't fit in 240 bits\");\n        return uint240(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint232 from uint256, reverting on\n     * overflow (when the input is greater than largest uint232).\n     *\n     * Counterpart to Solidity's `uint232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint232(uint256 value) internal pure returns (uint232) {\n        require(value <= type(uint232).max, \"SafeCast: value doesn't fit in 232 bits\");\n        return uint232(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint224 from uint256, reverting on\n     * overflow (when the input is greater than largest uint224).\n     *\n     * Counterpart to Solidity's `uint224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint224(uint256 value) internal pure returns (uint224) {\n        require(value <= type(uint224).max, \"SafeCast: value doesn't fit in 224 bits\");\n        return uint224(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint216 from uint256, reverting on\n     * overflow (when the input is greater than largest uint216).\n     *\n     * Counterpart to Solidity's `uint216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint216(uint256 value) internal pure returns (uint216) {\n        require(value <= type(uint216).max, \"SafeCast: value doesn't fit in 216 bits\");\n        return uint216(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint208 from uint256, reverting on\n     * overflow (when the input is greater than largest uint208).\n     *\n     * Counterpart to Solidity's `uint208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint208(uint256 value) internal pure returns (uint208) {\n        require(value <= type(uint208).max, \"SafeCast: value doesn't fit in 208 bits\");\n        return uint208(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint200 from uint256, reverting on\n     * overflow (when the input is greater than largest uint200).\n     *\n     * Counterpart to Solidity's `uint200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint200(uint256 value) internal pure returns (uint200) {\n        require(value <= type(uint200).max, \"SafeCast: value doesn't fit in 200 bits\");\n        return uint200(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint192 from uint256, reverting on\n     * overflow (when the input is greater than largest uint192).\n     *\n     * Counterpart to Solidity's `uint192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint192(uint256 value) internal pure returns (uint192) {\n        require(value <= type(uint192).max, \"SafeCast: value doesn't fit in 192 bits\");\n        return uint192(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint184 from uint256, reverting on\n     * overflow (when the input is greater than largest uint184).\n     *\n     * Counterpart to Solidity's `uint184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint184(uint256 value) internal pure returns (uint184) {\n        require(value <= type(uint184).max, \"SafeCast: value doesn't fit in 184 bits\");\n        return uint184(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint176 from uint256, reverting on\n     * overflow (when the input is greater than largest uint176).\n     *\n     * Counterpart to Solidity's `uint176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint176(uint256 value) internal pure returns (uint176) {\n        require(value <= type(uint176).max, \"SafeCast: value doesn't fit in 176 bits\");\n        return uint176(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint168 from uint256, reverting on\n     * overflow (when the input is greater than largest uint168).\n     *\n     * Counterpart to Solidity's `uint168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint168(uint256 value) internal pure returns (uint168) {\n        require(value <= type(uint168).max, \"SafeCast: value doesn't fit in 168 bits\");\n        return uint168(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint160 from uint256, reverting on\n     * overflow (when the input is greater than largest uint160).\n     *\n     * Counterpart to Solidity's `uint160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint160(uint256 value) internal pure returns (uint160) {\n        require(value <= type(uint160).max, \"SafeCast: value doesn't fit in 160 bits\");\n        return uint160(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint152 from uint256, reverting on\n     * overflow (when the input is greater than largest uint152).\n     *\n     * Counterpart to Solidity's `uint152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint152(uint256 value) internal pure returns (uint152) {\n        require(value <= type(uint152).max, \"SafeCast: value doesn't fit in 152 bits\");\n        return uint152(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint144 from uint256, reverting on\n     * overflow (when the input is greater than largest uint144).\n     *\n     * Counterpart to Solidity's `uint144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint144(uint256 value) internal pure returns (uint144) {\n        require(value <= type(uint144).max, \"SafeCast: value doesn't fit in 144 bits\");\n        return uint144(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint136 from uint256, reverting on\n     * overflow (when the input is greater than largest uint136).\n     *\n     * Counterpart to Solidity's `uint136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint136(uint256 value) internal pure returns (uint136) {\n        require(value <= type(uint136).max, \"SafeCast: value doesn't fit in 136 bits\");\n        return uint136(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint128 from uint256, reverting on\n     * overflow (when the input is greater than largest uint128).\n     *\n     * Counterpart to Solidity's `uint128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint128(uint256 value) internal pure returns (uint128) {\n        require(value <= type(uint128).max, \"SafeCast: value doesn't fit in 128 bits\");\n        return uint128(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint120 from uint256, reverting on\n     * overflow (when the input is greater than largest uint120).\n     *\n     * Counterpart to Solidity's `uint120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint120(uint256 value) internal pure returns (uint120) {\n        require(value <= type(uint120).max, \"SafeCast: value doesn't fit in 120 bits\");\n        return uint120(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint112 from uint256, reverting on\n     * overflow (when the input is greater than largest uint112).\n     *\n     * Counterpart to Solidity's `uint112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint112(uint256 value) internal pure returns (uint112) {\n        require(value <= type(uint112).max, \"SafeCast: value doesn't fit in 112 bits\");\n        return uint112(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint104 from uint256, reverting on\n     * overflow (when the input is greater than largest uint104).\n     *\n     * Counterpart to Solidity's `uint104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint104(uint256 value) internal pure returns (uint104) {\n        require(value <= type(uint104).max, \"SafeCast: value doesn't fit in 104 bits\");\n        return uint104(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint96 from uint256, reverting on\n     * overflow (when the input is greater than largest uint96).\n     *\n     * Counterpart to Solidity's `uint96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.2._\n     */\n    function toUint96(uint256 value) internal pure returns (uint96) {\n        require(value <= type(uint96).max, \"SafeCast: value doesn't fit in 96 bits\");\n        return uint96(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint88 from uint256, reverting on\n     * overflow (when the input is greater than largest uint88).\n     *\n     * Counterpart to Solidity's `uint88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint88(uint256 value) internal pure returns (uint88) {\n        require(value <= type(uint88).max, \"SafeCast: value doesn't fit in 88 bits\");\n        return uint88(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint80 from uint256, reverting on\n     * overflow (when the input is greater than largest uint80).\n     *\n     * Counterpart to Solidity's `uint80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint80(uint256 value) internal pure returns (uint80) {\n        require(value <= type(uint80).max, \"SafeCast: value doesn't fit in 80 bits\");\n        return uint80(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint72 from uint256, reverting on\n     * overflow (when the input is greater than largest uint72).\n     *\n     * Counterpart to Solidity's `uint72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint72(uint256 value) internal pure returns (uint72) {\n        require(value <= type(uint72).max, \"SafeCast: value doesn't fit in 72 bits\");\n        return uint72(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint64 from uint256, reverting on\n     * overflow (when the input is greater than largest uint64).\n     *\n     * Counterpart to Solidity's `uint64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint64(uint256 value) internal pure returns (uint64) {\n        require(value <= type(uint64).max, \"SafeCast: value doesn't fit in 64 bits\");\n        return uint64(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint56 from uint256, reverting on\n     * overflow (when the input is greater than largest uint56).\n     *\n     * Counterpart to Solidity's `uint56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint56(uint256 value) internal pure returns (uint56) {\n        require(value <= type(uint56).max, \"SafeCast: value doesn't fit in 56 bits\");\n        return uint56(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint48 from uint256, reverting on\n     * overflow (when the input is greater than largest uint48).\n     *\n     * Counterpart to Solidity's `uint48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint48(uint256 value) internal pure returns (uint48) {\n        require(value <= type(uint48).max, \"SafeCast: value doesn't fit in 48 bits\");\n        return uint48(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint40 from uint256, reverting on\n     * overflow (when the input is greater than largest uint40).\n     *\n     * Counterpart to Solidity's `uint40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint40(uint256 value) internal pure returns (uint40) {\n        require(value <= type(uint40).max, \"SafeCast: value doesn't fit in 40 bits\");\n        return uint40(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint32 from uint256, reverting on\n     * overflow (when the input is greater than largest uint32).\n     *\n     * Counterpart to Solidity's `uint32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint32(uint256 value) internal pure returns (uint32) {\n        require(value <= type(uint32).max, \"SafeCast: value doesn't fit in 32 bits\");\n        return uint32(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint24 from uint256, reverting on\n     * overflow (when the input is greater than largest uint24).\n     *\n     * Counterpart to Solidity's `uint24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toUint24(uint256 value) internal pure returns (uint24) {\n        require(value <= type(uint24).max, \"SafeCast: value doesn't fit in 24 bits\");\n        return uint24(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint16 from uint256, reverting on\n     * overflow (when the input is greater than largest uint16).\n     *\n     * Counterpart to Solidity's `uint16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint16(uint256 value) internal pure returns (uint16) {\n        require(value <= type(uint16).max, \"SafeCast: value doesn't fit in 16 bits\");\n        return uint16(value);\n    }\n\n    /**\n     * @dev Returns the downcasted uint8 from uint256, reverting on\n     * overflow (when the input is greater than largest uint8).\n     *\n     * Counterpart to Solidity's `uint8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v2.5._\n     */\n    function toUint8(uint256 value) internal pure returns (uint8) {\n        require(value <= type(uint8).max, \"SafeCast: value doesn't fit in 8 bits\");\n        return uint8(value);\n    }\n\n    /**\n     * @dev Converts a signed int256 into an unsigned uint256.\n     *\n     * Requirements:\n     *\n     * - input must be greater than or equal to 0.\n     *\n     * _Available since v3.0._\n     */\n    function toUint256(int256 value) internal pure returns (uint256) {\n        require(value >= 0, \"SafeCast: value must be positive\");\n        return uint256(value);\n    }\n\n    /**\n     * @dev Returns the downcasted int248 from int256, reverting on\n     * overflow (when the input is less than smallest int248 or\n     * greater than largest int248).\n     *\n     * Counterpart to Solidity's `int248` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 248 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\n        downcasted = int248(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 248 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int240 from int256, reverting on\n     * overflow (when the input is less than smallest int240 or\n     * greater than largest int240).\n     *\n     * Counterpart to Solidity's `int240` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 240 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\n        downcasted = int240(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 240 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int232 from int256, reverting on\n     * overflow (when the input is less than smallest int232 or\n     * greater than largest int232).\n     *\n     * Counterpart to Solidity's `int232` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 232 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\n        downcasted = int232(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 232 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int224 from int256, reverting on\n     * overflow (when the input is less than smallest int224 or\n     * greater than largest int224).\n     *\n     * Counterpart to Solidity's `int224` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 224 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\n        downcasted = int224(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 224 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int216 from int256, reverting on\n     * overflow (when the input is less than smallest int216 or\n     * greater than largest int216).\n     *\n     * Counterpart to Solidity's `int216` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 216 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\n        downcasted = int216(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 216 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int208 from int256, reverting on\n     * overflow (when the input is less than smallest int208 or\n     * greater than largest int208).\n     *\n     * Counterpart to Solidity's `int208` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 208 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\n        downcasted = int208(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 208 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int200 from int256, reverting on\n     * overflow (when the input is less than smallest int200 or\n     * greater than largest int200).\n     *\n     * Counterpart to Solidity's `int200` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 200 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\n        downcasted = int200(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 200 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int192 from int256, reverting on\n     * overflow (when the input is less than smallest int192 or\n     * greater than largest int192).\n     *\n     * Counterpart to Solidity's `int192` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 192 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\n        downcasted = int192(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 192 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int184 from int256, reverting on\n     * overflow (when the input is less than smallest int184 or\n     * greater than largest int184).\n     *\n     * Counterpart to Solidity's `int184` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 184 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\n        downcasted = int184(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 184 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int176 from int256, reverting on\n     * overflow (when the input is less than smallest int176 or\n     * greater than largest int176).\n     *\n     * Counterpart to Solidity's `int176` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 176 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\n        downcasted = int176(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 176 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int168 from int256, reverting on\n     * overflow (when the input is less than smallest int168 or\n     * greater than largest int168).\n     *\n     * Counterpart to Solidity's `int168` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 168 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\n        downcasted = int168(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 168 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int160 from int256, reverting on\n     * overflow (when the input is less than smallest int160 or\n     * greater than largest int160).\n     *\n     * Counterpart to Solidity's `int160` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 160 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\n        downcasted = int160(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 160 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int152 from int256, reverting on\n     * overflow (when the input is less than smallest int152 or\n     * greater than largest int152).\n     *\n     * Counterpart to Solidity's `int152` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 152 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\n        downcasted = int152(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 152 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int144 from int256, reverting on\n     * overflow (when the input is less than smallest int144 or\n     * greater than largest int144).\n     *\n     * Counterpart to Solidity's `int144` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 144 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\n        downcasted = int144(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 144 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int136 from int256, reverting on\n     * overflow (when the input is less than smallest int136 or\n     * greater than largest int136).\n     *\n     * Counterpart to Solidity's `int136` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 136 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\n        downcasted = int136(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 136 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int128 from int256, reverting on\n     * overflow (when the input is less than smallest int128 or\n     * greater than largest int128).\n     *\n     * Counterpart to Solidity's `int128` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 128 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\n        downcasted = int128(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 128 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int120 from int256, reverting on\n     * overflow (when the input is less than smallest int120 or\n     * greater than largest int120).\n     *\n     * Counterpart to Solidity's `int120` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 120 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\n        downcasted = int120(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 120 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int112 from int256, reverting on\n     * overflow (when the input is less than smallest int112 or\n     * greater than largest int112).\n     *\n     * Counterpart to Solidity's `int112` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 112 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\n        downcasted = int112(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 112 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int104 from int256, reverting on\n     * overflow (when the input is less than smallest int104 or\n     * greater than largest int104).\n     *\n     * Counterpart to Solidity's `int104` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 104 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\n        downcasted = int104(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 104 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int96 from int256, reverting on\n     * overflow (when the input is less than smallest int96 or\n     * greater than largest int96).\n     *\n     * Counterpart to Solidity's `int96` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 96 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\n        downcasted = int96(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 96 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int88 from int256, reverting on\n     * overflow (when the input is less than smallest int88 or\n     * greater than largest int88).\n     *\n     * Counterpart to Solidity's `int88` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 88 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\n        downcasted = int88(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 88 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int80 from int256, reverting on\n     * overflow (when the input is less than smallest int80 or\n     * greater than largest int80).\n     *\n     * Counterpart to Solidity's `int80` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 80 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\n        downcasted = int80(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 80 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int72 from int256, reverting on\n     * overflow (when the input is less than smallest int72 or\n     * greater than largest int72).\n     *\n     * Counterpart to Solidity's `int72` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 72 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\n        downcasted = int72(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 72 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int64 from int256, reverting on\n     * overflow (when the input is less than smallest int64 or\n     * greater than largest int64).\n     *\n     * Counterpart to Solidity's `int64` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 64 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\n        downcasted = int64(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 64 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int56 from int256, reverting on\n     * overflow (when the input is less than smallest int56 or\n     * greater than largest int56).\n     *\n     * Counterpart to Solidity's `int56` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 56 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\n        downcasted = int56(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 56 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int48 from int256, reverting on\n     * overflow (when the input is less than smallest int48 or\n     * greater than largest int48).\n     *\n     * Counterpart to Solidity's `int48` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 48 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\n        downcasted = int48(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 48 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int40 from int256, reverting on\n     * overflow (when the input is less than smallest int40 or\n     * greater than largest int40).\n     *\n     * Counterpart to Solidity's `int40` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 40 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\n        downcasted = int40(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 40 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int32 from int256, reverting on\n     * overflow (when the input is less than smallest int32 or\n     * greater than largest int32).\n     *\n     * Counterpart to Solidity's `int32` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 32 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\n        downcasted = int32(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 32 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int24 from int256, reverting on\n     * overflow (when the input is less than smallest int24 or\n     * greater than largest int24).\n     *\n     * Counterpart to Solidity's `int24` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 24 bits\n     *\n     * _Available since v4.7._\n     */\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\n        downcasted = int24(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 24 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int16 from int256, reverting on\n     * overflow (when the input is less than smallest int16 or\n     * greater than largest int16).\n     *\n     * Counterpart to Solidity's `int16` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 16 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\n        downcasted = int16(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 16 bits\");\n    }\n\n    /**\n     * @dev Returns the downcasted int8 from int256, reverting on\n     * overflow (when the input is less than smallest int8 or\n     * greater than largest int8).\n     *\n     * Counterpart to Solidity's `int8` operator.\n     *\n     * Requirements:\n     *\n     * - input must fit into 8 bits\n     *\n     * _Available since v3.1._\n     */\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\n        downcasted = int8(value);\n        require(downcasted == value, \"SafeCast: value doesn't fit in 8 bits\");\n    }\n\n    /**\n     * @dev Converts an unsigned uint256 into a signed int256.\n     *\n     * Requirements:\n     *\n     * - input must be less than or equal to maxInt256.\n     *\n     * _Available since v3.0._\n     */\n    function toInt256(uint256 value) internal pure returns (int256) {\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\n        require(value <= uint256(type(int256).max), \"SafeCast: value doesn't fit in an int256\");\n        return int256(value);\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/interfaces/IERC1967.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC1967.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC-1967: Proxy Storage Slots. This interface contains the events defined in the ERC.\n *\n * _Available since v4.8.3._\n */\ninterface IERC1967 {\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/interfaces/draft-IERC1822.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Proxy.sol\";\nimport \"./ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\n * implementation address that can be changed. This address is stored in storage in the location specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\n * implementation behind the proxy.\n */\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\n     *\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\n     */\n    constructor(address _logic, bytes memory _data) payable {\n        _upgradeToAndCall(_logic, _data, false);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _implementation() internal view virtual override returns (address impl) {\n        return ERC1967Upgrade._getImplementation();\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/IERC1967.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n */\nabstract contract ERC1967Upgrade is IERC1967 {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(address newImplementation, bytes memory data, bool forceCall) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(address newImplementation, bytes memory data, bool forceCall) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(address newBeacon, bytes memory data, bool forceCall) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/proxy/Proxy.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overridden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/Address.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
        },
        "lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
        },
        "lib/osx-commons/contracts/src/dao/IDAO.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IDAO\n/// @author Aragon Association - 2022-2023\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\n/// @custom:security-contact sirt@aragon.org\ninterface IDAO {\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\n    /// @param to The address to call.\n    /// @param value The native token value to be sent with the call.\n    /// @param data The bytes-encoded function selector and calldata for the call.\n    struct Action {\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\n    /// @param _where The address of the contract.\n    /// @param _who The address of a EOA or contract to give the permissions.\n    /// @param _permissionId The permission identifier.\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\n    /// @return Returns true if the address has permission, false if not.\n    function hasPermission(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        bytes memory _data\n    ) external view returns (bool);\n\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\n    /// @param _metadata The IPFS hash of the new metadata object.\n    function setMetadata(bytes calldata _metadata) external;\n\n    /// @notice Emitted when the DAO metadata is updated.\n    /// @param metadata The IPFS hash of the new metadata object.\n    event MetadataSet(bytes metadata);\n\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\n    /// @param _actions The array of actions.\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    /// @return The array of results obtained from the executed actions in `bytes`.\n    /// @return The resulting failure map containing the actions have actually failed.\n    function execute(\n        bytes32 _callId,\n        Action[] memory _actions,\n        uint256 _allowFailureMap\n    ) external returns (bytes[] memory, uint256);\n\n    /// @notice Emitted when a proposal is executed.\n    /// @param actor The address of the caller.\n    /// @param callId The ID of the call.\n    /// @param actions The array of actions executed.\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\n    /// @param failureMap The failure map encoding which actions have failed.\n    /// @param execResults The array with the results of the executed actions.\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\n    event Executed(\n        address indexed actor,\n        bytes32 callId,\n        Action[] actions,\n        uint256 allowFailureMap,\n        uint256 failureMap,\n        bytes[] execResults\n    );\n\n    /// @notice Emitted when a standard callback is registered.\n    /// @param interfaceId The ID of the interface.\n    /// @param callbackSelector The selector of the callback function.\n    /// @param magicNumber The magic number to be registered for the callback function selector.\n    event StandardCallbackRegistered(\n        bytes4 interfaceId,\n        bytes4 callbackSelector,\n        bytes4 magicNumber\n    );\n\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\n    /// @param _token The address of the token or address(0) in case of the native token.\n    /// @param _amount The amount of tokens to deposit.\n    /// @param _reference The reference describing the deposit reason.\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\n\n    /// @notice Emitted when a token deposit has been made to the DAO.\n    /// @param sender The address of the sender.\n    /// @param token The address of the deposited token.\n    /// @param amount The amount of tokens deposited.\n    /// @param _reference The reference describing the deposit reason.\n    event Deposited(\n        address indexed sender,\n        address indexed token,\n        uint256 amount,\n        string _reference\n    );\n\n    /// @notice Emitted when a native token deposit has been made to the DAO.\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\n    /// @param sender The address of the sender.\n    /// @param amount The amount of native tokens deposited.\n    event NativeTokenDeposited(address sender, uint256 amount);\n\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\n    /// @param _trustedForwarder The trusted forwarder address.\n    function setTrustedForwarder(address _trustedForwarder) external;\n\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\n    /// @return The trusted forwarder address.\n    function getTrustedForwarder() external view returns (address);\n\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\n    /// @param forwarder the new forwarder address.\n    event TrustedForwarderSet(address forwarder);\n\n    /// @notice Checks whether a signature is valid for a provided hash according to [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271).\n    /// @param _hash The hash of the data to be signed.\n    /// @param _signature The signature byte array associated with `_hash`.\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid and `0xffffffff` if not.\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\n\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\n    /// @param _interfaceId The ID of the interface.\n    /// @param _callbackSelector The selector of the callback function.\n    /// @param _magicNumber The magic number to be registered for the function signature.\n    function registerStandardCallback(\n        bytes4 _interfaceId,\n        bytes4 _callbackSelector,\n        bytes4 _magicNumber\n    ) external;\n\n    /// @notice Removed function being left here to not corrupt the IDAO interface ID. Any call will revert.\n    /// @dev Introduced in v1.0.0. Removed in v1.4.0.\n    function setSignatureValidator(address) external;\n}\n"
        },
        "lib/osx-commons/contracts/src/permission/PermissionLib.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title PermissionLib\n/// @author Aragon Association - 2021-2023\n/// @notice A library containing objects for permission processing.\n/// @custom:security-contact sirt@aragon.org\nlibrary PermissionLib {\n    /// @notice A constant expressing that no condition is applied to a permission.\n    address public constant NO_CONDITION = address(0);\n\n    /// @notice The types of permission operations available in the `PermissionManager`.\n    /// @param Grant The grant operation setting a permission without a condition.\n    /// @param Revoke The revoke operation removing a permission (that was granted with or without a condition).\n    /// @param GrantWithCondition The grant operation setting a permission with a condition.\n    enum Operation {\n        Grant,\n        Revoke,\n        GrantWithCondition\n    }\n\n    /// @notice A struct containing the information for a permission to be applied on a single target contract without a condition.\n    /// @param operation The permission operation type.\n    /// @param who The address (EOA or contract) receiving the permission.\n    /// @param permissionId The permission identifier.\n    struct SingleTargetPermission {\n        Operation operation;\n        address who;\n        bytes32 permissionId;\n    }\n\n    /// @notice A struct containing the information for a permission to be applied on multiple target contracts, optionally, with a condition.\n    /// @param operation The permission operation type.\n    /// @param where The address of the target contract for which `who` receives permission.\n    /// @param who The address (EOA or contract) receiving the permission.\n    /// @param condition The `PermissionCondition` that will be asked for authorization on calls connected to the specified permission identifier.\n    /// @param permissionId The permission identifier.\n    struct MultiTargetPermission {\n        Operation operation;\n        address where;\n        address who;\n        address condition;\n        bytes32 permissionId;\n    }\n}\n"
        },
        "lib/osx-commons/contracts/src/permission/auth/DaoAuthorizableUpgradeable.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {ContextUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\";\n\nimport {IDAO} from \"../../dao/IDAO.sol\";\nimport {_auth} from \"./auth.sol\";\n\n/// @title DaoAuthorizableUpgradeable\n/// @author Aragon Association - 2022-2023\n/// @notice An abstract contract providing a meta-transaction compatible modifier for upgradeable or cloneable contracts to authorize function calls through an associated DAO.\n/// @dev Make sure to call `__DaoAuthorizableUpgradeable_init` during initialization of the inheriting contract.\n/// @custom:security-contact sirt@aragon.org\nabstract contract DaoAuthorizableUpgradeable is ContextUpgradeable {\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\n    IDAO private dao_;\n\n    /// @notice Initializes the contract by setting the associated DAO.\n    /// @param _dao The associated DAO address.\n    // solhint-disable-next-line func-name-mixedcase\n    function __DaoAuthorizableUpgradeable_init(IDAO _dao) internal onlyInitializing {\n        dao_ = _dao;\n    }\n\n    /// @notice Returns the DAO contract.\n    /// @return The DAO contract.\n    function dao() public view returns (IDAO) {\n        return dao_;\n    }\n\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\n    modifier auth(bytes32 _permissionId) {\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\n        _;\n    }\n\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\n    uint256[49] private __gap;\n}\n"
        },
        "lib/osx-commons/contracts/src/permission/auth/auth.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {IDAO} from \"../../dao/IDAO.sol\";\n\n/// @notice Thrown if a call is unauthorized in the associated DAO.\n/// @param dao The associated DAO.\n/// @param where The context in which the authorization reverted.\n/// @param who The address (EOA or contract) missing the permission.\n/// @param permissionId The permission identifier.\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\n\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\n/// @param _where The address of the target contract for which `who` receives permission.\n/// @param _who The address (EOA or contract) owning the permission.\n/// @param _permissionId The permission identifier.\n/// @param _data The optional data passed to the `PermissionCondition` registered.\n/// @custom:security-contact sirt@aragon.org\nfunction _auth(\n    IDAO _dao,\n    address _where,\n    address _who,\n    bytes32 _permissionId,\n    bytes calldata _data\n) view {\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\n        revert DaoUnauthorized({\n            dao: address(_dao),\n            where: _where,\n            who: _who,\n            permissionId: _permissionId\n        });\n}\n"
        },
        "lib/osx-commons/contracts/src/plugin/IPlugin.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IPlugin\n/// @author Aragon Association - 2022-2023\n/// @notice An interface defining the traits of a plugin.\n/// @custom:security-contact sirt@aragon.org\ninterface IPlugin {\n    enum PluginType {\n        UUPS,\n        Cloneable,\n        Constructable\n    }\n\n    /// @notice Returns the plugin's type\n    function pluginType() external view returns (PluginType);\n}\n"
        },
        "lib/osx-commons/contracts/src/plugin/PluginUUPSUpgradeable.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {UUPSUpgradeable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol\";\nimport {IERC1822ProxiableUpgradeable} from \"@openzeppelin/contracts-upgradeable/interfaces/draft-IERC1822Upgradeable.sol\";\nimport {ERC165Upgradeable} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\n\nimport {IProtocolVersion} from \"../utils/versioning/IProtocolVersion.sol\";\nimport {ProtocolVersion} from \"../utils/versioning/ProtocolVersion.sol\";\nimport {DaoAuthorizableUpgradeable} from \"../permission/auth/DaoAuthorizableUpgradeable.sol\";\nimport {IDAO} from \"../dao/IDAO.sol\";\nimport {IPlugin} from \"./IPlugin.sol\";\n\n/// @title PluginUUPSUpgradeable\n/// @author Aragon Association - 2022-2023\n/// @notice An abstract, upgradeable contract to inherit from when creating a plugin being deployed via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\n/// @custom:security-contact sirt@aragon.org\nabstract contract PluginUUPSUpgradeable is\n    IPlugin,\n    ERC165Upgradeable,\n    UUPSUpgradeable,\n    DaoAuthorizableUpgradeable,\n    ProtocolVersion\n{\n    // NOTE: When adding new state variables to the contract, the size of `_gap` has to be adapted below as well.\n\n    /// @notice Disables the initializers on the implementation contract to prevent it from being left uninitialized.\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /// @inheritdoc IPlugin\n    function pluginType() public pure override returns (PluginType) {\n        return PluginType.UUPS;\n    }\n\n    /// @notice The ID of the permission required to call the `_authorizeUpgrade` function.\n    bytes32 public constant UPGRADE_PLUGIN_PERMISSION_ID = keccak256(\"UPGRADE_PLUGIN_PERMISSION\");\n\n    /// @notice Initializes the plugin by storing the associated DAO.\n    /// @param _dao The DAO contract.\n    // solhint-disable-next-line func-name-mixedcase\n    function __PluginUUPSUpgradeable_init(IDAO _dao) internal virtual onlyInitializing {\n        __DaoAuthorizableUpgradeable_init(_dao);\n    }\n\n    /// @notice Checks if an interface is supported by this or its parent contract.\n    /// @param _interfaceId The ID of the interface.\n    /// @return Returns `true` if the interface is supported.\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return\n            _interfaceId == type(IPlugin).interfaceId ||\n            _interfaceId == type(IProtocolVersion).interfaceId ||\n            _interfaceId == type(IERC1822ProxiableUpgradeable).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /// @notice Returns the address of the implementation contract in the [proxy storage slot](https://eips.ethereum.org/EIPS/eip-1967) slot the [UUPS proxy](https://eips.ethereum.org/EIPS/eip-1822) is pointing to.\n    /// @return The address of the implementation contract.\n    function implementation() public view returns (address) {\n        return _getImplementation();\n    }\n\n    /// @notice Internal method authorizing the upgrade of the contract via the [upgradeability mechanism for UUPS proxies](https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable) (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\n    /// @dev The caller must have the `UPGRADE_PLUGIN_PERMISSION_ID` permission.\n    function _authorizeUpgrade(\n        address\n    )\n        internal\n        virtual\n        override\n        auth(UPGRADE_PLUGIN_PERMISSION_ID)\n    // solhint-disable-next-line no-empty-blocks\n    {\n\n    }\n\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\n    uint256[50] private __gap;\n}\n"
        },
        "lib/osx-commons/contracts/src/plugin/extensions/membership/IMembership.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IMembership\n/// @author Aragon Association - 2022-2023\n/// @notice An interface to be implemented by DAO plugins that define membership.\n/// @custom:security-contact sirt@aragon.org\ninterface IMembership {\n    /// @notice Emitted when members are added to the DAO plugin.\n    /// @param members The list of new members being added.\n    event MembersAdded(address[] members);\n\n    /// @notice Emitted when members are removed from the DAO plugin.\n    /// @param members The list of existing members being removed.\n    event MembersRemoved(address[] members);\n\n    /// @notice Emitted to announce the membership being defined by a contract.\n    /// @param definingContract The contract defining the membership.\n    event MembershipContractAnnounced(address indexed definingContract);\n\n    /// @notice Checks if an account is a member of the DAO.\n    /// @param _account The address of the account to be checked.\n    /// @return Whether the account is a member or not.\n    /// @dev This function must be implemented in the plugin contract that introduces the members to the DAO.\n    function isMember(address _account) external view returns (bool);\n}\n"
        },
        "lib/osx-commons/contracts/src/plugin/extensions/proposal/IProposal.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {IDAO} from \"../../../dao/IDAO.sol\";\n\n/// @title IProposal\n/// @author Aragon Association - 2022-2023\n/// @notice An interface to be implemented by DAO plugins that create and execute proposals.\n/// @custom:security-contact sirt@aragon.org\ninterface IProposal {\n    /// @notice Emitted when a proposal is created.\n    /// @param proposalId The ID of the proposal.\n    /// @param creator  The creator of the proposal.\n    /// @param startDate The start date of the proposal in seconds.\n    /// @param endDate The end date of the proposal in seconds.\n    /// @param metadata The metadata of the proposal.\n    /// @param actions The actions that will be executed if the proposal passes.\n    /// @param allowFailureMap A bitmap allowing the proposal to succeed, even if individual actions might revert. If the bit at index `i` is 1, the proposal succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    event ProposalCreated(\n        uint256 indexed proposalId,\n        address indexed creator,\n        uint64 startDate,\n        uint64 endDate,\n        bytes metadata,\n        IDAO.Action[] actions,\n        uint256 allowFailureMap\n    );\n\n    /// @notice Emitted when a proposal is executed.\n    /// @param proposalId The ID of the proposal.\n    event ProposalExecuted(uint256 indexed proposalId);\n\n    /// @notice Returns the proposal count determining the next proposal ID.\n    /// @return The proposal count.\n    function proposalCount() external view returns (uint256);\n}\n"
        },
        "lib/osx-commons/contracts/src/plugin/extensions/proposal/ProposalUpgradeable.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {CountersUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol\";\nimport {ERC165Upgradeable} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\n\nimport {IDAO} from \"../../../dao/IDAO.sol\";\nimport {IProposal} from \"./IProposal.sol\";\n\n/// @title ProposalUpgradeable\n/// @author Aragon Association - 2022-2023\n/// @notice An abstract contract containing the traits and internal functionality to create and execute proposals that can be inherited by upgradeable DAO plugins.\n/// @custom:security-contact sirt@aragon.org\nabstract contract ProposalUpgradeable is IProposal, ERC165Upgradeable {\n    using CountersUpgradeable for CountersUpgradeable.Counter;\n\n    /// @notice The incremental ID for proposals and executions.\n    CountersUpgradeable.Counter private proposalCounter;\n\n    /// @inheritdoc IProposal\n    function proposalCount() public view override returns (uint256) {\n        return proposalCounter.current();\n    }\n\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\n    /// @param _interfaceId The ID of the interface.\n    /// @return Returns `true` if the interface is supported.\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(IProposal).interfaceId || super.supportsInterface(_interfaceId);\n    }\n\n    /// @notice Creates a proposal ID.\n    /// @return proposalId The proposal ID.\n    function _createProposalId() internal returns (uint256 proposalId) {\n        proposalId = proposalCount();\n        proposalCounter.increment();\n    }\n\n    /// @notice Internal function to create a proposal.\n    /// @param _metadata The proposal metadata.\n    /// @param _startDate The start date of the proposal in seconds.\n    /// @param _endDate The end date of the proposal in seconds.\n    /// @param _allowFailureMap A bitmap allowing the proposal to succeed, even if individual actions might revert. If the bit at index `i` is 1, the proposal succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    /// @param _actions The actions that will be executed after the proposal passes.\n    /// @return proposalId The ID of the proposal.\n    function _createProposal(\n        address _creator,\n        bytes calldata _metadata,\n        uint64 _startDate,\n        uint64 _endDate,\n        IDAO.Action[] calldata _actions,\n        uint256 _allowFailureMap\n    ) internal virtual returns (uint256 proposalId) {\n        proposalId = _createProposalId();\n\n        emit ProposalCreated({\n            proposalId: proposalId,\n            creator: _creator,\n            metadata: _metadata,\n            startDate: _startDate,\n            endDate: _endDate,\n            actions: _actions,\n            allowFailureMap: _allowFailureMap\n        });\n    }\n\n    /// @notice Internal function to execute a proposal.\n    /// @param _proposalId The ID of the proposal to be executed.\n    /// @param _actions The array of actions to be executed.\n    /// @param _allowFailureMap A bitmap allowing the proposal to succeed, even if individual actions might revert. If the bit at index `i` is 1, the proposal succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    /// @return execResults The array with the results of the executed actions.\n    /// @return failureMap The failure map encoding which actions have failed.\n    function _executeProposal(\n        IDAO _dao,\n        uint256 _proposalId,\n        IDAO.Action[] memory _actions,\n        uint256 _allowFailureMap\n    ) internal virtual returns (bytes[] memory execResults, uint256 failureMap) {\n        (execResults, failureMap) = _dao.execute(bytes32(_proposalId), _actions, _allowFailureMap);\n        emit ProposalExecuted({proposalId: _proposalId});\n    }\n\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\n    uint256[49] private __gap;\n}\n"
        },
        "lib/osx-commons/contracts/src/plugin/setup/IPluginSetup.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {PermissionLib} from \"../../permission/PermissionLib.sol\";\n\n// solhint-disable-next-line no-unused-import\nimport {IDAO} from \"../../dao/IDAO.sol\";\n\n/// @title IPluginSetup\n/// @author Aragon Association - 2022-2023\n/// @notice The interface required for a plugin setup contract to be consumed by the `PluginSetupProcessor` for plugin installations, updates, and uninstallations.\n/// @custom:security-contact sirt@aragon.org\ninterface IPluginSetup {\n    /// @notice The data associated with a prepared setup.\n    /// @param helpers The address array of helpers (contracts or EOAs) associated with this plugin version after the installation or update.\n    /// @param permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the installing or updating DAO.\n    struct PreparedSetupData {\n        address[] helpers;\n        PermissionLib.MultiTargetPermission[] permissions;\n    }\n\n    /// @notice The payload for plugin updates and uninstallations containing the existing contracts as well as optional data to be consumed by the plugin setup.\n    /// @param plugin The address of the `Plugin`.\n    /// @param currentHelpers The address array of all current helpers (contracts or EOAs) associated with the plugin to update from.\n    /// @param data The bytes-encoded data containing the input parameters for the preparation of update/uninstall as specified in the corresponding ABI on the version's metadata.\n    struct SetupPayload {\n        address plugin;\n        address[] currentHelpers;\n        bytes data;\n    }\n\n    /// @notice Prepares the installation of a plugin.\n    /// @param _dao The address of the installing DAO.\n    /// @param _data The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\n    /// @return plugin The address of the `Plugin` contract being prepared for installation.\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\n    function prepareInstallation(\n        address _dao,\n        bytes calldata _data\n    ) external returns (address plugin, PreparedSetupData memory preparedSetupData);\n\n    /// @notice Prepares the update of a plugin.\n    /// @param _dao The address of the updating DAO.\n    /// @param _fromBuild The build number of the plugin to update from.\n    /// @param _payload The relevant data necessary for the `prepareUpdate`. See above.\n    /// @return initData The initialization data to be passed to upgradeable contracts when the update is applied in the `PluginSetupProcessor`.\n    /// @return preparedSetupData The deployed plugin's relevant data which consists of helpers and permissions.\n    function prepareUpdate(\n        address _dao,\n        uint16 _fromBuild,\n        SetupPayload calldata _payload\n    ) external returns (bytes memory initData, PreparedSetupData memory preparedSetupData);\n\n    /// @notice Prepares the uninstallation of a plugin.\n    /// @param _dao The address of the uninstalling DAO.\n    /// @param _payload The relevant data necessary for the `prepareUninstallation`. See above.\n    /// @return permissions The array of multi-targeted permission operations to be applied by the `PluginSetupProcessor` to the uninstalling DAO.\n    function prepareUninstallation(\n        address _dao,\n        SetupPayload calldata _payload\n    ) external returns (PermissionLib.MultiTargetPermission[] memory permissions);\n\n    /// @notice Returns the plugin implementation address.\n    /// @return The address of the plugin implementation contract.\n    /// @dev The implementation can be instantiated via the `new` keyword, cloned via the minimal proxy pattern (see [ERC-1167](https://eips.ethereum.org/EIPS/eip-1167)), or proxied via the UUPS proxy pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822)).\n    function implementation() external view returns (address);\n}\n"
        },
        "lib/osx-commons/contracts/src/plugin/setup/PluginUpgradeableSetup.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {ERC165} from \"@openzeppelin/contracts/utils/introspection/ERC165.sol\";\n\nimport {IProtocolVersion} from \"../../utils/versioning/IProtocolVersion.sol\";\nimport {ProtocolVersion} from \"../../utils/versioning/ProtocolVersion.sol\";\nimport {IPluginSetup} from \"./IPluginSetup.sol\";\n\n/// @title PluginUpgradeableSetup\n/// @author Aragon Association - 2022-2024\n/// @notice An abstract contract to inherit from to implement the plugin setup for upgradeable plugins, i.e, `PluginUUPSUpgradeable` being deployed via the UUPS pattern (see [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822) and [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967)).\n/// @custom:security-contact sirt@aragon.org\nabstract contract PluginUpgradeableSetup is ERC165, IPluginSetup, ProtocolVersion {\n    /// @notice The address of the plugin implementation contract for initial block explorer verification\n    /// and to create [ERC-1967](https://eips.ethereum.org/EIPS/eip-1967) UUPS proxies from.\n    address internal immutable IMPLEMENTATION;\n\n    /// @notice Thrown when an update path is not available, for example, if this is the initial build.\n    /// @param fromBuild The build number to update from.\n    /// @param thisBuild The build number of this setup to update to.\n    error InvalidUpdatePath(uint16 fromBuild, uint16 thisBuild);\n\n    /// @notice The contract constructor, that setting the plugin implementation contract.\n    /// @param _implementation The address of the plugin implementation contract.\n    constructor(address _implementation) {\n        IMPLEMENTATION = _implementation;\n    }\n\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\n    /// @param _interfaceId The ID of the interface.\n    /// @return Returns `true` if the interface is supported.\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return\n            _interfaceId == type(IPluginSetup).interfaceId ||\n            _interfaceId == type(IProtocolVersion).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /// @inheritdoc IPluginSetup\n    function implementation() public view returns (address) {\n        return IMPLEMENTATION;\n    }\n}\n"
        },
        "lib/osx-commons/contracts/src/utils/math/Ratio.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n// The base value to encode real-valued ratios on the interval `[0,1]` as integers on the interval `[0, 10**6]`.\nuint256 constant RATIO_BASE = 10 ** 6;\n\n/// @notice Thrown if a ratio value exceeds the maximal value of `10**6`.\n/// @param limit The maximal value.\n/// @param actual The actual value.\nerror RatioOutOfBounds(uint256 limit, uint256 actual);\n\n/// @notice Applies a ratio to a value and ceils the remainder.\n/// @param _value The value to which the ratio is applied.\n/// @param _ratio The ratio that must be in the interval `[0, 10**6]`.\n/// @return result The resulting value.\n/// @custom:security-contact sirt@aragon.org\nfunction _applyRatioCeiled(uint256 _value, uint256 _ratio) pure returns (uint256 result) {\n    if (_ratio > RATIO_BASE) {\n        revert RatioOutOfBounds({limit: RATIO_BASE, actual: _ratio});\n    }\n\n    _value = _value * _ratio;\n    uint256 remainder = _value % RATIO_BASE;\n    result = _value / RATIO_BASE;\n\n    // Check if ceiling is needed\n    if (remainder != 0) {\n        ++result;\n    }\n}\n"
        },
        "lib/osx-commons/contracts/src/utils/versioning/IProtocolVersion.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IProtocolVersion\n/// @author Aragon Association - 2022-2023\n/// @notice An interface defining the semantic Aragon OSx protocol version number.\n/// @custom:security-contact sirt@aragon.org\ninterface IProtocolVersion {\n    /// @notice Returns the semantic Aragon OSx protocol version number that the implementing contract is associated with.\n    /// @return _version Returns the semantic Aragon OSx protocol version number.\n    /// @dev This version number is not to be confused with the `release` and `build` numbers found in the `Version.Tag` struct inside the `PluginRepo` contract being used to version plugin setup and associated plugin implementation contracts.\n    function protocolVersion() external view returns (uint8[3] memory _version);\n}\n"
        },
        "lib/osx-commons/contracts/src/utils/versioning/ProtocolVersion.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {IProtocolVersion} from \"./IProtocolVersion.sol\";\n\n/// @title ProtocolVersion\n/// @author Aragon Association - 2023\n/// @notice An abstract, stateless, non-upgradeable contract providing the current Aragon OSx protocol version number.\n/// @dev Do not add any new variables to this contract that would shift down storage in the inheritance chain.\n/// @custom:security-contact sirt@aragon.org\nabstract contract ProtocolVersion is IProtocolVersion {\n    // IMPORTANT: Do not add any storage variable, see the above notice.\n\n    /// @inheritdoc IProtocolVersion\n    function protocolVersion() public pure returns (uint8[3] memory) {\n        return [1, 4, 0];\n    }\n}\n"
        },
        "lib/osx/packages/contracts/src/plugins/governance/majority-voting/IMajorityVoting.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {IDAO} from \"@aragon/osx-commons-contracts/src/dao/IDAO.sol\";\n\n/// @title IMajorityVoting\n/// @author Aragon Association - 2022-2023\n/// @notice The interface of majority voting plugin.\n/// @custom:security-contact sirt@aragon.org\ninterface IMajorityVoting {\n    /// @notice Vote options that a voter can chose from.\n    /// @param None The default option state of a voter indicating the absence from the vote. This option neither influences support nor participation.\n    /// @param Abstain This option does not influence the support but counts towards participation.\n    /// @param Yes This option increases the support and counts towards participation.\n    /// @param No This option decreases the support and counts towards participation.\n    enum VoteOption {\n        None,\n        Abstain,\n        Yes,\n        No\n    }\n\n    /// @notice Emitted when a vote is cast by a voter.\n    /// @param proposalId The ID of the proposal.\n    /// @param voter The voter casting the vote.\n    /// @param voteOption The casted vote option.\n    /// @param votingPower The voting power behind this vote.\n    event VoteCast(\n        uint256 indexed proposalId,\n        address indexed voter,\n        VoteOption voteOption,\n        uint256 votingPower\n    );\n\n    /// @notice Returns the support threshold parameter stored in the voting settings.\n    /// @return The support threshold parameter.\n    function supportThreshold() external view returns (uint32);\n\n    /// @notice Returns the minimum participation parameter stored in the voting settings.\n    /// @return The minimum participation parameter.\n    function minParticipation() external view returns (uint32);\n\n    /// @notice Checks if the support value defined as $$\\texttt{support} = \\frac{N_\\text{yes}}{N_\\text{yes}+N_\\text{no}}$$ for a proposal vote is greater than the support threshold.\n    /// @param _proposalId The ID of the proposal.\n    /// @return Returns `true` if the  support is greater than the support threshold and `false` otherwise.\n    function isSupportThresholdReached(uint256 _proposalId) external view returns (bool);\n\n    /// @notice Checks if the worst-case support value defined as $$\\texttt{worstCaseSupport} = \\frac{N_\\text{yes}}{ N_\\text{total}-N_\\text{abstain}}$$ for a proposal vote is greater than the support threshold.\n    /// @param _proposalId The ID of the proposal.\n    /// @return Returns `true` if the worst-case support is greater than the support threshold and `false` otherwise.\n    function isSupportThresholdReachedEarly(uint256 _proposalId) external view returns (bool);\n\n    /// @notice Checks if the participation value defined as $$\\texttt{participation} = \\frac{N_\\text{yes}+N_\\text{no}+N_\\text{abstain}}{N_\\text{total}}$$ for a proposal vote is greater or equal than the minimum participation value.\n    /// @param _proposalId The ID of the proposal.\n    /// @return Returns `true` if the participation is greater than the minimum participation and `false` otherwise.\n    function isMinParticipationReached(uint256 _proposalId) external view returns (bool);\n\n    /// @notice Checks if an account can participate on a proposal vote. This can be because the vote\n    /// - has not started,\n    /// - has ended,\n    /// - was executed, or\n    /// - the voter doesn't have voting powers.\n    /// @param _proposalId The proposal Id.\n    /// @param _account The account address to be checked.\n    /// @param  _voteOption Whether the voter abstains, supports or opposes the proposal.\n    /// @return Returns true if the account is allowed to vote.\n    /// @dev The function assumes the queried proposal exists.\n    function canVote(\n        uint256 _proposalId,\n        address _account,\n        VoteOption _voteOption\n    ) external view returns (bool);\n\n    /// @notice Checks if a proposal can be executed.\n    /// @param _proposalId The ID of the proposal to be checked.\n    /// @return True if the proposal can be executed, false otherwise.\n    function canExecute(uint256 _proposalId) external view returns (bool);\n\n    /// @notice Votes for a vote option and, optionally, executes the proposal.\n    /// @dev `_voteOption`, 1 -> abstain, 2 -> yes, 3 -> no\n    /// @param _proposalId The ID of the proposal.\n    /// @param _voteOption The chosen vote option.\n    /// @param _tryEarlyExecution If `true`,  early execution is tried after the vote cast. The call does not revert if early execution is not possible.\n    function vote(uint256 _proposalId, VoteOption _voteOption, bool _tryEarlyExecution) external;\n\n    /// @notice Executes a proposal.\n    /// @param _proposalId The ID of the proposal to be executed.\n    function execute(uint256 _proposalId) external;\n\n    /// @notice Returns whether the account has voted for the proposal.  Note, that this does not check if the account has voting power.\n    /// @param _proposalId The ID of the proposal.\n    /// @param _account The account address to be checked.\n    /// @return The vote option cast by a voter for a certain proposal.\n    function getVoteOption(\n        uint256 _proposalId,\n        address _account\n    ) external view returns (VoteOption);\n}\n"
        },
        "lib/osx/packages/contracts/src/plugins/governance/majority-voting/MajorityVotingBase.sol": {
          "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\nimport {ERC165Upgradeable} from \"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\";\nimport {Initializable} from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport {SafeCastUpgradeable} from \"@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol\";\n\nimport {IProposal} from \"@aragon/osx-commons-contracts/src/plugin/extensions/proposal/IProposal.sol\";\nimport {ProposalUpgradeable} from \"@aragon/osx-commons-contracts/src/plugin/extensions/proposal/ProposalUpgradeable.sol\";\nimport {RATIO_BASE, RatioOutOfBounds} from \"@aragon/osx-commons-contracts/src/utils/math/Ratio.sol\";\nimport {PluginUUPSUpgradeable} from \"@aragon/osx-commons-contracts/src/plugin/PluginUUPSUpgradeable.sol\";\nimport {IDAO} from \"@aragon/osx-commons-contracts/src/dao/IDAO.sol\";\n\nimport {IMajorityVoting} from \"./IMajorityVoting.sol\";\n\n/// @title MajorityVotingBase\n/// @author Aragon Association - 2022-2023\n/// @notice The abstract implementation of majority voting plugins.\n///\n/// ### Parameterization\n///\n/// We define two parameters\n/// $$\\texttt{support} = \\frac{N_\\text{yes}}{N_\\text{yes} + N_\\text{no}} \\in [0,1]$$\n/// and\n/// $$\\texttt{participation} = \\frac{N_\\text{yes} + N_\\text{no} + N_\\text{abstain}}{N_\\text{total}} \\in [0,1],$$\n/// where $N_\\text{yes}$, $N_\\text{no}$, and $N_\\text{abstain}$ are the yes, no, and abstain votes that have been cast and $N_\\text{total}$ is the total voting power available at proposal creation time.\n///\n/// #### Limit Values: Support Threshold & Minimum Participation\n///\n/// Two limit values are associated with these parameters and decide if a proposal execution should be possible: $\\texttt{supportThreshold} \\in [0,1]$ and $\\texttt{minParticipation} \\in [0,1]$.\n///\n/// For threshold values, $>$ comparison is used. This **does not** include the threshold value. E.g., for $\\texttt{supportThreshold} = 50\\%$, the criterion is fulfilled if there is at least one more yes than no votes ($N_\\text{yes} = N_\\text{no} + 1$).\n/// For minimum values, $\\ge{}$ comparison is used. This **does** include the minimum participation value. E.g., for $\\texttt{minParticipation} = 40\\%$ and $N_\\text{total} = 10$, the criterion is fulfilled if 4 out of 10 votes were casted.\n///\n/// Majority voting implies that the support threshold is set with\n/// $$\\texttt{supportThreshold} \\ge 50\\% .$$\n/// However, this is not enforced by the contract code and developers can make unsafe parameters and only the frontend will warn about bad parameter settings.\n///\n/// ### Execution Criteria\n///\n/// After the vote is closed, two criteria decide if the proposal passes.\n///\n/// #### The Support Criterion\n///\n/// For a proposal to pass, the required ratio of yes and no votes must be met:\n/// $$(1- \\texttt{supportThreshold}) \\cdot N_\\text{yes} > \\texttt{supportThreshold} \\cdot N_\\text{no}.$$\n/// Note, that the inequality yields the simple majority voting condition for $\\texttt{supportThreshold}=\\frac{1}{2}$.\n///\n/// #### The Participation Criterion\n///\n/// For a proposal to pass, the minimum voting power must have been cast:\n/// $$N_\\text{yes} + N_\\text{no} + N_\\text{abstain} \\ge \\texttt{minVotingPower},$$\n/// where $\\texttt{minVotingPower} = \\texttt{minParticipation} \\cdot N_\\text{total}$.\n///\n/// ### Vote Replacement Execution\n///\n/// The contract allows votes to be replaced. Voters can vote multiple times and only the latest voteOption is tallied.\n///\n/// ### Early Execution\n///\n/// This contract allows a proposal to be executed early, iff the vote outcome cannot change anymore by more people voting. Accordingly, vote replacement and early execution are /// mutually exclusive options.\n/// The outcome cannot change anymore iff the support threshold is met even if all remaining votes are no votes. We call this number the worst-case number of no votes and define it as\n///\n/// $$N_\\text{no, worst-case} = N_\\text{no, worst-case} + \\texttt{remainingVotes}$$\n///\n/// where\n///\n/// $$\\texttt{remainingVotes} = N_\\text{total}-\\underbrace{(N_\\text{yes}+N_\\text{no}+N_\\text{abstain})}_{\\text{turnout}}.$$\n///\n/// We can use this quantity to calculate the worst-case support that would be obtained if all remaining votes are casted with no:\n///\n/// $$\n/// \\begin{align*}\n///   \\texttt{worstCaseSupport}\n///   &= \\frac{N_\\text{yes}}{N_\\text{yes} + (N_\\text{no, worst-case})} \\\\[3mm]\n///   &= \\frac{N_\\text{yes}}{N_\\text{yes} + (N_\\text{no} + \\texttt{remainingVotes})} \\\\[3mm]\n///   &= \\frac{N_\\text{yes}}{N_\\text{yes} +  N_\\text{no} + N_\\text{total} - (N_\\text{yes} + N_\\text{no} + N_\\text{abstain})} \\\\[3mm]\n///   &= \\frac{N_\\text{yes}}{N_\\text{total} - N_\\text{abstain}}\n/// \\end{align*}\n/// $$\n///\n/// In analogy, we can modify [the support criterion](#the-support-criterion) from above to allow for early execution:\n///\n/// $$\n/// \\begin{align*}\n///   (1 - \\texttt{supportThreshold}) \\cdot N_\\text{yes}\n///   &> \\texttt{supportThreshold} \\cdot  N_\\text{no, worst-case} \\\\[3mm]\n///   &> \\texttt{supportThreshold} \\cdot (N_\\text{no} + \\texttt{remainingVotes}) \\\\[3mm]\n///   &> \\texttt{supportThreshold} \\cdot (N_\\text{no} + N_\\text{total}-(N_\\text{yes}+N_\\text{no}+N_\\text{abstain})) \\\\[3mm]\n///   &> \\texttt{supportThreshold} \\cdot (N_\\text{total} - N_\\text{yes} - N_\\text{abstain})\n/// \\end{align*}\n/// $$\n///\n/// Accordingly, early execution is possible when the vote is open, the modified support criterion, and the particicpation criterion are met.\n/// @dev This contract implements the `IMajorityVoting` interface.\n/// @custom:security-contact sirt@aragon.org\nabstract contract MajorityVotingBase is\n    IMajorityVoting,\n    Initializable,\n    ERC165Upgradeable,\n    PluginUUPSUpgradeable,\n    ProposalUpgradeable\n{\n    using SafeCastUpgradeable for uint256;\n\n    /// @notice The different voting modes available.\n    /// @param Standard In standard mode, early execution and vote replacement are disabled.\n    /// @param EarlyExecution In early execution mode, a proposal can be executed early before the end date if the vote outcome cannot mathematically change by more voters voting.\n    /// @param VoteReplacement In vote replacement mode, voters can change their vote multiple times and only the latest vote option is tallied.\n    enum VotingMode {\n        Standard,\n        EarlyExecution,\n        VoteReplacement\n    }\n\n    /// @notice A container for the majority voting settings that will be applied as parameters on proposal creation.\n    /// @param votingMode A parameter to select the vote mode. In standard mode (0), early execution and vote replacement are disabled. In early execution mode (1), a proposal can be executed early before the end date if the vote outcome cannot mathematically change by more voters voting. In vote replacement mode (2), voters can change their vote multiple times and only the latest vote option is tallied.\n    /// @param supportThreshold The support threshold value. Its value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`.\n    /// @param minParticipation The minimum participation value. Its value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`.\n    /// @param minDuration The minimum duration of the proposal vote in seconds.\n    /// @param minProposerVotingPower The minimum voting power required to create a proposal.\n    struct VotingSettings {\n        VotingMode votingMode;\n        uint32 supportThreshold;\n        uint32 minParticipation;\n        uint64 minDuration;\n        uint256 minProposerVotingPower;\n    }\n\n    /// @notice A container for proposal-related information.\n    /// @param executed Whether the proposal is executed or not.\n    /// @param parameters The proposal parameters at the time of the proposal creation.\n    /// @param tally The vote tally of the proposal.\n    /// @param voters The votes casted by the voters.\n    /// @param actions The actions to be executed when the proposal passes.\n    /// @param allowFailureMap A bitmap allowing the proposal to succeed, even if individual actions might revert. If the bit at index `i` is 1, the proposal succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    struct Proposal {\n        bool executed;\n        ProposalParameters parameters;\n        Tally tally;\n        mapping(address => IMajorityVoting.VoteOption) voters;\n        IDAO.Action[] actions;\n        uint256 allowFailureMap;\n    }\n\n    /// @notice A container for the proposal parameters at the time of proposal creation.\n    /// @param votingMode A parameter to select the vote mode.\n    /// @param supportThreshold The support threshold value. The value has to be in the interval [0, 10^6] defined by `RATIO_BASE = 10**6`.\n    /// @param startDate The start date of the proposal vote.\n    /// @param endDate The end date of the proposal vote.\n    /// @param snapshotBlock The number of the block prior to the proposal creation.\n    /// @param minVotingPower The minimum voting power needed.\n    struct ProposalParameters {\n        VotingMode votingMode;\n        uint32 supportThreshold;\n        uint64 startDate;\n        uint64 endDate;\n        uint64 snapshotBlock;\n        uint256 minVotingPower;\n    }\n\n    /// @notice A container for the proposal vote tally.\n    /// @param abstain The number of abstain votes casted.\n    /// @param yes The number of yes votes casted.\n    /// @param no The number of no votes casted.\n    struct Tally {\n        uint256 abstain;\n        uint256 yes;\n        uint256 no;\n    }\n\n    /// @notice The [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID of the contract.\n    bytes4 internal constant MAJORITY_VOTING_BASE_INTERFACE_ID =\n        this.minDuration.selector ^\n            this.minProposerVotingPower.selector ^\n            this.votingMode.selector ^\n            this.totalVotingPower.selector ^\n            this.getProposal.selector ^\n            this.updateVotingSettings.selector ^\n            this.createProposal.selector;\n\n    /// @notice The ID of the permission required to call the `updateVotingSettings` function.\n    bytes32 public constant UPDATE_VOTING_SETTINGS_PERMISSION_ID =\n        keccak256(\"UPDATE_VOTING_SETTINGS_PERMISSION\");\n\n    /// @notice A mapping between proposal IDs and proposal information.\n    mapping(uint256 => Proposal) internal proposals;\n\n    /// @notice The struct storing the voting settings.\n    VotingSettings private votingSettings;\n\n    /// @notice Thrown if a date is out of bounds.\n    /// @param limit The limit value.\n    /// @param actual The actual value.\n    error DateOutOfBounds(uint64 limit, uint64 actual);\n\n    /// @notice Thrown if the minimal duration value is out of bounds (less than one hour or greater than 1 year).\n    /// @param limit The limit value.\n    /// @param actual The actual value.\n    error MinDurationOutOfBounds(uint64 limit, uint64 actual);\n\n    /// @notice Thrown when a sender is not allowed to create a proposal.\n    /// @param sender The sender address.\n    error ProposalCreationForbidden(address sender);\n\n    /// @notice Thrown if an account is not allowed to cast a vote. This can be because the vote\n    /// - has not started,\n    /// - has ended,\n    /// - was executed, or\n    /// - the account doesn't have voting powers.\n    /// @param proposalId The ID of the proposal.\n    /// @param account The address of the _account.\n    /// @param voteOption The chosen vote option.\n    error VoteCastForbidden(uint256 proposalId, address account, VoteOption voteOption);\n\n    /// @notice Thrown if the proposal execution is forbidden.\n    /// @param proposalId The ID of the proposal.\n    error ProposalExecutionForbidden(uint256 proposalId);\n\n    /// @notice Emitted when the voting settings are updated.\n    /// @param votingMode A parameter to select the vote mode.\n    /// @param supportThreshold The support threshold value.\n    /// @param minParticipation The minimum participation value.\n    /// @param minDuration The minimum duration of the proposal vote in seconds.\n    /// @param minProposerVotingPower The minimum voting power required to create a proposal.\n    event VotingSettingsUpdated(\n        VotingMode votingMode,\n        uint32 supportThreshold,\n        uint32 minParticipation,\n        uint64 minDuration,\n        uint256 minProposerVotingPower\n    );\n\n    /// @notice Initializes the component to be used by inheriting contracts.\n    /// @dev This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\n    /// @param _dao The IDAO interface of the associated DAO.\n    /// @param _votingSettings The voting settings.\n    function __MajorityVotingBase_init(\n        IDAO _dao,\n        VotingSettings calldata _votingSettings\n    ) internal onlyInitializing {\n        __PluginUUPSUpgradeable_init(_dao);\n        _updateVotingSettings(_votingSettings);\n    }\n\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\n    /// @param _interfaceId The ID of the interface.\n    /// @return Returns `true` if the interface is supported.\n    function supportsInterface(\n        bytes4 _interfaceId\n    )\n        public\n        view\n        virtual\n        override(ERC165Upgradeable, PluginUUPSUpgradeable, ProposalUpgradeable)\n        returns (bool)\n    {\n        return\n            _interfaceId == MAJORITY_VOTING_BASE_INTERFACE_ID ||\n            _interfaceId == type(IMajorityVoting).interfaceId ||\n            super.supportsInterface(_interfaceId);\n    }\n\n    /// @inheritdoc IMajorityVoting\n    function vote(\n        uint256 _proposalId,\n        VoteOption _voteOption,\n        bool _tryEarlyExecution\n    ) public virtual {\n        address account = _msgSender();\n\n        if (!_canVote(_proposalId, account, _voteOption)) {\n            revert VoteCastForbidden({\n                proposalId: _proposalId,\n                account: account,\n                voteOption: _voteOption\n            });\n        }\n        _vote(_proposalId, _voteOption, account, _tryEarlyExecution);\n    }\n\n    /// @inheritdoc IMajorityVoting\n    function execute(uint256 _proposalId) public virtual {\n        if (!_canExecute(_proposalId)) {\n            revert ProposalExecutionForbidden(_proposalId);\n        }\n        _execute(_proposalId);\n    }\n\n    /// @inheritdoc IMajorityVoting\n    function getVoteOption(\n        uint256 _proposalId,\n        address _voter\n    ) public view virtual returns (VoteOption) {\n        return proposals[_proposalId].voters[_voter];\n    }\n\n    /// @inheritdoc IMajorityVoting\n    function canVote(\n        uint256 _proposalId,\n        address _voter,\n        VoteOption _voteOption\n    ) public view virtual returns (bool) {\n        return _canVote(_proposalId, _voter, _voteOption);\n    }\n\n    /// @inheritdoc IMajorityVoting\n    function canExecute(uint256 _proposalId) public view virtual returns (bool) {\n        return _canExecute(_proposalId);\n    }\n\n    /// @inheritdoc IMajorityVoting\n    function isSupportThresholdReached(uint256 _proposalId) public view virtual returns (bool) {\n        Proposal storage proposal_ = proposals[_proposalId];\n\n        // The code below implements the formula of the support criterion explained in the top of this file.\n        // `(1 - supportThreshold) * N_yes > supportThreshold *  N_no`\n        return\n            (RATIO_BASE - proposal_.parameters.supportThreshold) * proposal_.tally.yes >\n            proposal_.parameters.supportThreshold * proposal_.tally.no;\n    }\n\n    /// @inheritdoc IMajorityVoting\n    function isSupportThresholdReachedEarly(\n        uint256 _proposalId\n    ) public view virtual returns (bool) {\n        Proposal storage proposal_ = proposals[_proposalId];\n\n        uint256 noVotesWorstCase = totalVotingPower(proposal_.parameters.snapshotBlock) -\n            proposal_.tally.yes -\n            proposal_.tally.abstain;\n\n        // The code below implements the formula of the early execution support criterion explained in the top of this file.\n        // `(1 - supportThreshold) * N_yes > supportThreshold *  N_no,worst-case`\n        return\n            (RATIO_BASE - proposal_.parameters.supportThreshold) * proposal_.tally.yes >\n            proposal_.parameters.supportThreshold * noVotesWorstCase;\n    }\n\n    /// @inheritdoc IMajorityVoting\n    function isMinParticipationReached(uint256 _proposalId) public view virtual returns (bool) {\n        Proposal storage proposal_ = proposals[_proposalId];\n\n        // The code below implements the formula of the participation criterion explained in the top of this file.\n        // `N_yes + N_no + N_abstain >= minVotingPower = minParticipation * N_total`\n        return\n            proposal_.tally.yes + proposal_.tally.no + proposal_.tally.abstain >=\n            proposal_.parameters.minVotingPower;\n    }\n\n    /// @inheritdoc IMajorityVoting\n    function supportThreshold() public view virtual returns (uint32) {\n        return votingSettings.supportThreshold;\n    }\n\n    /// @inheritdoc IMajorityVoting\n    function minParticipation() public view virtual returns (uint32) {\n        return votingSettings.minParticipation;\n    }\n\n    /// @notice Returns the minimum duration parameter stored in the voting settings.\n    /// @return The minimum duration parameter.\n    function minDuration() public view virtual returns (uint64) {\n        return votingSettings.minDuration;\n    }\n\n    /// @notice Returns the minimum voting power required to create a proposal stored in the voting settings.\n    /// @return The minimum voting power required to create a proposal.\n    function minProposerVotingPower() public view virtual returns (uint256) {\n        return votingSettings.minProposerVotingPower;\n    }\n\n    /// @notice Returns the vote mode stored in the voting settings.\n    /// @return The vote mode parameter.\n    function votingMode() public view virtual returns (VotingMode) {\n        return votingSettings.votingMode;\n    }\n\n    /// @notice Returns the total voting power checkpointed for a specific block number.\n    /// @param _blockNumber The block number.\n    /// @return The total voting power.\n    function totalVotingPower(uint256 _blockNumber) public view virtual returns (uint256);\n\n    /// @notice Returns all information for a proposal vote by its ID.\n    /// @param _proposalId The ID of the proposal.\n    /// @return open Whether the proposal is open or not.\n    /// @return executed Whether the proposal is executed or not.\n    /// @return parameters The parameters of the proposal vote.\n    /// @return tally The current tally of the proposal vote.\n    /// @return actions The actions to be executed in the associated DAO after the proposal has passed.\n    /// @return allowFailureMap The bit map representations of which actions are allowed to revert so tx still succeeds.\n    function getProposal(\n        uint256 _proposalId\n    )\n        public\n        view\n        virtual\n        returns (\n            bool open,\n            bool executed,\n            ProposalParameters memory parameters,\n            Tally memory tally,\n            IDAO.Action[] memory actions,\n            uint256 allowFailureMap\n        )\n    {\n        Proposal storage proposal_ = proposals[_proposalId];\n\n        open = _isProposalOpen(proposal_);\n        executed = proposal_.executed;\n        parameters = proposal_.parameters;\n        tally = proposal_.tally;\n        actions = proposal_.actions;\n        allowFailureMap = proposal_.allowFailureMap;\n    }\n\n    /// @notice Updates the voting settings.\n    /// @param _votingSettings The new voting settings.\n    function updateVotingSettings(\n        VotingSettings calldata _votingSettings\n    ) external virtual auth(UPDATE_VOTING_SETTINGS_PERMISSION_ID) {\n        _updateVotingSettings(_votingSettings);\n    }\n\n    /// @notice Creates a new majority voting proposal.\n    /// @param _metadata The metadata of the proposal.\n    /// @param _actions The actions that will be executed after the proposal passes.\n    /// @param _allowFailureMap Allows proposal to succeed even if an action reverts. Uses bitmap representation. If the bit at index `x` is 1, the tx succeeds even if the action at `x` failed. Passing 0 will be treated as atomic execution.\n    /// @param _startDate The start date of the proposal vote. If 0, the current timestamp is used and the vote starts immediately.\n    /// @param _endDate The end date of the proposal vote. If 0, `_startDate + minDuration` is used.\n    /// @param _voteOption The chosen vote option to be casted on proposal creation.\n    /// @param _tryEarlyExecution If `true`,  early execution is tried after the vote cast. The call does not revert if early execution is not possible.\n    /// @return proposalId The ID of the proposal.\n    function createProposal(\n        bytes calldata _metadata,\n        IDAO.Action[] calldata _actions,\n        uint256 _allowFailureMap,\n        uint64 _startDate,\n        uint64 _endDate,\n        VoteOption _voteOption,\n        bool _tryEarlyExecution\n    ) external virtual returns (uint256 proposalId);\n\n    /// @notice Internal function to cast a vote. It assumes the queried vote exists.\n    /// @param _proposalId The ID of the proposal.\n    /// @param _voteOption The chosen vote option to be casted on the proposal vote.\n    /// @param _tryEarlyExecution If `true`,  early execution is tried after the vote cast. The call does not revert if early execution is not possible.\n    function _vote(\n        uint256 _proposalId,\n        VoteOption _voteOption,\n        address _voter,\n        bool _tryEarlyExecution\n    ) internal virtual;\n\n    /// @notice Internal function to execute a vote. It assumes the queried proposal exists.\n    /// @param _proposalId The ID of the proposal.\n    function _execute(uint256 _proposalId) internal virtual {\n        proposals[_proposalId].executed = true;\n\n        _executeProposal(\n            dao(),\n            _proposalId,\n            proposals[_proposalId].actions,\n            proposals[_proposalId].allowFailureMap\n        );\n    }\n\n    /// @notice Internal function to check if a voter can vote. It assumes the queried proposal exists.\n    /// @param _proposalId The ID of the proposal.\n    /// @param _voter The address of the voter to check.\n    /// @param  _voteOption Whether the voter abstains, supports or opposes the proposal.\n    /// @return Returns `true` if the given voter can vote on a certain proposal and `false` otherwise.\n    function _canVote(\n        uint256 _proposalId,\n        address _voter,\n        VoteOption _voteOption\n    ) internal view virtual returns (bool);\n\n    /// @notice Internal function to check if a proposal can be executed. It assumes the queried proposal exists.\n    /// @param _proposalId The ID of the proposal.\n    /// @return True if the proposal can be executed, false otherwise.\n    /// @dev Threshold and minimal values are compared with `>` and `>=` comparators, respectively.\n    function _canExecute(uint256 _proposalId) internal view virtual returns (bool) {\n        Proposal storage proposal_ = proposals[_proposalId];\n\n        // Verify that the vote has not been executed already.\n        if (proposal_.executed) {\n            return false;\n        }\n\n        if (_isProposalOpen(proposal_)) {\n            // Early execution\n            if (proposal_.parameters.votingMode != VotingMode.EarlyExecution) {\n                return false;\n            }\n            if (!isSupportThresholdReachedEarly(_proposalId)) {\n                return false;\n            }\n        } else {\n            // Normal execution\n            if (!isSupportThresholdReached(_proposalId)) {\n                return false;\n            }\n        }\n        if (!isMinParticipationReached(_proposalId)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /// @notice Internal function to check if a proposal vote is still open.\n    /// @param proposal_ The proposal struct.\n    /// @return True if the proposal vote is open, false otherwise.\n    function _isProposalOpen(Proposal storage proposal_) internal view virtual returns (bool) {\n        uint64 currentTime = block.timestamp.toUint64();\n\n        return\n            proposal_.parameters.startDate <= currentTime &&\n            currentTime < proposal_.parameters.endDate &&\n            !proposal_.executed;\n    }\n\n    /// @notice Internal function to update the plugin-wide proposal vote settings.\n    /// @param _votingSettings The voting settings to be validated and updated.\n    function _updateVotingSettings(VotingSettings calldata _votingSettings) internal virtual {\n        // Require the support threshold value to be in the interval [0, 10^6-1], because `>` comparision is used in the support criterion and >100% could never be reached.\n        if (_votingSettings.supportThreshold > RATIO_BASE - 1) {\n            revert RatioOutOfBounds({\n                limit: RATIO_BASE - 1,\n                actual: _votingSettings.supportThreshold\n            });\n        }\n\n        // Require the minimum participation value to be in the interval [0, 10^6], because `>=` comparision is used in the participation criterion.\n        if (_votingSettings.minParticipation > RATIO_BASE) {\n            revert RatioOutOfBounds({limit: RATIO_BASE, actual: _votingSettings.minParticipation});\n        }\n\n        if (_votingSettings.minDuration < 60 minutes) {\n            revert MinDurationOutOfBounds({limit: 60 minutes, actual: _votingSettings.minDuration});\n        }\n\n        if (_votingSettings.minDuration > 365 days) {\n            revert MinDurationOutOfBounds({limit: 365 days, actual: _votingSettings.minDuration});\n        }\n\n        votingSettings = _votingSettings;\n\n        emit VotingSettingsUpdated({\n            votingMode: _votingSettings.votingMode,\n            supportThreshold: _votingSettings.supportThreshold,\n            minParticipation: _votingSettings.minParticipation,\n            minDuration: _votingSettings.minDuration,\n            minProposerVotingPower: _votingSettings.minProposerVotingPower\n        });\n    }\n\n    /// @notice Validates and returns the proposal vote dates.\n    /// @param _start The start date of the proposal vote. If 0, the current timestamp is used and the vote starts immediately.\n    /// @param _end The end date of the proposal vote. If 0, `_start + minDuration` is used.\n    /// @return startDate The validated start date of the proposal vote.\n    /// @return endDate The validated end date of the proposal vote.\n    function _validateProposalDates(\n        uint64 _start,\n        uint64 _end\n    ) internal view virtual returns (uint64 startDate, uint64 endDate) {\n        uint64 currentTimestamp = block.timestamp.toUint64();\n\n        if (_start == 0) {\n            startDate = currentTimestamp;\n        } else {\n            startDate = _start;\n\n            if (startDate < currentTimestamp) {\n                revert DateOutOfBounds({limit: currentTimestamp, actual: startDate});\n            }\n        }\n\n        uint64 earliestEndDate = startDate + votingSettings.minDuration; // Since `minDuration` is limited to 1 year, `startDate + minDuration` can only overflow if the `startDate` is after `type(uint64).max - minDuration`. In this case, the proposal creation will revert and another date can be picked.\n\n        if (_end == 0) {\n            endDate = earliestEndDate;\n        } else {\n            endDate = _end;\n\n            if (endDate < earliestEndDate) {\n                revert DateOutOfBounds({limit: earliestEndDate, actual: endDate});\n            }\n        }\n    }\n\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\n    uint256[47] private __gap;\n}\n"
        },
        "lib/tag-manager/lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
        },
        "lib/tag-manager/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
        },
        "lib/tag-manager/src/ITagManager.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ITagManager {\n    /// @notice Checks if an account holds a certain tag (satisfied a certain condition).\n    /// @param account The account to check with.\n    /// @param tag The tag to check for.\n    function hasTag(address account, bytes32 tag) external view returns (bool);\n}\n"
        },
        "lib/tag-manager/src/ITagManagerExtended.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ITagManager} from \"./ITagManager.sol\";\n\ninterface ITagManagerExtended is ITagManager {\n    /// @notice Checks how many accounts hold a tag.\n    /// @param tag The tag to check.\n    function totalTagHavers(bytes32 tag) external view returns (uint256);\n}\n"
        },
        "src/TagVoting.sol": {
          "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {SafeCastUpgradeable} from\r\n    \"../lib/openzeppelin-contracts-upgradeable/contracts/utils/math/SafeCastUpgradeable.sol\";\r\n\r\nimport {IMembership} from \"../lib/osx-commons/contracts/src/plugin/extensions/membership/IMembership.sol\";\r\nimport {RATIO_BASE, _applyRatioCeiled} from \"../lib/osx-commons/contracts/src/utils/math/Ratio.sol\";\r\nimport {\r\n    MajorityVotingBase,\r\n    IMajorityVoting,\r\n    IDAO\r\n} from \"../lib/osx/packages/contracts/src/plugins/governance/majority-voting/MajorityVotingBase.sol\";\r\n\r\nimport {ITagManagerExtended} from \"../lib/tag-manager/src/ITagManagerExtended.sol\";\r\n\r\n// Based on https://github.com/aragon/osx/blob/develop/packages/contracts/src/plugins/governance/majority-voting/addresslist/AddresslistVoting.sol\r\ncontract TagVoting is MajorityVotingBase, IMembership {\r\n    using SafeCastUpgradeable for uint256;\r\n\r\n    ITagManagerExtended public tagManager;\r\n    bytes32 public tag;\r\n\r\n    /// @notice Initializes the component.\r\n    /// @dev This method is required to support [ERC-1822](https://eips.ethereum.org/EIPS/eip-1822).\r\n    /// @param _dao The IDAO interface of the associated DAO.\r\n    /// @param _votingSettings The voting settings.\r\n    /// @param _tagManager The tag manager contract to query for tag having.\r\n    /// @param _tag The tag that an account needs to have to be allowed to vote.\r\n    function initialize(\r\n        IDAO _dao,\r\n        VotingSettings calldata _votingSettings,\r\n        ITagManagerExtended _tagManager,\r\n        bytes32 _tag\r\n    ) external initializer {\r\n        __MajorityVotingBase_init(_dao, _votingSettings);\r\n        tagManager = _tagManager;\r\n        tag = _tag;\r\n    }\r\n\r\n    /// @inheritdoc MajorityVotingBase\r\n    function totalVotingPower(uint256 _blockNumber) public view override returns (uint256) {\r\n        (_blockNumber);\r\n        // Real time updated instead of based on proposal creation (block).\r\n        // In case the total tag havers decrease during a proposal, this means that the early execution threshold is higher than expected (/ required).\r\n        return tagManager.totalTagHavers(tag);\r\n    }\r\n\r\n    /// @inheritdoc MajorityVotingBase\r\n    function createProposal(\r\n        bytes calldata _metadata,\r\n        IDAO.Action[] calldata _actions,\r\n        uint256 _allowFailureMap,\r\n        uint64 _startDate,\r\n        uint64 _endDate,\r\n        VoteOption _voteOption,\r\n        bool _tryEarlyExecution\r\n    ) external override returns (uint256 proposalId) {\r\n        if (minProposerVotingPower() != 0 && !hasTag(_msgSender())) {\r\n            revert ProposalCreationForbidden(_msgSender());\r\n        }\r\n\r\n        uint64 snapshotBlock;\r\n        unchecked {\r\n            snapshotBlock = block.number.toUint64() - 1; // The snapshot block must be mined already to protect the transaction against backrunning transactions causing census changes.\r\n        }\r\n\r\n        (_startDate, _endDate) = _validateProposalDates(_startDate, _endDate);\r\n\r\n        proposalId = _createProposal({\r\n            _creator: _msgSender(),\r\n            _metadata: _metadata,\r\n            _startDate: _startDate,\r\n            _endDate: _endDate,\r\n            _actions: _actions,\r\n            _allowFailureMap: _allowFailureMap\r\n        });\r\n\r\n        // Store proposal related information\r\n        Proposal storage proposal_ = proposals[proposalId];\r\n\r\n        proposal_.parameters.startDate = _startDate;\r\n        proposal_.parameters.endDate = _endDate;\r\n        proposal_.parameters.snapshotBlock = snapshotBlock;\r\n        proposal_.parameters.votingMode = votingMode();\r\n        proposal_.parameters.supportThreshold = supportThreshold();\r\n        proposal_.parameters.minVotingPower = _applyRatioCeiled(totalVotingPower(snapshotBlock), minParticipation());\r\n\r\n        // Reduce costs\r\n        if (_allowFailureMap != 0) {\r\n            proposal_.allowFailureMap = _allowFailureMap;\r\n        }\r\n\r\n        for (uint256 i; i < _actions.length;) {\r\n            proposal_.actions.push(_actions[i]);\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        if (_voteOption != VoteOption.None) {\r\n            vote(proposalId, _voteOption, _tryEarlyExecution);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc IMembership\r\n    function isMember(address _account) external view override returns (bool) {\r\n        return hasTag(_account);\r\n    }\r\n\r\n    /// @inheritdoc MajorityVotingBase\r\n    function _vote(uint256 _proposalId, VoteOption _voteOption, address _voter, bool _tryEarlyExecution)\r\n        internal\r\n        override\r\n    {\r\n        Proposal storage proposal_ = proposals[_proposalId];\r\n\r\n        VoteOption state = proposal_.voters[_voter];\r\n\r\n        // Remove the previous vote.\r\n        if (state == VoteOption.Yes) {\r\n            proposal_.tally.yes = proposal_.tally.yes - 1;\r\n        } else if (state == VoteOption.No) {\r\n            proposal_.tally.no = proposal_.tally.no - 1;\r\n        } else if (state == VoteOption.Abstain) {\r\n            proposal_.tally.abstain = proposal_.tally.abstain - 1;\r\n        }\r\n\r\n        // Store the updated/new vote for the voter.\r\n        if (_voteOption == VoteOption.Yes) {\r\n            proposal_.tally.yes = proposal_.tally.yes + 1;\r\n        } else if (_voteOption == VoteOption.No) {\r\n            proposal_.tally.no = proposal_.tally.no + 1;\r\n        } else if (_voteOption == VoteOption.Abstain) {\r\n            proposal_.tally.abstain = proposal_.tally.abstain + 1;\r\n        }\r\n\r\n        proposal_.voters[_voter] = _voteOption;\r\n\r\n        emit VoteCast({proposalId: _proposalId, voter: _voter, voteOption: _voteOption, votingPower: 1});\r\n\r\n        if (_tryEarlyExecution && _canExecute(_proposalId)) {\r\n            _execute(_proposalId);\r\n        }\r\n    }\r\n\r\n    /// @inheritdoc MajorityVotingBase\r\n    function _canVote(uint256 _proposalId, address _account, VoteOption _voteOption)\r\n        internal\r\n        view\r\n        override\r\n        returns (bool)\r\n    {\r\n        Proposal storage proposal_ = proposals[_proposalId];\r\n\r\n        // The proposal vote hasn't started or has already ended.\r\n        if (!_isProposalOpen(proposal_)) {\r\n            return false;\r\n        }\r\n\r\n        // The voter votes `None` which is not allowed.\r\n        if (_voteOption == VoteOption.None) {\r\n            return false;\r\n        }\r\n\r\n        // The voter has no voting power.\r\n        if (!hasTag(_account)) {\r\n            return false;\r\n        }\r\n\r\n        // The voter has already voted but vote replacement is not allowed.\r\n        if (\r\n            proposal_.voters[_account] != VoteOption.None\r\n                && proposal_.parameters.votingMode != VotingMode.VoteReplacement\r\n        ) {\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    function hasTag(address _account) internal view returns (bool) {\r\n        return tagManager.hasTag(_account, tag);\r\n    }\r\n\r\n    /// @dev This empty reserved space is put in place to allow future versions to add new\r\n    /// variables without shifting down storage in the inheritance chain.\r\n    /// https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\r\n    uint256[50] private __gap;\r\n}\r\n"
        },
        "src/TagVotingSetup.sol": {
          "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IDAO} from \"../lib/osx-commons/contracts/src/dao/IDAO.sol\";\r\nimport {PermissionLib} from \"../lib/osx-commons/contracts/src/permission/PermissionLib.sol\";\r\nimport {\r\n    PluginUpgradeableSetup,\r\n    IPluginSetup\r\n} from \"../lib/osx-commons/contracts/src/plugin/setup/PluginUpgradeableSetup.sol\";\r\nimport {ERC1967Proxy} from \"../lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Proxy.sol\";\r\nimport {TagVoting, ITagManagerExtended, MajorityVotingBase} from \"./TagVoting.sol\";\r\n\r\n// From https://github.com/aragon/osx/blob/develop/packages/contracts/src/core/dao/DAO.sol\r\n// Getting this contract to compile just for this constant is not worth the effort.\r\nbytes32 constant EXECUTE_PERMISSION_ID = keccak256(\"EXECUTE_PERMISSION\");\r\n\r\n// Based on https://github.com/aragon/osx/blob/develop/packages/contracts/src/plugins/governance/majority-voting/addresslist/AddresslistVotingSetup.sol\r\ncontract TagVotingSetup is PluginUpgradeableSetup {\r\n    /// @notice The contract constructor, that deploys the `TagVoting` plugin logic contract.\r\n    constructor() PluginUpgradeableSetup(address(new TagVoting())) {}\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function prepareInstallation(address _dao, bytes calldata _data)\r\n        external\r\n        returns (address plugin, PreparedSetupData memory preparedSetupData)\r\n    {\r\n        // Decode `_data` to extract the params needed for deploying and initializing `TagVoting` plugin.\r\n        (MajorityVotingBase.VotingSettings memory votingSettings, ITagManagerExtended tagManager, bytes32 tag) =\r\n            abi.decode(_data, (MajorityVotingBase.VotingSettings, ITagManagerExtended, bytes32));\r\n\r\n        // Prepare and Deploy the plugin proxy.\r\n        plugin = address(\r\n            new ERC1967Proxy(\r\n                IMPLEMENTATION,\r\n                abi.encodeWithSelector(TagVoting.initialize.selector, _dao, votingSettings, tagManager, tag)\r\n            )\r\n        );\r\n\r\n        // Prepare permissions\r\n        PermissionLib.MultiTargetPermission[] memory permissions = new PermissionLib.MultiTargetPermission[](3);\r\n\r\n        // Set permissions to be granted.\r\n        // Grant the list of permissions of the plugin to the DAO.\r\n        permissions[0] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            TagVoting(IMPLEMENTATION).UPDATE_VOTING_SETTINGS_PERMISSION_ID()\r\n        );\r\n\r\n        permissions[1] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant,\r\n            plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            TagVoting(IMPLEMENTATION).UPGRADE_PLUGIN_PERMISSION_ID()\r\n        );\r\n\r\n        // Grant `EXECUTE_PERMISSION` of the DAO to the plugin.\r\n        permissions[2] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Grant, _dao, plugin, PermissionLib.NO_CONDITION, EXECUTE_PERMISSION_ID\r\n        );\r\n\r\n        preparedSetupData.permissions = permissions;\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function prepareUninstallation(address _dao, SetupPayload calldata _payload)\r\n        external\r\n        view\r\n        returns (PermissionLib.MultiTargetPermission[] memory permissions)\r\n    {\r\n        // Prepare permissions\r\n        permissions = new PermissionLib.MultiTargetPermission[](3);\r\n\r\n        // Set permissions to be Revoked.\r\n        permissions[0] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _payload.plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            TagVoting(IMPLEMENTATION).UPDATE_VOTING_SETTINGS_PERMISSION_ID()\r\n        );\r\n\r\n        permissions[1] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke,\r\n            _payload.plugin,\r\n            _dao,\r\n            PermissionLib.NO_CONDITION,\r\n            TagVoting(IMPLEMENTATION).UPGRADE_PLUGIN_PERMISSION_ID()\r\n        );\r\n\r\n        permissions[2] = PermissionLib.MultiTargetPermission(\r\n            PermissionLib.Operation.Revoke, _dao, _payload.plugin, PermissionLib.NO_CONDITION, EXECUTE_PERMISSION_ID\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc IPluginSetup\r\n    function prepareUpdate(address _dao, uint16 _fromBuild, SetupPayload calldata _payload)\r\n        external\r\n        returns (bytes memory initData, PreparedSetupData memory preparedSetupData)\r\n    {\r\n        // V1\r\n    }\r\n}\r\n"
        }
      },
      "settings": {
        "remappings": [
          "@aragon/osx-commons-contracts/=lib/osx-commons/contracts/",
          "@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/",
          "@openzeppelin/contracts/=lib/tag-manager/lib/openzeppelin-contracts/contracts/",
          "ds-test/=lib/openzeppelin-contracts-upgradeable/lib/forge-std/lib/ds-test/src/",
          "ens-reverse-claimable/=lib/tag-manager/lib/ens-reverse-claimable/src/",
          "erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/",
          "openzeppelin-contracts/=lib/openzeppelin-contracts/",
          "openzeppelin/=lib/openzeppelin-contracts-upgradeable/contracts/",
          "osx-commons/=lib/osx-commons/",
          "osx/=lib/osx/",
          "tag-manager/=lib/tag-manager/src/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "shanghai",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/openmesh-smart-contracts/lib/aragon-tag-voting",
  "submitted": {
    "transactionHash": "0x4cf86c4564a1e6d6107603a5a47203d10d36d8f124de51bf9988de7e14eacadc",
    "date": "2024-04-15T18:32:44.947Z"
  }
}
