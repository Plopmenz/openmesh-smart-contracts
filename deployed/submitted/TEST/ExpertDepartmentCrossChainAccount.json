{"type":"deployment","id":"ExpertDepartmentCrossChainAccount","batch":"TEST","batchIndex":40,"deploymentAddress":"0x0755D32c18eab4E1A60BfCf6918b68831547dC22","constructorArgs":["0x0BF3dE8c5D3e8A2B34D2BEeB17ABfCeBaf363A59","12532609583862916517","0x875497BBa10de19eC4430BdBd1204FFB8C3aD635"],"to":"0x4e59b44847b379578588920ca78fbf26c0b4956c","value":"0","data":"0x00000000000000000000000000000000000000004f50454e4d4553485445535460e0346100d1576001600160401b03601f61076638819003918201601f1916840191838311858410176100d6578085926060946040528339810103126100d157610048826100ec565b91602081015191821682036100d157604061006391016100ec565b916001600160a01b038116156100b85760805260a05260c0526040516106659081610101823960805181818160fa0152610169015260a051818181607b015261026c015260c05181818160b701526102b40152f35b6040516335fdcccd60e21b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100d15756fe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a7146104e65750816385572ffb1461012957508063b0f479a1146100e6578063b13f7006146100a35763e655c35e1461005c57600080fd5b3461009f578160031936011261009f576020905167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b503461009f578160031936011261009f57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461009f578160031936011261009f57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346104e25760206003199181833601126104de57803567ffffffffffffffff938482116104da5760a09082360301126104d6576001600160a01b03907f0000000000000000000000000000000000000000000000000000000000000000821633036104c05785519260a08401848110878211176104ad57875281810135845260248083013587811681036103eb5786860190815260448401358881116104a9576101da90843691870101610591565b9089870191825260648501358981116104a1576101fc90853691880101610591565b94606088019586526084810135908a82116104a55701366023820112156104a15784810135908a821161048f576102378a8360051b01610539565b91858b84838152019160061b8301019136831161048b5790868d9594939201905b8282106104275750505060808901525116887f0000000000000000000000000000000000000000000000000000000000000000169081810361040c5750505186818051810103126103eb576102af878692016105d3565b1690847f000000000000000000000000000000000000000000000000000000000000000016918281036103f35750505050519485518601926060878686019503126103ef576102ff8588016105d3565b95828801519760608101519182116103eb57019584603f880112156103e757858701519661033461032f89610575565b610539565b908882528a88830197868b840101116103e457806103d6976103c1956103807fbc11e91af67097b25ab78f8b93b5aaa2c3a9294d1a617128347a257d787fbb379d8c8b60a098016105e7565b16988451908d8b5af1943d156103dc573d9461039e61032f87610575565b9586523d8d8b88013e5b519a8151998a998a5289015287015260a086019061060a565b9115156060850152838203608085015261060a565b0390a280f35b6060946103a8565b80fd5b8880fd5b8980fd5b8780fd5b895163d53a5c0960e01b81529384015282015260449150fd5b6044918486928d51936315a5913960e21b8552840152820152fd5b9091929394508d8236031261048b578d5190818f018e811183821017610477578f528235908b82168203610472578f928e928152828501358382015281520191018c94939291610258565b508f80fd5b5050634e487b7160e01b8f5260418852868ffd5b8e80fd5b634e487b7160e01b8d5260418652848dfd5b8b80fd5b8c80fd5b8a80fd5b634e487b7160e01b895260418252602489fd5b85516335fdcccd60e21b81523381850152602490fd5b8580fd5b8680fd5b8480fd5b8280fd5b8491346104e25760203660031901126104e2573563ffffffff60e01b81168091036104e257602092506385572ffb60e01b8114908115610528575b5015158152f35b6301ffc9a760e01b14905083610521565b6040519190601f01601f1916820167ffffffffffffffff81118382101761055f57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161055f57601f01601f191660200190565b81601f820112156105ce578035906105ab61032f83610575565b92828452602083830101116105ce57816000926020809301838601378301015290565b600080fd5b51906001600160a01b03821682036105ce57565b60005b8381106105fa5750506000910152565b81810151838201526020016105ea565b90602091610623815180928185528580860191016105e7565b601f01601f191601019056fea26469706673582212201978165fed8f4eb497ec6af0f26319d2c8daf31fce04e536053e6da4beb00e1164736f6c634300081700330000000000000000000000000bf3de8c5d3e8a2b34d2beeb17abfcebaf363a59000000000000000000000000000000000000000000000000adecc60412ce25a5000000000000000000000000875497bba10de19ec4430bdbd1204ffb8c3ad635","gas":"416246","from":"0xaF7E68bCb2Fc7295492A00177f14F59B92814e70","transactionSettings":{"chainId":11155111,"nonce":"129","baseFee":"1000000000","priorityFee":"1000000000"},"salt":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OPENMESHTEST","artifact":{"abi":[{"type":"constructor","inputs":[{"name":"_router","type":"address","internalType":"address"},{"name":"_allowedOriginChainSelector","type":"uint64","internalType":"uint64"},{"name":"_allowedOriginAddress","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"allowedOriginAddress","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"allowedOriginChainSelector","inputs":[],"outputs":[{"name":"","type":"uint64","internalType":"uint64"}],"stateMutability":"view"},{"type":"function","name":"ccipReceive","inputs":[{"name":"message","type":"tuple","internalType":"struct Client.Any2EVMMessage","components":[{"name":"messageId","type":"bytes32","internalType":"bytes32"},{"name":"sourceChainSelector","type":"uint64","internalType":"uint64"},{"name":"sender","type":"bytes","internalType":"bytes"},{"name":"data","type":"bytes","internalType":"bytes"},{"name":"destTokenAmounts","type":"tuple[]","internalType":"struct Client.EVMTokenAmount[]","components":[{"name":"token","type":"address","internalType":"address"},{"name":"amount","type":"uint256","internalType":"uint256"}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getRouter","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"pure"},{"type":"event","name":"Executed","inputs":[{"name":"messageId","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"to","type":"address","indexed":false,"internalType":"address"},{"name":"value","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"data","type":"bytes","indexed":false,"internalType":"bytes"},{"name":"success","type":"bool","indexed":false,"internalType":"bool"},{"name":"returnValue","type":"bytes","indexed":false,"internalType":"bytes"}],"anonymous":false},{"type":"error","name":"InvalidOriginAddress","inputs":[{"name":"received","type":"address","internalType":"address"},{"name":"expected","type":"address","internalType":"address"}]},{"type":"error","name":"InvalidOriginChainSelector","inputs":[{"name":"received","type":"uint64","internalType":"uint64"},{"name":"expected","type":"uint64","internalType":"uint64"}]},{"type":"error","name":"InvalidRouter","inputs":[{"name":"router","type":"address","internalType":"address"}]}],"bytecode":"0x60e0346100d1576001600160401b03601f61076638819003918201601f1916840191838311858410176100d6578085926060946040528339810103126100d157610048826100ec565b91602081015191821682036100d157604061006391016100ec565b916001600160a01b038116156100b85760805260a05260c0526040516106659081610101823960805181818160fa0152610169015260a051818181607b015261026c015260c05181818160b701526102b40152f35b6040516335fdcccd60e21b815260006004820152602490fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100d15756fe608060408181526004918236101561001657600080fd5b600092833560e01c91826301ffc9a7146104e65750816385572ffb1461012957508063b0f479a1146100e6578063b13f7006146100a35763e655c35e1461005c57600080fd5b3461009f578160031936011261009f576020905167ffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b503461009f578160031936011261009f57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461009f578160031936011261009f57517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b9050346104e25760206003199181833601126104de57803567ffffffffffffffff938482116104da5760a09082360301126104d6576001600160a01b03907f0000000000000000000000000000000000000000000000000000000000000000821633036104c05785519260a08401848110878211176104ad57875281810135845260248083013587811681036103eb5786860190815260448401358881116104a9576101da90843691870101610591565b9089870191825260648501358981116104a1576101fc90853691880101610591565b94606088019586526084810135908a82116104a55701366023820112156104a15784810135908a821161048f576102378a8360051b01610539565b91858b84838152019160061b8301019136831161048b5790868d9594939201905b8282106104275750505060808901525116887f0000000000000000000000000000000000000000000000000000000000000000169081810361040c5750505186818051810103126103eb576102af878692016105d3565b1690847f000000000000000000000000000000000000000000000000000000000000000016918281036103f35750505050519485518601926060878686019503126103ef576102ff8588016105d3565b95828801519760608101519182116103eb57019584603f880112156103e757858701519661033461032f89610575565b610539565b908882528a88830197868b840101116103e457806103d6976103c1956103807fbc11e91af67097b25ab78f8b93b5aaa2c3a9294d1a617128347a257d787fbb379d8c8b60a098016105e7565b16988451908d8b5af1943d156103dc573d9461039e61032f87610575565b9586523d8d8b88013e5b519a8151998a998a5289015287015260a086019061060a565b9115156060850152838203608085015261060a565b0390a280f35b6060946103a8565b80fd5b8880fd5b8980fd5b8780fd5b895163d53a5c0960e01b81529384015282015260449150fd5b6044918486928d51936315a5913960e21b8552840152820152fd5b9091929394508d8236031261048b578d5190818f018e811183821017610477578f528235908b82168203610472578f928e928152828501358382015281520191018c94939291610258565b508f80fd5b5050634e487b7160e01b8f5260418852868ffd5b8e80fd5b634e487b7160e01b8d5260418652848dfd5b8b80fd5b8c80fd5b8a80fd5b634e487b7160e01b895260418252602489fd5b85516335fdcccd60e21b81523381850152602490fd5b8580fd5b8680fd5b8480fd5b8280fd5b8491346104e25760203660031901126104e2573563ffffffff60e01b81168091036104e257602092506385572ffb60e01b8114908115610528575b5015158152f35b6301ffc9a760e01b14905083610521565b6040519190601f01601f1916820167ffffffffffffffff81118382101761055f57604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff811161055f57601f01601f191660200190565b81601f820112156105ce578035906105ab61032f83610575565b92828452602083830101116105ce57816000926020809301838601378301015290565b600080fd5b51906001600160a01b03821682036105ce57565b60005b8381106105fa5750506000910152565b81810151838201526020016105ea565b90602091610623815180928185528580860191016105e7565b601f01601f191601019056fea26469706673582212201978165fed8f4eb497ec6af0f26319d2c8daf31fce04e536053e6da4beb00e1164736f6c63430008170033","compiler":{"version":"v0.8.23+commit.f704f362"},"contractName":"src/CrossChainAccount.sol:CrossChainAccount","license":"MIT","jsonDescription":{"language":"Solidity","sources":{"lib/ccip/CCIPReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IAny2EVMMessageReceiver} from \"./IAny2EVMMessageReceiver.sol\";\n\nimport {Client} from \"./Client.sol\";\n\nimport {IERC165} from \"../openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\";\n\n/// @title CCIPReceiver - Base contract for CCIP applications that can receive messages.\nabstract contract CCIPReceiver is IAny2EVMMessageReceiver, IERC165 {\n    address internal immutable i_router;\n\n    constructor(address router) {\n        if (router == address(0)) revert InvalidRouter(address(0));\n        i_router = router;\n    }\n\n    /// @notice IERC165 supports an interfaceId\n    /// @param interfaceId The interfaceId to check\n    /// @return true if the interfaceId is supported\n    /// @dev Should indicate whether the contract implements IAny2EVMMessageReceiver\n    /// e.g. return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId\n    /// This allows CCIP to check if ccipReceive is available before calling it.\n    /// If this returns false or reverts, only tokens are transferred to the receiver.\n    /// If this returns true, tokens are transferred and ccipReceive is called atomically.\n    /// Additionally, if the receiver address does not have code associated with\n    /// it at the time of execution (EXTCODESIZE returns 0), only tokens will be transferred.\n    function supportsInterface(bytes4 interfaceId) public pure virtual override returns (bool) {\n        return interfaceId == type(IAny2EVMMessageReceiver).interfaceId || interfaceId == type(IERC165).interfaceId;\n    }\n\n    /// @inheritdoc IAny2EVMMessageReceiver\n    function ccipReceive(Client.Any2EVMMessage calldata message) external virtual override onlyRouter {\n        _ccipReceive(message);\n    }\n\n    /// @notice Override this function in your implementation.\n    /// @param message Any2EVMMessage\n    function _ccipReceive(Client.Any2EVMMessage memory message) internal virtual;\n\n    /////////////////////////////////////////////////////////////////////\n    // Plumbing\n    /////////////////////////////////////////////////////////////////////\n\n    /// @notice Return the current router\n    /// @return i_router address\n    function getRouter() public view returns (address) {\n        return address(i_router);\n    }\n\n    error InvalidRouter(address router);\n\n    /// @dev only calls from the set router are accepted.\n    modifier onlyRouter() {\n        if (msg.sender != address(i_router)) revert InvalidRouter(msg.sender);\n        _;\n    }\n}\n"},"lib/ccip/Client.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// End consumer library.\nlibrary Client {\n    /// @dev RMN depends on this struct, if changing, please notify the RMN maintainers.\n    struct EVMTokenAmount {\n        address token; // token address on the local chain.\n        uint256 amount; // Amount of tokens.\n    }\n\n    struct Any2EVMMessage {\n        bytes32 messageId; // MessageId corresponding to ccipSend on source.\n        uint64 sourceChainSelector; // Source chain selector.\n        bytes sender; // abi.decode(sender) if coming from an EVM chain.\n        bytes data; // payload sent in original message.\n        EVMTokenAmount[] destTokenAmounts; // Tokens and their amounts in their destination chain representation.\n    }\n\n    // If extraArgs is empty bytes, the default is 200k gas limit.\n    struct EVM2AnyMessage {\n        bytes receiver; // abi.encode(receiver address) for dest EVM chains\n        bytes data; // Data payload\n        EVMTokenAmount[] tokenAmounts; // Token transfers\n        address feeToken; // Address of feeToken. address(0) means you will send msg.value.\n        bytes extraArgs; // Populate this with _argsToBytes(EVMExtraArgsV1)\n    }\n\n    // bytes4(keccak256(\"CCIP EVMExtraArgsV1\"));\n    bytes4 public constant EVM_EXTRA_ARGS_V1_TAG = 0x97a657c9;\n\n    struct EVMExtraArgsV1 {\n        uint256 gasLimit;\n    }\n\n    function _argsToBytes(EVMExtraArgsV1 memory extraArgs) internal pure returns (bytes memory bts) {\n        return abi.encodeWithSelector(EVM_EXTRA_ARGS_V1_TAG, extraArgs);\n    }\n}\n"},"lib/ccip/IAny2EVMMessageReceiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Client} from \"./Client.sol\";\n\n/// @notice Application contracts that intend to receive messages from\n/// the router should implement this interface.\ninterface IAny2EVMMessageReceiver {\n    /// @notice Called by the Router to deliver a message.\n    /// If this reverts, any token transfers also revert. The message\n    /// will move to a FAILED state and become available for manual execution.\n    /// @param message CCIP Message\n    /// @dev Note ensure you check the msg.sender is the OffRampRouter\n    function ccipReceive(Client.Any2EVMMessage calldata message) external;\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"src/CrossChainAccount.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {CCIPReceiver, Client} from \"../lib/ccip/CCIPReceiver.sol\";\n\ncontract CrossChainAccount is CCIPReceiver {\n    error InvalidOriginChainSelector(uint64 received, uint64 expected);\n    error InvalidOriginAddress(address received, address expected);\n\n    event Executed(bytes32 indexed messageId, address to, uint256 value, bytes data, bool success, bytes returnValue);\n\n    uint64 public immutable allowedOriginChainSelector;\n    address public immutable allowedOriginAddress;\n\n    constructor(address _router, uint64 _allowedOriginChainSelector, address _allowedOriginAddress)\n        CCIPReceiver(_router)\n    {\n        allowedOriginChainSelector = _allowedOriginChainSelector;\n        allowedOriginAddress = _allowedOriginAddress;\n    }\n\n    /// @inheritdoc CCIPReceiver\n    function _ccipReceive(Client.Any2EVMMessage memory message) internal override {\n        _ensureOriginChainSelectorAllowed(message.sourceChainSelector);\n        _ensureOriginAddressAllowed(abi.decode(message.sender, (address)));\n        (address to, uint256 value, bytes memory data) = abi.decode(message.data, (address, uint256, bytes));\n        (bool success, bytes memory returnValue) = to.call{value: value}(data);\n        emit Executed(message.messageId, to, value, data, success, returnValue);\n    }\n\n    /// Rejects any messages originating from a different origin chain than the allowed one.\n    function _ensureOriginChainSelectorAllowed(uint64 _originChainSelector) internal view {\n        if (_originChainSelector != allowedOriginChainSelector) {\n            revert InvalidOriginChainSelector(_originChainSelector, allowedOriginChainSelector);\n        }\n    }\n\n    /// Rejects any messages originating from a different sender (on the origin chain) than the allowed one.\n    function _ensureOriginAddressAllowed(address _originAddress) internal view {\n        if (_originAddress != allowedOriginAddress) {\n            revert InvalidOriginAddress(_originAddress, allowedOriginAddress);\n        }\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"remappings":["@layerzerolabs/lz-evm-protocol-v2/contracts/=lib/LayerZero-v2/protocol/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ccip/=lib/ccip/","ds-test/=lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"evmVersion":"paris","metadata":{"useLiteralContent":true}}},"source":"/home/plopmenz/openmesh-smart-contracts/lib/crosschain-account","submitted":{"transactionHash":"0xcc00b1c03a0eb1e743b715c171061bac3f3e4d5daa5d075f84058850952453eb","date":"2024-03-27T19:45:40.499Z"}}