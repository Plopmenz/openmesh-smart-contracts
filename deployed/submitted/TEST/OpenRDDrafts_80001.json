{"type":"deployment","id":"OpenRDDrafts_80001","batch":"TEST","batchIndex":4,"deploymentAddress":"0x959e14f6a3522Ab193e1282964b532a05A43F780","constructorArgs":["0xeF699CA61f04916358e446bA0DbB9C6Ab9F86A5C"],"to":"0x4e59b44847b379578588920ca78fbf26c0b4956c","value":"0","data":"0x00000000000000000000000000000000000000004f50454e4d4553485445535460a03461006a57601f610dd638819003918201601f19168301916001600160401b0383118484101761006f5780849260209460405283398101031261006a57516001600160a01b038116810361006a57608052604051610d5090816100868239608051816103960152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a71461089c57508063466e1809146108615780635711c7d51461081a5780638da5cb5b146107eb578063d4e5f4bd146100be5763d8de10661461006157600080fd5b346100b95760403660031901126100b9576004356001600160a01b038116908190036100b95733600052600060205260406000209060018201906001600160601b0360a01b8254161790556002602435910155600080f35b600080fd5b346100b95760031960a0368201126100b9576100d86108ef565b6001600160401b03602435116100b9573660236024350112156100b9576001600160401b0360243560040135116100b95736602480356004013581350101116100b9576044356001600160401b03811681036100b957606435926001600160401b03841684036100b9576001600160401b03608435116100b95760e090608435360301126100b95760018060a01b038216600052600060205260406000209260026040519461018686610919565b80546001600160a01b0390811687526001820154166020870152015460408501526101af610955565b906022196084353603016084356004013512156100b9576084356004013560843501926001600160401b036004850135116100b9576004840135360360248501136100b957608435602401356001600160401b03811690036100b9576102196044608435016109bc565b6102276064608435016109bc565b9460843560a4810135903603602219018112156100b9576001600160401b03600482608435010135116100b9576084358101600481013560061b36036024909101136100b95760221960843536030160c4608435013512156100b95760843560c4810135016001600160401b036004820135116100b957600481013560051b360360248201136100b95761033a61036394610355936102ed9a6040519b8c97637e19374560e01b60208a015260c060248a015260e48901906024600482013591016109d0565b608480356024818101356001600160401b031660448c01526001600160a01b0396871660648c015293909516908901528781036023190160a4890152929190910160048101359101610a05565b8381036023190160c485015290600481013590602401610aa3565b03601f198101865285610934565b6084803501356001600160601b03811690036100b957610471600093610444926104f5966040519061039482610919565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031682526084803501356001600160601b0316602083015260408201526103e283610c3e565b526103ec82610c3e565b506001600160401b036103fd610955565b958160405196879563c907c0df60e01b602088015260e0602488015261043261010488016024356004013560248035016109d0565b87810360231901604489015290610c84565b938960648701521660848501521660a48301528560c48301528560e483015203601f198101835282610934565b855160405191906001600160a01b031661048a83610919565b825283602083015260408201526104a082610c3e565b526104aa81610c3e565b5060018060a01b0360208601511660408601518360405180968195829463dabdb38960e01b845260018060a01b038b1660048501526024840152608060448401526084830190610c84565b82606483015203925af180156107df57600090610699575b6105179150610c3e565b516020818051810103126100b957602001519151604051606081526001600160a01b0391909116926004608435818101350190810135906024016001600160401b0382116100b95781360381136100b95761057e9160e060608601526101408501916109d0565b60843560248101356001600160401b031660808501529093906001600160a01b03906105ac90604401610905565b1660a08401526001600160a01b036105c8608435606401610905565b1660c08401526001600160601b036105e360848035016109f1565b1660e084015261061561060060a460843501608435600401610a6f565b605f1986880381016101008801529691610a05565b9160843560c460843501350194602460048701359601936001600160401b0387116100b9578660051b360385136100b9577f23b577bf6471645fa9c2aee690cbe726fa442a860022679b5b130391729062f796869561067d9387840301610120880152610aa3565b602084019690965260408301526001600160a01b0316930390a2005b503d90816000823e6106ab8282610934565b60408183810103126100b9578051916001600160401b0383116100b957808201601f8484010112156100b95782820151926001600160401b0384116107c9578360051b91604051946107006020850187610934565b855260208501908085016020858588010101116100b957602083860101915b6020858588010101831061073c575050505050506105179061050d565b82516001600160401b0381116100b957828701603f82878a01010112156100b9576020818689010101516001600160401b0381116107c9576040519261078c601f8301601f191660200185610934565b818452848901604083858a8d01010101116100b957836107bc602095938b604088978c8980990193010101610c61565b815201930192905061071f565b634e487b7160e01b600052604160045260246000fd5b6040513d6000823e3d90fd5b346100b95760003660031901126100b957602060405173b4e54a5b6b80afdb5dc4b5d8c1c66b75ff75fcae8152f35b346100b95760203660031901126100b9576108336108ef565b33600090815260208190526040902080546001600160a01b0319166001600160a01b03909216919091179055005b346100b95760203660031901126100b95760206001600160a01b03806108856108ef565b166000526000825260406000205416604051908152f35b346100b95760203660031901126100b9576004359063ffffffff60e01b82168092036100b957602091631d443b0760e01b81149081156108de575b5015158152f35b6301ffc9a760e01b149050836108d7565b600435906001600160a01b03821682036100b957565b35906001600160a01b03821682036100b957565b606081019081106001600160401b038211176107c957604052565b90601f801991011681019081106001600160401b038211176107c957604052565b60409060405191604083018381106001600160401b038211176107c95760405260018352829160009160005b6020808210156109b35782516020929161099a82610919565b8682528681830152606085830152828901015201610981565b50505091925050565b356001600160a01b03811681036100b95790565b908060209392818452848401376000828201840152601f01601f1916010190565b35906001600160601b03821682036100b957565b91818152602080910192916000916000905b828210610a2657505050505090565b9091929394853560018060a01b038116809103610a6b5781526001906001600160601b03610a558885016109f1565b1681840152604090810196019493920190610a17565b8580fd5b9035601e19823603018112156100b95701602081359101916001600160401b0382116100b9578160061b360383136100b957565b9082818152602080910193818360051b82010194846000925b858410610acd575050505050505090565b90919293949596601f198282030184528735605e19843603018112156100b95760608281019291850191906001600160a01b0380610b0a85610905565b168352610b198a850185610a6f565b809196848d870152526080840195906000905b808210610c035750505060409384810135601e19823603018112156100b95701928a84359401956001600160401b0385116100b957838502360387136100b9578082878e9896948994989698039101528381520195936000935b838510610ba85750505050505080600192990194019401929594939190610abc565b9193955091939586358015158091036100b957815282610bc98d8901610905565b168c82015281870135906affffffffffffffffffffff82168092036100b9578481600193858394015201970195019290918b959492610b86565b90919660019084610c138a610905565b1681528d6001600160601b03610c2a828c016109f1565b169082015260408091019801920190610b2c565b805115610c4b5760200190565b634e487b7160e01b600052603260045260246000fd5b60005b838110610c745750506000910152565b8181015183820152602001610c64565b908082519081815260208091019281808460051b8301019501936000915b848310610cb25750505050505090565b9091929394958480600192601f1990818682030187528a5191601f6060878060a01b0385511684528585015186850152806040809601519585015284518091850152610d0681608096888888019101610c61565b011601019801930193019194939290610ca256fea2646970667358221220e75ab15088f5c0a3f7181e4647d3677c74261ccf15ee46f9ece6d2d4382a3c4164736f6c63430008170033000000000000000000000000ef699ca61f04916358e446ba0dbb9c6ab9f86a5c","gas":"803572","from":"0xaF7E68bCb2Fc7295492A00177f14F59B92814e70","transactionSettings":{"chainId":80001,"nonce":"585","baseFee":"1500000000","priorityFee":"1500000000"},"salt":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OPENMESHTEST","artifact":{"abi":[{"type":"constructor","inputs":[{"name":"_tasks","type":"address","internalType":"contract ITasks"}],"stateMutability":"nonpayable"},{"type":"function","name":"createDraftTask","inputs":[{"name":"_dao","type":"address","internalType":"contract IDAO"},{"name":"_metadata","type":"bytes","internalType":"bytes"},{"name":"_startDate","type":"uint64","internalType":"uint64"},{"name":"_endDate","type":"uint64","internalType":"uint64"},{"name":"_taskInfo","type":"tuple","internalType":"struct ITaskDrafts.CreateTaskInfo","components":[{"name":"metadata","type":"string","internalType":"string"},{"name":"deadline","type":"uint64","internalType":"uint64"},{"name":"manager","type":"address","internalType":"address"},{"name":"disputeManager","type":"address","internalType":"address"},{"name":"nativeBudget","type":"uint96","internalType":"uint96"},{"name":"budget","type":"tuple[]","internalType":"struct ITasks.ERC20Transfer[]","components":[{"name":"tokenContract","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"preapproved","type":"tuple[]","internalType":"struct ITasks.PreapprovedApplication[]","components":[{"name":"applicant","type":"address","internalType":"address"},{"name":"nativeReward","type":"tuple[]","internalType":"struct ITasks.NativeReward[]","components":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"reward","type":"tuple[]","internalType":"struct ITasks.Reward[]","components":[{"name":"nextToken","type":"bool","internalType":"bool"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint88","internalType":"uint88"}]}]}]}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getGovernancePlugin","inputs":[{"name":"_dao","type":"address","internalType":"contract IDAO"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"pure"},{"type":"function","name":"supportsInterface","inputs":[{"name":"_interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"updateGovernancePlugin","inputs":[{"name":"_governancePlugin","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateManager","inputs":[{"name":"_manager","type":"address","internalType":"contract IDAOManager"},{"name":"_role","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"TaskDraftCreated","inputs":[{"name":"dao","type":"address","indexed":true,"internalType":"contract IDAO"},{"name":"info","type":"tuple","indexed":false,"internalType":"struct ITaskDrafts.CreateTaskInfo","components":[{"name":"metadata","type":"string","internalType":"string"},{"name":"deadline","type":"uint64","internalType":"uint64"},{"name":"manager","type":"address","internalType":"address"},{"name":"disputeManager","type":"address","internalType":"address"},{"name":"nativeBudget","type":"uint96","internalType":"uint96"},{"name":"budget","type":"tuple[]","internalType":"struct ITasks.ERC20Transfer[]","components":[{"name":"tokenContract","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"preapproved","type":"tuple[]","internalType":"struct ITasks.PreapprovedApplication[]","components":[{"name":"applicant","type":"address","internalType":"address"},{"name":"nativeReward","type":"tuple[]","internalType":"struct ITasks.NativeReward[]","components":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"reward","type":"tuple[]","internalType":"struct ITasks.Reward[]","components":[{"name":"nextToken","type":"bool","internalType":"bool"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint88","internalType":"uint88"}]}]}]},{"name":"governancePlugin","type":"address","indexed":false,"internalType":"address"},{"name":"proposalId","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false}],"bytecode":"0x60a03461006a57601f610dd638819003918201601f19168301916001600160401b0383118484101761006f5780849260209460405283398101031261006a57516001600160a01b038116810361006a57608052604051610d5090816100868239608051816103960152f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c90816301ffc9a71461089c57508063466e1809146108615780635711c7d51461081a5780638da5cb5b146107eb578063d4e5f4bd146100be5763d8de10661461006157600080fd5b346100b95760403660031901126100b9576004356001600160a01b038116908190036100b95733600052600060205260406000209060018201906001600160601b0360a01b8254161790556002602435910155600080f35b600080fd5b346100b95760031960a0368201126100b9576100d86108ef565b6001600160401b03602435116100b9573660236024350112156100b9576001600160401b0360243560040135116100b95736602480356004013581350101116100b9576044356001600160401b03811681036100b957606435926001600160401b03841684036100b9576001600160401b03608435116100b95760e090608435360301126100b95760018060a01b038216600052600060205260406000209260026040519461018686610919565b80546001600160a01b0390811687526001820154166020870152015460408501526101af610955565b906022196084353603016084356004013512156100b9576084356004013560843501926001600160401b036004850135116100b9576004840135360360248501136100b957608435602401356001600160401b03811690036100b9576102196044608435016109bc565b6102276064608435016109bc565b9460843560a4810135903603602219018112156100b9576001600160401b03600482608435010135116100b9576084358101600481013560061b36036024909101136100b95760221960843536030160c4608435013512156100b95760843560c4810135016001600160401b036004820135116100b957600481013560051b360360248201136100b95761033a61036394610355936102ed9a6040519b8c97637e19374560e01b60208a015260c060248a015260e48901906024600482013591016109d0565b608480356024818101356001600160401b031660448c01526001600160a01b0396871660648c015293909516908901528781036023190160a4890152929190910160048101359101610a05565b8381036023190160c485015290600481013590602401610aa3565b03601f198101865285610934565b6084803501356001600160601b03811690036100b957610471600093610444926104f5966040519061039482610919565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031682526084803501356001600160601b0316602083015260408201526103e283610c3e565b526103ec82610c3e565b506001600160401b036103fd610955565b958160405196879563c907c0df60e01b602088015260e0602488015261043261010488016024356004013560248035016109d0565b87810360231901604489015290610c84565b938960648701521660848501521660a48301528560c48301528560e483015203601f198101835282610934565b855160405191906001600160a01b031661048a83610919565b825283602083015260408201526104a082610c3e565b526104aa81610c3e565b5060018060a01b0360208601511660408601518360405180968195829463dabdb38960e01b845260018060a01b038b1660048501526024840152608060448401526084830190610c84565b82606483015203925af180156107df57600090610699575b6105179150610c3e565b516020818051810103126100b957602001519151604051606081526001600160a01b0391909116926004608435818101350190810135906024016001600160401b0382116100b95781360381136100b95761057e9160e060608601526101408501916109d0565b60843560248101356001600160401b031660808501529093906001600160a01b03906105ac90604401610905565b1660a08401526001600160a01b036105c8608435606401610905565b1660c08401526001600160601b036105e360848035016109f1565b1660e084015261061561060060a460843501608435600401610a6f565b605f1986880381016101008801529691610a05565b9160843560c460843501350194602460048701359601936001600160401b0387116100b9578660051b360385136100b9577f23b577bf6471645fa9c2aee690cbe726fa442a860022679b5b130391729062f796869561067d9387840301610120880152610aa3565b602084019690965260408301526001600160a01b0316930390a2005b503d90816000823e6106ab8282610934565b60408183810103126100b9578051916001600160401b0383116100b957808201601f8484010112156100b95782820151926001600160401b0384116107c9578360051b91604051946107006020850187610934565b855260208501908085016020858588010101116100b957602083860101915b6020858588010101831061073c575050505050506105179061050d565b82516001600160401b0381116100b957828701603f82878a01010112156100b9576020818689010101516001600160401b0381116107c9576040519261078c601f8301601f191660200185610934565b818452848901604083858a8d01010101116100b957836107bc602095938b604088978c8980990193010101610c61565b815201930192905061071f565b634e487b7160e01b600052604160045260246000fd5b6040513d6000823e3d90fd5b346100b95760003660031901126100b957602060405173b4e54a5b6b80afdb5dc4b5d8c1c66b75ff75fcae8152f35b346100b95760203660031901126100b9576108336108ef565b33600090815260208190526040902080546001600160a01b0319166001600160a01b03909216919091179055005b346100b95760203660031901126100b95760206001600160a01b03806108856108ef565b166000526000825260406000205416604051908152f35b346100b95760203660031901126100b9576004359063ffffffff60e01b82168092036100b957602091631d443b0760e01b81149081156108de575b5015158152f35b6301ffc9a760e01b149050836108d7565b600435906001600160a01b03821682036100b957565b35906001600160a01b03821682036100b957565b606081019081106001600160401b038211176107c957604052565b90601f801991011681019081106001600160401b038211176107c957604052565b60409060405191604083018381106001600160401b038211176107c95760405260018352829160009160005b6020808210156109b35782516020929161099a82610919565b8682528681830152606085830152828901015201610981565b50505091925050565b356001600160a01b03811681036100b95790565b908060209392818452848401376000828201840152601f01601f1916010190565b35906001600160601b03821682036100b957565b91818152602080910192916000916000905b828210610a2657505050505090565b9091929394853560018060a01b038116809103610a6b5781526001906001600160601b03610a558885016109f1565b1681840152604090810196019493920190610a17565b8580fd5b9035601e19823603018112156100b95701602081359101916001600160401b0382116100b9578160061b360383136100b957565b9082818152602080910193818360051b82010194846000925b858410610acd575050505050505090565b90919293949596601f198282030184528735605e19843603018112156100b95760608281019291850191906001600160a01b0380610b0a85610905565b168352610b198a850185610a6f565b809196848d870152526080840195906000905b808210610c035750505060409384810135601e19823603018112156100b95701928a84359401956001600160401b0385116100b957838502360387136100b9578082878e9896948994989698039101528381520195936000935b838510610ba85750505050505080600192990194019401929594939190610abc565b9193955091939586358015158091036100b957815282610bc98d8901610905565b168c82015281870135906affffffffffffffffffffff82168092036100b9578481600193858394015201970195019290918b959492610b86565b90919660019084610c138a610905565b1681528d6001600160601b03610c2a828c016109f1565b169082015260408091019801920190610b2c565b805115610c4b5760200190565b634e487b7160e01b600052603260045260246000fd5b60005b838110610c745750506000910152565b8181015183820152602001610c64565b908082519081815260208091019281808460051b8301019501936000915b848310610cb25750505050505090565b9091929394958480600192601f1990818682030187528a5191601f6060878060a01b0385511684528585015186850152806040809601519585015284518091850152610d0681608096888888019101610c61565b011601019801930193019194939290610ca256fea2646970667358221220e75ab15088f5c0a3f7181e4647d3677c74261ccf15ee46f9ece6d2d4382a3c4164736f6c63430008170033","compiler":{"version":"v0.8.23+commit.f704f362"},"contractName":"src/TaskDrafts/TaskDrafts.sol:TaskDrafts","license":"MIT","jsonDescription":{"language":"Solidity","sources":{"lib/openmesh-admin/lib/ens-reverse-claimable/src/ENSReverseClaimable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSReverseClaimable {\n    /// @notice ENS reverse name resolution is claimable by the owner of the contract.\n    function owner() external pure virtual returns (address) {\n        return 0xaF7E68bCb2Fc7295492A00177f14F59B92814e70; // plopmenz.eth\n    }\n}\n"},"lib/openmesh-admin/src/Openmesh.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Openmesh {\n    address constant OPENMESH_ADMIN = 0xB4e54a5B6b80AFdb5DC4B5d8c1c66b75FF75FCaE;\n}\n"},"lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ENSReverseClaimable} from \"../lib/ens-reverse-claimable/src/ENSReverseClaimable.sol\";\nimport {Openmesh} from \"./Openmesh.sol\";\n\ncontract OpenmeshENSReverseClaimable is Openmesh, ENSReverseClaimable {\n    /// @inheritdoc ENSReverseClaimable\n    function owner() external pure override returns (address) {\n        return OPENMESH_ADMIN;\n    }\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert Errors.FailedCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"lib/openrd-foundry/src/Escrow.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract Escrow {\r\n    using SafeERC20 for IERC20;\r\n\r\n    error AlreadyInitialized();\r\n    error NotOwner();\r\n\r\n    address internal owner;\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /// @notice Initializes the Escrow with the sender of the transaction as owner.\r\n    /// @dev This should be called in the same transaction as deploying the escrow, to prevent front running.\r\n    function __Escrow_init() public payable {\r\n        if (owner != address(0)) {\r\n            revert AlreadyInitialized();\r\n        }\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Transfers a certain amount of ERC20 token to a given address. Can only be called by the owner.\r\n    /// @param token The ERC20 contract address.\r\n    /// @param to The address to recieve the tokens.\r\n    /// @param amount The amount of ERC20 token to receive.\r\n    /// @dev Wont do anything if amount is 0.\r\n    function transfer(IERC20 token, address to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        if (amount != 0) {\r\n            token.safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Transfers a certain amount of native currency to a given address. Can only be called by the owner.\r\n    /// @param to The address to recieve the currency.\r\n    /// @param amount The amount of native currency to receive.\r\n    /// @dev Wont do anything if amount is 0.\r\n    function transferNative(address payable to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        if (amount != 0) {\r\n            to.transfer(amount);\r\n        }\r\n    }\r\n}\r\n"},"lib/openrd-foundry/src/ITasks.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Escrow, IERC20} from \"./Escrow.sol\";\r\n\r\ninterface ITasks {\r\n    error TaskDoesNotExist();\r\n    error TaskNotOpen();\r\n    error TaskNotTaken();\r\n    error TaskNotClosed();\r\n    error TaskClosed();\r\n\r\n    error NotManager();\r\n    error NotExecutor();\r\n    error NotDisputeManager();\r\n\r\n    error RewardAboveBudget();\r\n    error RewardDoesntEndWithNextToken();\r\n    error NotEnoughNativeCurrencyAttached();\r\n    error ApplicationDoesNotExist();\r\n    error NotYourApplication();\r\n    error ApplicationNotAccepted();\r\n    error SubmissionDoesNotExist();\r\n    error SubmissionAlreadyJudged();\r\n    error JudgementNone();\r\n\r\n    error RequestDoesNotExist();\r\n    error RequestAlreadyAccepted();\r\n    error RequestNotAccepted();\r\n    error RequestAlreadyExecuted();\r\n\r\n    error Overflow();\r\n    error ManualBudgetIncreaseNeeded();\r\n    error PartialRewardAboveFullReward();\r\n    error NativeTransferFailed();\r\n    error ERC1167FailedCreateClone();\r\n\r\n    // The budget here repesents the call of the funder to the escrow, the actual value in the escrow (actual budget) might differ in case of transfer fees / rewards.\r\n    event TaskCreated(\r\n        uint256 indexed taskId,\r\n        string metadata,\r\n        uint64 deadline,\r\n        address manager,\r\n        address disputeManager,\r\n        address creator,\r\n        uint96 nativeBudget,\r\n        ERC20Transfer[] budget,\r\n        Escrow escrow\r\n    );\r\n    event ApplicationCreated(\r\n        uint256 indexed taskId,\r\n        uint32 indexed applicationId,\r\n        string metadata,\r\n        address applicant,\r\n        NativeReward[] nativeReward,\r\n        Reward[] reward\r\n    );\r\n    event ApplicationAccepted(uint256 indexed taskId, uint32 indexed applicationId);\r\n    event TaskTaken(uint256 indexed taskId, uint32 indexed applicationId);\r\n    event SubmissionCreated(uint256 indexed taskId, uint8 indexed submissionId, string metadata);\r\n    event SubmissionReviewed(\r\n        uint256 indexed taskId, uint8 indexed submissionId, SubmissionJudgement judgement, string feedback\r\n    );\r\n    event TaskCompleted(uint256 indexed taskId, TaskCompletionSource source);\r\n\r\n    event CancelTaskRequested(uint256 indexed taskId, uint8 indexed requestId, string metadata);\r\n    event TaskCancelled(uint256 indexed taskId, string metadata);\r\n    event RequestAccepted(uint256 indexed taskId, RequestType indexed requestType, uint8 indexed requestId);\r\n    event RequestExecuted(uint256 indexed taskId, RequestType indexed requestType, uint8 indexed requestId, address by);\r\n\r\n    event DeadlineChanged(uint256 indexed taskId, uint64 newDeadline);\r\n    event BudgetChanged(uint256 indexed taskId); // Quite expensive to transfer budget into a datastructure to emit\r\n    event RewardIncreased(\r\n        uint256 indexed taskId, uint32 indexed applicationId, uint96[] nativeIncrease, uint88[] increase\r\n    );\r\n    event MetadataChanged(uint256 indexed taskId, string newMetadata);\r\n    event ManagerChanged(uint256 indexed taskId, address newManager);\r\n    event PartialPayment(uint256 indexed taskId, uint96[] partialNativeReward, uint88[] partialReward);\r\n\r\n    /// @notice A container for ERC20 transfer information.\r\n    /// @param tokenContract ERC20 token to transfer.\r\n    /// @param amount How much of this token should be transfered. uint96 to keep struct packed into a single uint256.\r\n    struct ERC20Transfer {\r\n        IERC20 tokenContract;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a native reward payout.\r\n    /// @param to Whom the native reward should be transfered to.\r\n    /// @param amount How much native reward should be transfered. uint96 to keep struct packed into a single uint256.\r\n    struct NativeReward {\r\n        address to;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a reward payout.\r\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\r\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\r\n    /// @notice nextToken should always be true for the last entry\r\n    /// @param to Whom this token should be transfered to.\r\n    /// @param amount How much of this token should be transfered. uint88 to keep struct packed into a single uint256.\r\n    struct Reward {\r\n        bool nextToken;\r\n        address to;\r\n        uint88 amount;\r\n    }\r\n\r\n    /// @notice A container for a task application.\r\n    /// @param metadata Metadata of the application. (IPFS hash)\r\n    /// @param applicant Who has submitted this application.\r\n    /// @param accepted If the application has been accepted by the manager.\r\n    /// @param nativeReward How much native currency the applicant wants for completion.\r\n    /// @param reward How much rewards the applicant wants for completion.\r\n    struct Application {\r\n        string metadata;\r\n        // Storage block seperator\r\n        address applicant;\r\n        bool accepted;\r\n        uint8 nativeRewardCount;\r\n        uint8 rewardCount;\r\n        // Storage block seperator\r\n        mapping(uint8 => NativeReward) nativeReward;\r\n        mapping(uint8 => Reward) reward;\r\n    }\r\n\r\n    struct OffChainApplication {\r\n        string metadata;\r\n        address applicant;\r\n        bool accepted;\r\n        NativeReward[] nativeReward;\r\n        Reward[] reward;\r\n    }\r\n\r\n    /// @notice For approving people on task creation (they are not required to make an application).\r\n    struct PreapprovedApplication {\r\n        address applicant;\r\n        NativeReward[] nativeReward;\r\n        Reward[] reward;\r\n    }\r\n\r\n    enum SubmissionJudgement {\r\n        None,\r\n        Accepted,\r\n        Rejected\r\n    }\r\n\r\n    /// @notice A container for a task submission.\r\n    /// @param metadata Metadata of the submission. (IPFS hash)\r\n    /// @param judgement Judgement cast on the submission.\r\n    /// @param feedback A response from the manager. (IPFS hash)\r\n    struct Submission {\r\n        string metadata;\r\n        string feedback;\r\n        SubmissionJudgement judgement;\r\n    }\r\n\r\n    // This is for future expansion of the request system\r\n    enum RequestType {CancelTask}\r\n\r\n    /// @notice A container for shared request information.\r\n    /// @param accepted If the request was accepted.\r\n    /// @param executed If the request was executed.\r\n    struct Request {\r\n        bool accepted;\r\n        bool executed;\r\n    }\r\n\r\n    /// @notice A container for a request to cancel the task.\r\n    /// @param request Request information.\r\n    /// @param metadata Metadata of the request. (IPFS hash, Why the task should be cancelled)\r\n    struct CancelTaskRequest {\r\n        Request request;\r\n        string metadata;\r\n    }\r\n\r\n    enum TaskState {\r\n        Open,\r\n        Taken,\r\n        Closed\r\n    }\r\n\r\n    /// @notice A container for task-related information.\r\n    /// @param metadata Metadata of the task. (IPFS hash)\r\n    /// @param deadline Block timestamp at which the task expires if not completed.\r\n    /// @param escrow The address of the escrow which holds the budget funds.\r\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param nativeBudget Maximum native currency reward that can be earned by completing the task.\r\n    /// @param creator Who has created the task.\r\n    /// @param disputeManager Who has the permission to complete the task without the managers approval.\r\n    /// @param manager Who has the permission to manage the task.\r\n    /// @param state Current state the task is in.\r\n    /// @param applications Applications to take the job.\r\n    /// @param executorApplication Index of the application that will execture the task.\r\n    /// @param submissions Submission made to finish the task.\r\n    struct Task {\r\n        string metadata;\r\n        // Storage block seperator\r\n        uint64 deadline;\r\n        Escrow escrow;\r\n        // Storage block seperator\r\n        uint96 nativeBudget;\r\n        address creator;\r\n        // Storage block seperator\r\n        address disputeManager;\r\n        // Storage block seperator\r\n        address manager;\r\n        TaskState state;\r\n        uint32 executorApplication;\r\n        uint8 budgetCount;\r\n        uint32 applicationCount;\r\n        uint8 submissionCount;\r\n        uint8 cancelTaskRequestCount;\r\n        // Storage block seperator\r\n        mapping(uint8 => ERC20Transfer) budget;\r\n        mapping(uint32 => Application) applications;\r\n        mapping(uint8 => Submission) submissions;\r\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\r\n    }\r\n\r\n    struct OffChainTask {\r\n        string metadata;\r\n        uint64 deadline;\r\n        uint32 executorApplication;\r\n        address manager;\r\n        address disputeManager;\r\n        address creator;\r\n        TaskState state;\r\n        Escrow escrow;\r\n        uint96 nativeBudget;\r\n        ERC20Transfer[] budget;\r\n        OffChainApplication[] applications;\r\n        Submission[] submissions;\r\n        CancelTaskRequest[] cancelTaskRequests;\r\n    }\r\n\r\n    enum TaskCompletionSource {\r\n        SubmissionAccepted,\r\n        Dispute\r\n    }\r\n\r\n    /// @notice Retrieves the current amount of created tasks.\r\n    function taskCount() external view returns (uint256);\r\n\r\n    /// @notice Retrieves all task information by id.\r\n    /// @param _taskId Id of the task.\r\n    function getTask(uint256 _taskId) external view returns (OffChainTask memory);\r\n\r\n    /// @notice Retrieves multiple tasks in a single call.\r\n    /// @param _taskIds Ids of the tasks.\r\n    function getTasks(uint256[] calldata _taskIds) external view returns (OffChainTask[] memory);\r\n\r\n    /// @notice Create a new task.\r\n    /// @param _metadata Metadata of the task. (IPFS hash)\r\n    /// @param _deadline Block timestamp at which the task expires if not completed.\r\n    /// @param _manager Who will manage the task (become the manager).\r\n    /// @param _disputeManager Who will manage the disputes (handle situations where the manager and executor are in disagreement).\r\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param _preapprove List of addresses (with reward) that are able to take the task without creating an application themselves.\r\n    /// @return taskId Id of the newly created task.\r\n    function createTask(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        address _manager,\r\n        address _disputeManager,\r\n        ERC20Transfer[] calldata _budget,\r\n        PreapprovedApplication[] calldata _preapprove\r\n    ) external payable returns (uint256 taskId);\r\n\r\n    /// @notice Apply to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of your application.\r\n    /// @param _nativeReward Wanted native currency for completing the task.\r\n    /// @param _reward Wanted rewards for completing the task.\r\n    /// @return applicationId Id of the newly created application.\r\n    function applyForTask(\r\n        uint256 _taskId,\r\n        string calldata _metadata,\r\n        NativeReward[] calldata _nativeReward,\r\n        Reward[] calldata _reward\r\n    ) external returns (uint32 applicationId);\r\n\r\n    /// @notice Accept application to allow them to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationIds Indexes of the applications to accept.\r\n    /// @dev Will revert if applicant reward is higher than the budget. increaseBudget should be called beforehand.\r\n    function acceptApplications(uint256 _taskId, uint32[] calldata _applicationIds) external;\r\n\r\n    /// @notice Take the task after your application has been accepted.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationId Index of application you made that has been accepted.\r\n    function takeTask(uint256 _taskId, uint32 _applicationId) external;\r\n\r\n    /// @notice Create a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of the submission. (IPFS hash)\r\n    /// @return submissionId Id of the newly created submission.\r\n    function createSubmission(uint256 _taskId, string calldata _metadata) external returns (uint8 submissionId);\r\n\r\n    /// @notice Review a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _submissionId Index of the submission that is reviewed.\r\n    /// @param _judgement Outcome of the review.\r\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\r\n    function reviewSubmission(\r\n        uint256 _taskId,\r\n        uint8 _submissionId,\r\n        SubmissionJudgement _judgement,\r\n        string calldata _feedback\r\n    ) external;\r\n\r\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Why the task was cancelled. (IPFS hash)\r\n    /// @return cancelTaskRequestId Id of the newly created request for task cancellation.\r\n    function cancelTask(uint256 _taskId, string calldata _metadata) external returns (uint8 cancelTaskRequestId);\r\n\r\n    /// @notice Accepts a request, executing the proposed action.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    /// @param _execute If the request should also be executed in this transaction.\r\n    function acceptRequest(uint256 _taskId, RequestType _requestType, uint8 _requestId, bool _execute) external;\r\n\r\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    function executeRequest(uint256 _taskId, RequestType _requestType, uint8 _requestId) external;\r\n\r\n    /// @notice Extend the deadline of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _extension How much to extend the deadline by.\r\n    function extendDeadline(uint256 _taskId, uint64 _extension) external;\r\n\r\n    /// @notice Increase the budget of the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _increase How much to increase each tokens amount by.\r\n    /// @dev Any attached native reward will also be used to increase the budget.\r\n    function increaseBudget(uint256 _taskId, uint96[] calldata _increase) external payable;\r\n\r\n    /// @notice Increase the reward of an application of the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationId Id of the application.\r\n    /// @param _nativeIncrease How much to increase each native amount by.\r\n    /// @param _increase How much to increase each tokens amount by.\r\n    function increaseReward(\r\n        uint256 _taskId,\r\n        uint32 _applicationId,\r\n        uint96[] calldata _nativeIncrease,\r\n        uint88[] calldata _increase\r\n    ) external;\r\n\r\n    /// @notice Edit the metadata of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newMetadata New metadata of the task.\r\n    /// @dev This metadata update might change the task completely. Show a warning to people who applied before the change.\r\n    function editMetadata(uint256 _taskId, string calldata _newMetadata) external;\r\n\r\n    /// @notice Transfers the manager role to a different address.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newManager What address should become the manager.\r\n    function transferManagement(uint256 _taskId, address _newManager) external;\r\n\r\n    /// @notice Completes the task through dispute resolution.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _partialNativeReward How much of each native reward should be paid out.\r\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\r\n    function completeByDispute(\r\n        uint256 _taskId,\r\n        uint96[] calldata _partialNativeReward,\r\n        uint88[] calldata _partialReward\r\n    ) external;\r\n\r\n    /// @notice Releases a part of the reward to the executor without marking the task as complete.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _partialNativeReward How much of each native reward should be paid out.\r\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\r\n    /// @dev Will fetch balanceOf to set the budget afterwards, can be used in case funds where sent manually to the escrow to sync the budget.\r\n    function partialPayment(uint256 _taskId, uint96[] calldata _partialNativeReward, uint88[] calldata _partialReward)\r\n        external;\r\n}\r\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"lib/trustless-management/lib/osx-commons/contracts/src/dao/IDAO.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IDAO\n/// @author Aragon Association - 2022-2023\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\n/// @custom:security-contact sirt@aragon.org\ninterface IDAO {\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\n    /// @param to The address to call.\n    /// @param value The native token value to be sent with the call.\n    /// @param data The bytes-encoded function selector and calldata for the call.\n    struct Action {\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\n    /// @param _where The address of the contract.\n    /// @param _who The address of a EOA or contract to give the permissions.\n    /// @param _permissionId The permission identifier.\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\n    /// @return Returns true if the address has permission, false if not.\n    function hasPermission(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        bytes memory _data\n    ) external view returns (bool);\n\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\n    /// @param _metadata The IPFS hash of the new metadata object.\n    function setMetadata(bytes calldata _metadata) external;\n\n    /// @notice Emitted when the DAO metadata is updated.\n    /// @param metadata The IPFS hash of the new metadata object.\n    event MetadataSet(bytes metadata);\n\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\n    /// @param _actions The array of actions.\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    /// @return The array of results obtained from the executed actions in `bytes`.\n    /// @return The resulting failure map containing the actions have actually failed.\n    function execute(\n        bytes32 _callId,\n        Action[] memory _actions,\n        uint256 _allowFailureMap\n    ) external returns (bytes[] memory, uint256);\n\n    /// @notice Emitted when a proposal is executed.\n    /// @param actor The address of the caller.\n    /// @param callId The ID of the call.\n    /// @param actions The array of actions executed.\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\n    /// @param failureMap The failure map encoding which actions have failed.\n    /// @param execResults The array with the results of the executed actions.\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\n    event Executed(\n        address indexed actor,\n        bytes32 callId,\n        Action[] actions,\n        uint256 allowFailureMap,\n        uint256 failureMap,\n        bytes[] execResults\n    );\n\n    /// @notice Emitted when a standard callback is registered.\n    /// @param interfaceId The ID of the interface.\n    /// @param callbackSelector The selector of the callback function.\n    /// @param magicNumber The magic number to be registered for the callback function selector.\n    event StandardCallbackRegistered(\n        bytes4 interfaceId,\n        bytes4 callbackSelector,\n        bytes4 magicNumber\n    );\n\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\n    /// @param _token The address of the token or address(0) in case of the native token.\n    /// @param _amount The amount of tokens to deposit.\n    /// @param _reference The reference describing the deposit reason.\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\n\n    /// @notice Emitted when a token deposit has been made to the DAO.\n    /// @param sender The address of the sender.\n    /// @param token The address of the deposited token.\n    /// @param amount The amount of tokens deposited.\n    /// @param _reference The reference describing the deposit reason.\n    event Deposited(\n        address indexed sender,\n        address indexed token,\n        uint256 amount,\n        string _reference\n    );\n\n    /// @notice Emitted when a native token deposit has been made to the DAO.\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\n    /// @param sender The address of the sender.\n    /// @param amount The amount of native tokens deposited.\n    event NativeTokenDeposited(address sender, uint256 amount);\n\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\n    /// @param _trustedForwarder The trusted forwarder address.\n    function setTrustedForwarder(address _trustedForwarder) external;\n\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\n    /// @return The trusted forwarder address.\n    function getTrustedForwarder() external view returns (address);\n\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\n    /// @param forwarder the new forwarder address.\n    event TrustedForwarderSet(address forwarder);\n\n    /// @notice Checks whether a signature is valid for a provided hash according to [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271).\n    /// @param _hash The hash of the data to be signed.\n    /// @param _signature The signature byte array associated with `_hash`.\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid and `0xffffffff` if not.\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\n\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\n    /// @param _interfaceId The ID of the interface.\n    /// @param _callbackSelector The selector of the callback function.\n    /// @param _magicNumber The magic number to be registered for the function signature.\n    function registerStandardCallback(\n        bytes4 _interfaceId,\n        bytes4 _callbackSelector,\n        bytes4 _magicNumber\n    ) external;\n\n    /// @notice Removed function being left here to not corrupt the IDAO interface ID. Any call will revert.\n    /// @dev Introduced in v1.0.0. Removed in v1.4.0.\n    function setSignatureValidator(address) external;\n}\n"},"lib/trustless-management/src/IDAOExtensionWithAdmin.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IDAO} from \"../lib/osx-commons/contracts/src/dao/IDAO.sol\";\n\ninterface IDAOExtensionWithAdmin {\n    error SenderIsNotAdmin();\n\n    event AdminSet(IDAO indexed dao, address admin);\n\n    /// @notice Registers or updates the admin of a DAO. The admin has the permission to change permissions.\n    /// @param _dao The DAO this admin will control.\n    /// @param _admin The address that will control the DAO.\n    /// @dev If no admin is set, this can only be called by the DAO itself. When an admin is set, only the existing admin can update.\n    function setAdmin(IDAO _dao, address _admin) external;\n}\n"},"lib/trustless-management/src/IDAOManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IDAOExtensionWithAdmin, IDAO} from \"./IDAOExtensionWithAdmin.sol\";\n\ninterface IDAOManager is IDAOExtensionWithAdmin {\n    error AccessDenied();\n\n    event Execution(\n        IDAO indexed dao,\n        uint256 indexed role,\n        address indexed sender,\n        IDAO.Action[] actions,\n        bytes[] returnValues,\n        uint256 failureMap\n    );\n\n    /// @notice Executes a list of actions as the DAO.\n    /// @param _dao Which DAO should execute the actions.\n    /// @param _role The role to use for validation if execution is allowed.\n    /// @param _actions The actions to execute.\n    /// @param _failureMap Which actions are allowed to fail without reverting the whole transaction.\n    /// @dev Only a single role means that a user satisfies multiple roles they might need to split their actions into multiple batches (one per role).\n    function asDAO(IDAO _dao, uint256 _role, IDAO.Action[] calldata _actions, uint256 _failureMap)\n        external\n        returns (bytes[] memory returnValues, uint256 failureMap);\n}\n"},"src/TaskDrafts/ITaskDrafts.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {ITasks} from \"../../lib/openrd-foundry/src/ITasks.sol\";\r\nimport {IDAOManager, IDAO} from \"../../lib/trustless-management/src/IDAOManager.sol\";\r\n\r\ninterface ITaskDrafts {\r\n    event TaskDraftCreated(IDAO indexed dao, CreateTaskInfo info, address governancePlugin, uint256 proposalId);\r\n\r\n    /// @notice A container for all info related to a certain DAO.\r\n    /// @param governancePlugin The contract where to create the proposals. (Currently this only supports MajorityVoting plugins from Aragon)\r\n    /// @param manager Mangement solution used by the DAO.\r\n    /// @param role Role to use to be allowed to create proposals in the DAO.\r\n    struct DaoInfo {\r\n        address governancePlugin;\r\n        IDAOManager manager;\r\n        uint256 role;\r\n    }\r\n\r\n    /// @notice A container for all info needed to create a task.\r\n    /// @param tasks The contract to create the task.\r\n    /// @param metadata The metadata of the created task.\r\n    /// @param deadline The deadline of the created task.\r\n    /// @param manager The manager of the created task.\r\n    /// @param disputeManager The dispute manager of the created task.\r\n    /// @param nativeBudget The native budget of the created task.\r\n    /// @param budget The budget of the created task.\r\n    /// @param preapproved The preapproved applicants of the created task.\r\n    struct CreateTaskInfo {\r\n        string metadata;\r\n        uint64 deadline;\r\n        address manager;\r\n        address disputeManager;\r\n        uint96 nativeBudget;\r\n        ITasks.ERC20Transfer[] budget;\r\n        ITasks.PreapprovedApplication[] preapproved;\r\n    }\r\n\r\n    /// @notice The governance plugin where the proposal to accept the dispute can be tracked.\r\n    function getGovernancePlugin(IDAO _dao) external view returns (address);\r\n\r\n    /// @notice Updates the governance plugin. The sender should be the DAO that wants to update its governance plugin.\r\n    /// @param _governancePlugin The new governancePlugin.\r\n    function updateGovernancePlugin(address _governancePlugin) external;\r\n\r\n    /// @notice Updates the manager and role. The sender should be the DAO that wants to update its manager and role\r\n    /// @param _manager The new manager.\r\n    /// @param _role The new role.\r\n    function updateManager(IDAOManager _manager, uint256 _role) external;\r\n\r\n    /// @notice Create a proposal to create a task.\r\n    /// @param _dao The dao to create the proposal to.\r\n    /// @param _metadata The metadata of the proposal.\r\n    /// @param _startDate The start date of the proposal.\r\n    /// @param _endDate The end date of the proposal.\r\n    /// @param _taskInfo The task to be created if the proposal passes.\r\n    /// @dev Does not approve the budget for spending. The DAO should approve the budget in advance (select ERC20s can have a high allowance set)\r\n    function createDraftTask(\r\n        IDAO _dao,\r\n        bytes calldata _metadata,\r\n        uint64 _startDate,\r\n        uint64 _endDate,\r\n        CreateTaskInfo calldata _taskInfo\r\n    ) external;\r\n}\r\n"},"src/TaskDrafts/TaskDrafts.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {ERC165} from \"../../lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\r\nimport {OpenmeshENSReverseClaimable} from \"../../lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol\";\r\n\r\nimport {ITaskDrafts, ITasks, IDAOManager, IDAO} from \"./ITaskDrafts.sol\";\r\n\r\ncontract TaskDrafts is ERC165, OpenmeshENSReverseClaimable, ITaskDrafts {\r\n    mapping(IDAO dao => DaoInfo info) private daoInfo;\r\n    ITasks private immutable tasks;\r\n\r\n    constructor(ITasks _tasks) {\r\n        tasks = _tasks;\r\n    }\r\n\r\n    /// @inheritdoc ERC165\r\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\r\n        return _interfaceId == type(ITaskDrafts).interfaceId || super.supportsInterface(_interfaceId);\r\n    }\r\n\r\n    /// @inheritdoc ITaskDrafts\r\n    function getGovernancePlugin(IDAO _dao) external view returns (address) {\r\n        return daoInfo[_dao].governancePlugin;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDrafts\r\n    function updateGovernancePlugin(address _governancePlugin) external {\r\n        daoInfo[IDAO(msg.sender)].governancePlugin = _governancePlugin;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDrafts\r\n    function updateManager(IDAOManager _manager, uint256 _role) external {\r\n        DaoInfo storage info = daoInfo[IDAO(msg.sender)];\r\n        info.manager = _manager;\r\n        info.role = _role;\r\n    }\r\n\r\n    /// @inheritdoc ITaskDrafts\r\n    function createDraftTask(\r\n        IDAO _dao,\r\n        bytes calldata _metadata,\r\n        uint64 _startDate,\r\n        uint64 _endDate,\r\n        CreateTaskInfo calldata _taskInfo\r\n    ) external {\r\n        DaoInfo memory info = daoInfo[_dao];\r\n\r\n        IDAO.Action[] memory createTaskActions = new IDAO.Action[](1);\r\n        {\r\n            bytes memory callData = abi.encodeWithSelector(\r\n                tasks.createTask.selector,\r\n                _taskInfo.metadata,\r\n                _taskInfo.deadline,\r\n                _taskInfo.manager,\r\n                _taskInfo.disputeManager,\r\n                _taskInfo.budget,\r\n                _taskInfo.preapproved\r\n            );\r\n            createTaskActions[0] = IDAO.Action(address(tasks), _taskInfo.nativeBudget, callData);\r\n        }\r\n\r\n        // This only works for DAOs governed with Aragons MajorityVoting\r\n        IDAO.Action[] memory createProposalActions = new IDAO.Action[](1);\r\n        {\r\n            bytes memory callData = abi.encodeWithSignature(\r\n                \"createProposal(bytes,(address,uint256,bytes)[],uint256,uint64,uint64,VoteOption,bool)\",\r\n                _metadata,\r\n                createTaskActions,\r\n                0, // failureMap\r\n                _startDate,\r\n                _endDate,\r\n                0, // voteOption\r\n                false // tryEarlyExecution\r\n            );\r\n            createProposalActions[0] = IDAO.Action(info.governancePlugin, 0, callData);\r\n        }\r\n\r\n        (bytes[] memory returnValues,) = info.manager.asDAO(_dao, info.role, createProposalActions, 0);\r\n        (uint256 proposalId) = abi.decode(returnValues[0], (uint256));\r\n        emit TaskDraftCreated(_dao, _taskInfo, info.governancePlugin, proposalId);\r\n    }\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/openmesh-admin/lib/forge-std/lib/ds-test/src/","ens-reverse-claimable/=lib/openmesh-admin/lib/ens-reverse-claimable/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openmesh-admin/=lib/openmesh-admin/src/","openrd-foundry/=lib/openrd-foundry/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","osx-commons/=lib/trustless-management/lib/osx-commons/","smart-account/=lib/openmesh-admin/lib/smart-account/src/","tag-manager/=lib/trustless-management/lib/tag-manager/src/","trustless-management/=lib/trustless-management/src/"],"viaIR":true},"evmVersion":"paris","metadata":{"useLiteralContent":true}}},"source":"/home/plopmenz/openmesh-smart-contracts/lib/openrd-dao-extensions","submitted":{"transactionHash":"0xd4c723c1ec180944aecbdd995bbbc1d7a5ab2a0627c0d2b94d60755ed819bb9a","date":"2024-03-27T19:42:21.762Z"}}