{"type":"deployment","id":"VerifiedContributorTagManager","batch":"TEST","batchIndex":23,"deploymentAddress":"0x184d2cc273013bdeCDC57d2E7382f4d2795476a0","constructorArgs":["0x1a4b0079e59b470279552A70A540a51f6137f607","0xB4e54a5B6b80AFdb5DC4B5d8c1c66b75FF75FCaE"],"to":"0x4e59b44847b379578588920ca78fbf26c0b4956c","value":"0","data":"0x00000000000000000000000000000000000000004f50454e4d4553485445535460a03461009257601f6109fc38819003918201601f19168301916001600160401b03831184841017610097578084926040948552833981010312610092578051906001600160a01b03908183168303610092576020015190811681036100925761006b916080526100ad565b506040516108be908161013e823960805181818161017001528181610373015261054c0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b031660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff1661013957818052816020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b509056fe608060408181526004908136101561001657600080fd5b600092833560e01c90816301ffc9a7146105ca575080631d3b3b96146105155780631e4e0091146104b0578063248a9ca3146104865780632f2ff15d1461045e57806336568abe146104175780633a7a2ab4146102c25780635c9521601461029b57806374b98e8c1461027357806391d148541461022d578063a217fddf14610212578063d019577a14610121578063d0e0ba95146100fe5763d547741f146100be57600080fd5b346100fa57806003193601126100fa576100f691356100f160016100e0610639565b938387528660205286200154610751565b610813565b5080f35b8280fd5b5090346100fa5760203660031901126100fa573383526002602052359082205580f35b50346100fa57806003193601126100fa576001600160a01b039282358481169081900361020e57808252602094600286528383205494858551916331a9108f60e11b83528201528681602481857f0000000000000000000000000000000000000000000000000000000000000000165afa9081156102045784916101d7575b50161492836101b4575b5050519015158152f35b602435825260018086528383209183520184528190205460ff16915038806101aa565b6101f79150873d89116101fd575b6101ef818361064f565b810190610687565b386101a0565b503d6101e5565b85513d86823e3d90fd5b5080fd5b83823461020e578160031936011261020e5751908152602090f35b5090346100fa57816003193601126100fa578160209360ff9261024e610639565b903582528186528282206001600160a01b039091168252855220549151911615158152f35b5090346100fa5760203660031901126100fa5760209282913581526001845220549051908152f35b83346102bf576102bc6102ad3661061e565b906102b782610751565b6106a6565b80f35b80fd5b50346100fa576102d13661061e565b6102dd81939293610751565b808552602090600182528286206001810185885280845260ff85892054166103fb578588528352838720805460ff19166001179055805460001981146103e85791849160017f8b5d69e63e32060a52997e24ad9816f4315dc6322fdf7e75f173bdf9f085e27a9401905581519086825284820152a181516331a9108f60e11b81529384018390526001600160a01b0381856024817f000000000000000000000000000000000000000000000000000000000000000085165afa80156103de57600293949587916103c1575b501685525282208054156103ba578280f35b5538808280f35b6103d89150833d85116101fd576101ef818361064f565b386103a8565b83513d88823e3d90fd5b634e487b7160e01b885260118752602488fd5b6044878488885192634d724da560e01b84528301526024820152fd5b5082903461020e578060031936011261020e57610432610639565b90336001600160a01b0383160361044f57506100f6919235610813565b5163334bd91960e11b81528390fd5b50346100fa57806003193601126100fa576100f6913561048160016100e0610639565b610795565b5090346100fa5760203660031901126100fa57816020936001923581528085522001549051908152f35b5090346100fa57816003193601126100fa5735600160243592828552846020526104de828287200154610751565b828552846020528420019082825492557fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff8480a480f35b50346100fa576105243661061e565b82516331a9108f60e11b815280850183905290939192906001600160a01b03906020816024817f000000000000000000000000000000000000000000000000000000000000000086165afa8791816105a9575b50610588575b866102bc87876106a6565b1661059457808061057d565b916024925191633153f87f60e11b8352820152fd5b6105c391925060203d6020116101fd576101ef818361064f565b9038610577565b849084346100fa5760203660031901126100fa573563ffffffff60e01b81168091036100fa5760209250637965db0b60e01b811490811561060d575b5015158152f35b6301ffc9a760e01b14905083610606565b6040906003190112610634576004359060243590565b600080fd5b602435906001600160a01b038216820361063457565b90601f8019910116810190811067ffffffffffffffff82111761067157604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261063457516001600160a01b03811681036106345790565b91906000928184526001602052604091828520600181018387528060205260ff85882054161561073457838752602052838620805460ff1916905580548015610720577fa2d8820d91379e49ddc19a00839ea12b45343eeb619841e5932c6cf4ea6ffc5095965060001901905582519182526020820152a1565b634e487b7160e01b87526011600452602487fd5b50506044925191633f6be9d760e11b835260048301526024820152fd5b80600052600060205260406000203360005260205260ff60406000205416156107775750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054161560001461080e57808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff60408420541660001461080e5780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a460019056fea2646970667358221220b519f80c7b1198d0f78f7dea85f9f66b46025c29f2b486d1fe302b9be6bd542f64736f6c634300081700330000000000000000000000001a4b0079e59b470279552a70a540a51f6137f607000000000000000000000000b4e54a5b6b80afdb5dc4b5d8c1c66b75ff75fcae","gas":"574451","from":"0xaF7E68bCb2Fc7295492A00177f14F59B92814e70","transactionSettings":{"chainId":80001,"nonce":"592","baseFee":"1500000000","priorityFee":"1500000000"},"salt":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OPENMESHTEST","artifact":{"abi":[{"type":"constructor","inputs":[{"name":"_collection","type":"address","internalType":"contract IERC721"},{"name":"_admin","type":"address","internalType":"address"}],"stateMutability":"nonpayable"},{"type":"function","name":"DEFAULT_ADMIN_ROLE","inputs":[],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"addTag","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"tag","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getRoleAdmin","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bytes32","internalType":"bytes32"}],"stateMutability":"view"},{"type":"function","name":"grantRole","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"hasRole","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"hasTag","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"tag","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"removeTag","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"tag","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"removeTagFromBurnedToken","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"tag","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"renounceRole","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"callerConfirmation","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"revokeRole","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"account","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setId","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"setRoleAdmin","inputs":[{"name":"role","type":"bytes32","internalType":"bytes32"},{"name":"adminRole","type":"bytes32","internalType":"bytes32"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"totalTagHavers","inputs":[{"name":"tag","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"event","name":"RoleAdminChanged","inputs":[{"name":"role","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"previousAdminRole","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"newAdminRole","type":"bytes32","indexed":true,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"RoleGranted","inputs":[{"name":"role","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"sender","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"RoleRevoked","inputs":[{"name":"role","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"account","type":"address","indexed":true,"internalType":"address"},{"name":"sender","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"event","name":"TagAdded","inputs":[{"name":"tokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"tag","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"event","name":"TagRemoved","inputs":[{"name":"tokenId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"tag","type":"bytes32","indexed":false,"internalType":"bytes32"}],"anonymous":false},{"type":"error","name":"AccessControlBadConfirmation","inputs":[]},{"type":"error","name":"AccessControlUnauthorizedAccount","inputs":[{"name":"account","type":"address","internalType":"address"},{"name":"neededRole","type":"bytes32","internalType":"bytes32"}]},{"type":"error","name":"AlreadyTagged","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"tag","type":"bytes32","internalType":"bytes32"}]},{"type":"error","name":"NotTagged","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"},{"name":"tag","type":"bytes32","internalType":"bytes32"}]},{"type":"error","name":"TokenNotBurned","inputs":[{"name":"tokenId","type":"uint256","internalType":"uint256"}]}],"bytecode":"0x60a03461009257601f6109fc38819003918201601f19168301916001600160401b03831184841017610097578084926040948552833981010312610092578051906001600160a01b03908183168303610092576020015190811681036100925761006b916080526100ad565b506040516108be908161013e823960805181818161017001528181610373015261054c0152f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b031660008181527fad3228b676f7d3cd4284a5443f17f1962b36e491b30a40b2405849e597ba5fb5602052604081205490919060ff1661013957818052816020526040822081835260205260408220600160ff1982541617905533917f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d8180a4600190565b509056fe608060408181526004908136101561001657600080fd5b600092833560e01c90816301ffc9a7146105ca575080631d3b3b96146105155780631e4e0091146104b0578063248a9ca3146104865780632f2ff15d1461045e57806336568abe146104175780633a7a2ab4146102c25780635c9521601461029b57806374b98e8c1461027357806391d148541461022d578063a217fddf14610212578063d019577a14610121578063d0e0ba95146100fe5763d547741f146100be57600080fd5b346100fa57806003193601126100fa576100f691356100f160016100e0610639565b938387528660205286200154610751565b610813565b5080f35b8280fd5b5090346100fa5760203660031901126100fa573383526002602052359082205580f35b50346100fa57806003193601126100fa576001600160a01b039282358481169081900361020e57808252602094600286528383205494858551916331a9108f60e11b83528201528681602481857f0000000000000000000000000000000000000000000000000000000000000000165afa9081156102045784916101d7575b50161492836101b4575b5050519015158152f35b602435825260018086528383209183520184528190205460ff16915038806101aa565b6101f79150873d89116101fd575b6101ef818361064f565b810190610687565b386101a0565b503d6101e5565b85513d86823e3d90fd5b5080fd5b83823461020e578160031936011261020e5751908152602090f35b5090346100fa57816003193601126100fa578160209360ff9261024e610639565b903582528186528282206001600160a01b039091168252855220549151911615158152f35b5090346100fa5760203660031901126100fa5760209282913581526001845220549051908152f35b83346102bf576102bc6102ad3661061e565b906102b782610751565b6106a6565b80f35b80fd5b50346100fa576102d13661061e565b6102dd81939293610751565b808552602090600182528286206001810185885280845260ff85892054166103fb578588528352838720805460ff19166001179055805460001981146103e85791849160017f8b5d69e63e32060a52997e24ad9816f4315dc6322fdf7e75f173bdf9f085e27a9401905581519086825284820152a181516331a9108f60e11b81529384018390526001600160a01b0381856024817f000000000000000000000000000000000000000000000000000000000000000085165afa80156103de57600293949587916103c1575b501685525282208054156103ba578280f35b5538808280f35b6103d89150833d85116101fd576101ef818361064f565b386103a8565b83513d88823e3d90fd5b634e487b7160e01b885260118752602488fd5b6044878488885192634d724da560e01b84528301526024820152fd5b5082903461020e578060031936011261020e57610432610639565b90336001600160a01b0383160361044f57506100f6919235610813565b5163334bd91960e11b81528390fd5b50346100fa57806003193601126100fa576100f6913561048160016100e0610639565b610795565b5090346100fa5760203660031901126100fa57816020936001923581528085522001549051908152f35b5090346100fa57816003193601126100fa5735600160243592828552846020526104de828287200154610751565b828552846020528420019082825492557fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff8480a480f35b50346100fa576105243661061e565b82516331a9108f60e11b815280850183905290939192906001600160a01b03906020816024817f000000000000000000000000000000000000000000000000000000000000000086165afa8791816105a9575b50610588575b866102bc87876106a6565b1661059457808061057d565b916024925191633153f87f60e11b8352820152fd5b6105c391925060203d6020116101fd576101ef818361064f565b9038610577565b849084346100fa5760203660031901126100fa573563ffffffff60e01b81168091036100fa5760209250637965db0b60e01b811490811561060d575b5015158152f35b6301ffc9a760e01b14905083610606565b6040906003190112610634576004359060243590565b600080fd5b602435906001600160a01b038216820361063457565b90601f8019910116810190811067ffffffffffffffff82111761067157604052565b634e487b7160e01b600052604160045260246000fd5b9081602091031261063457516001600160a01b03811681036106345790565b91906000928184526001602052604091828520600181018387528060205260ff85882054161561073457838752602052838620805460ff1916905580548015610720577fa2d8820d91379e49ddc19a00839ea12b45343eeb619841e5932c6cf4ea6ffc5095965060001901905582519182526020820152a1565b634e487b7160e01b87526011600452602487fd5b50506044925191633f6be9d760e11b835260048301526024820152fd5b80600052600060205260406000203360005260205260ff60406000205416156107775750565b6044906040519063e2517d3f60e01b82523360048301526024820152fd5b9060009180835282602052604083209160018060a01b03169182845260205260ff6040842054161560001461080e57808352826020526040832082845260205260408320600160ff198254161790557f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d339380a4600190565b505090565b9060009180835282602052604083209160018060a01b03169182845260205260ff60408420541660001461080e5780835282602052604083208284526020526040832060ff1981541690557ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b339380a460019056fea2646970667358221220b519f80c7b1198d0f78f7dea85f9f66b46025c29f2b486d1fe302b9be6bd542f64736f6c63430008170033","compiler":{"version":"v0.8.23+commit.f704f362"},"contractName":"src/ERC721TagManager.sol:ERC721TagManager","license":"MIT","jsonDescription":{"language":"Solidity","sources":{"lib/openzeppelin-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\n\npragma solidity ^0.8.20;\n\nimport {IAccessControl} from \"./IAccessControl.sol\";\nimport {Context} from \"../utils/Context.sol\";\nimport {ERC165} from \"../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Contract module that allows children to implement role-based access\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\n * members except through off-chain means by accessing the contract event logs. Some\n * applications may benefit from on-chain enumerability, for those cases see\n * {AccessControlEnumerable}.\n *\n * Roles are referred to by their `bytes32` identifier. These should be exposed\n * in the external API and be unique. The best way to achieve this is by\n * using `public constant` hash digests:\n *\n * ```solidity\n * bytes32 public constant MY_ROLE = keccak256(\"MY_ROLE\");\n * ```\n *\n * Roles can be used to represent a set of permissions. To restrict access to a\n * function call, use {hasRole}:\n *\n * ```solidity\n * function foo() public {\n *     require(hasRole(MY_ROLE, msg.sender));\n *     ...\n * }\n * ```\n *\n * Roles can be granted and revoked dynamically via the {grantRole} and\n * {revokeRole} functions. Each role has an associated admin role, and only\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\n *\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\n * that only accounts with this role will be able to grant or revoke other\n * roles. More complex role relationships can be created by using\n * {_setRoleAdmin}.\n *\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\n * grant and revoke this role. Extra precautions should be taken to secure\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\n * to enforce additional security measures for this role.\n */\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\n    struct RoleData {\n        mapping(address account => bool) hasRole;\n        bytes32 adminRole;\n    }\n\n    mapping(bytes32 role => RoleData) private _roles;\n\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\n\n    /**\n     * @dev Modifier that checks that an account has a specific role. Reverts\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\n     */\n    modifier onlyRole(bytes32 role) {\n        _checkRole(role);\n        _;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\n        return _roles[role].hasRole[account];\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\n     */\n    function _checkRole(bytes32 role) internal view virtual {\n        _checkRole(role, _msgSender());\n    }\n\n    /**\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\n     * is missing `role`.\n     */\n    function _checkRole(bytes32 role, address account) internal view virtual {\n        if (!hasRole(role, account)) {\n            revert AccessControlUnauthorizedAccount(account, role);\n        }\n    }\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\n        return _roles[role].adminRole;\n    }\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _grantRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\n        _revokeRole(role, account);\n    }\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\n        if (callerConfirmation != _msgSender()) {\n            revert AccessControlBadConfirmation();\n        }\n\n        _revokeRole(role, callerConfirmation);\n    }\n\n    /**\n     * @dev Sets `adminRole` as ``role``'s admin role.\n     *\n     * Emits a {RoleAdminChanged} event.\n     */\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\n        bytes32 previousAdminRole = getRoleAdmin(role);\n        _roles[role].adminRole = adminRole;\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\n    }\n\n    /**\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleGranted} event.\n     */\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (!hasRole(role, account)) {\n            _roles[role].hasRole[account] = true;\n            emit RoleGranted(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\n     *\n     * Internal function without access restriction.\n     *\n     * May emit a {RoleRevoked} event.\n     */\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\n        if (hasRole(role, account)) {\n            _roles[role].hasRole[account] = false;\n            emit RoleRevoked(role, account, _msgSender());\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/access/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev External interface of AccessControl declared to support ERC-165 detection.\n */\ninterface IAccessControl {\n    /**\n     * @dev The `account` is missing a role.\n     */\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\n\n    /**\n     * @dev The caller of a function is not the expected one.\n     *\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\n     */\n    error AccessControlBadConfirmation();\n\n    /**\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\n     *\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\n     * {RoleAdminChanged} not being emitted signaling this.\n     */\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\n\n    /**\n     * @dev Emitted when `account` is granted `role`.\n     *\n     * `sender` is the account that originated the contract call, an admin role\n     * bearer except when using {AccessControl-_setupRole}.\n     */\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Emitted when `account` is revoked `role`.\n     *\n     * `sender` is the account that originated the contract call:\n     *   - if using `revokeRole`, it is the admin role bearer\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\n     */\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\n\n    /**\n     * @dev Returns `true` if `account` has been granted `role`.\n     */\n    function hasRole(bytes32 role, address account) external view returns (bool);\n\n    /**\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\n     * {revokeRole}.\n     *\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\n     */\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\n\n    /**\n     * @dev Grants `role` to `account`.\n     *\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function grantRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from `account`.\n     *\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\n     *\n     * Requirements:\n     *\n     * - the caller must have ``role``'s admin role.\n     */\n    function revokeRole(bytes32 role, address account) external;\n\n    /**\n     * @dev Revokes `role` from the calling account.\n     *\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\n     * purpose is to provide a mechanism for accounts to lose their privileges\n     * if they are compromised (such as when a trusted device is misplaced).\n     *\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\n     * event.\n     *\n     * Requirements:\n     *\n     * - the caller must be `callerConfirmation`.\n     */\n    function renounceRole(bytes32 role, address callerConfirmation) external;\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"src/ERC721TagManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"../lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\nimport {AccessControl} from \"../lib/openzeppelin-contracts/contracts/access/AccessControl.sol\";\n\nimport {ITagManagerExtended, ITagManager} from \"./ITagManagerExtended.sol\";\n\ncontract ERC721TagManager is AccessControl, ITagManagerExtended {\n    event TagAdded(uint256 tokenId, bytes32 tag);\n    event TagRemoved(uint256 tokenId, bytes32 tag);\n\n    error AlreadyTagged(uint256 tokenId, bytes32 tag);\n    error NotTagged(uint256 tokenId, bytes32 tag);\n\n    error TokenNotBurned(uint256 tokenId);\n\n    struct TagData {\n        uint256 taggedAccountsCount;\n        mapping(uint256 tokenId => bool) hasTag;\n    }\n\n    IERC721 private immutable collection;\n    mapping(bytes32 tag => TagData tagData) private tags;\n    mapping(address account => uint256 tokenId) private accountToId;\n\n    constructor(IERC721 _collection, address _admin) {\n        collection = _collection;\n        _grantRole(DEFAULT_ADMIN_ROLE, _admin);\n    }\n\n    /// @inheritdoc ITagManager\n    function hasTag(address account, bytes32 tag) external view override returns (bool) {\n        uint256 tokenId = accountToId[account];\n        return collection.ownerOf(tokenId) == account && tags[tag].hasTag[tokenId];\n    }\n\n    /// @inheritdoc ITagManagerExtended\n    function totalTagHavers(bytes32 tag) external view override returns (uint256) {\n        return tags[tag].taggedAccountsCount;\n    }\n\n    /// @notice Adds a tag to a tokenId.\n    /// @param tokenId The tokenId getting the tag.\n    /// @param tag The tag to apply.\n    /// @dev Only callable by a holder of the tag access control role. (which is not the same as having the tag!)\n    function addTag(uint256 tokenId, bytes32 tag) external onlyRole(tag) {\n        _addTag(tokenId, tag);\n\n        // First of your NFTs to get an tag is set as your default (for convenience)\n        // Exception: if the tokenId is 0, then any other tokens the account hold getting tags will overwrite it\n        address tokenOwner = collection.ownerOf(tokenId);\n        if (accountToId[tokenOwner] == 0) {\n            accountToId[tokenOwner] = tokenId;\n        }\n    }\n\n    /// @notice Removes a tag from a tokenId.\n    /// @param tokenId The tokenId getting the tag removed.\n    /// @param tag The tag to remove.\n    /// @dev Only callable by a holder of the tag access control role. (which is not the same as having the tag!)\n    function removeTag(uint256 tokenId, bytes32 tag) external onlyRole(tag) {\n        _removeTag(tokenId, tag);\n    }\n\n    /// @notice Removes a tag from a burned tokenId.\n    /// @param tokenId The burned tokenId getting the tag removed.\n    /// @param tag The tag to remove.\n    /// @dev Different from removeTag as anyone can call this, but it only works on burned tokens.\n    function removeTagFromBurnedToken(uint256 tokenId, bytes32 tag) external {\n        // ownerOf call can throw a \"token does not exist\" error.\n        try collection.ownerOf(tokenId) returns (address owner) {\n            if (owner != address(0)) {\n                revert TokenNotBurned(tokenId);\n            }\n        } catch {}\n\n        _removeTag(tokenId, tag);\n    }\n\n    /// @notice Transfers role adminship to a different role.\n    /// @param role The role whos admin variable is getting changed.\n    /// @param adminRole The new admin role of this role.\n    /// @dev Only callable by a holder of the (old) admin role.\n    /// @dev This can be used by a default admin to create a new tag (managed by another tag).\n    function setRoleAdmin(bytes32 role, bytes32 adminRole) external onlyRole(getRoleAdmin(role)) {\n        _setRoleAdmin(role, adminRole);\n    }\n\n    /// @notice Sets the tokenId to use when checking for tags of the sender account.\n    /// @param tokenId The tokenId to use.\n    function setId(uint256 tokenId) external {\n        accountToId[msg.sender] = tokenId;\n    }\n\n    function _addTag(uint256 tokenId, bytes32 tag) internal {\n        TagData storage tagData = tags[tag];\n        if (tagData.hasTag[tokenId]) {\n            revert AlreadyTagged(tokenId, tag);\n        }\n\n        tagData.hasTag[tokenId] = true;\n        ++tagData.taggedAccountsCount; // TokenID can only have 1 owner / account\n        emit TagAdded(tokenId, tag);\n    }\n\n    function _removeTag(uint256 tokenId, bytes32 tag) internal {\n        TagData storage tagData = tags[tag];\n        if (!tagData.hasTag[tokenId]) {\n            revert NotTagged(tokenId, tag);\n        }\n\n        tagData.hasTag[tokenId] = false;\n        --tagData.taggedAccountsCount;\n        emit TagRemoved(tokenId, tag);\n    }\n}\n"},"src/ITagManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ITagManager {\n    /// @notice Checks if an account holds a certain tag (satisfied a certain condition).\n    /// @param account The account to check with.\n    /// @param tag The tag to check for.\n    function hasTag(address account, bytes32 tag) external view returns (bool);\n}\n"},"src/ITagManagerExtended.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ITagManager} from \"./ITagManager.sol\";\n\ninterface ITagManagerExtended is ITagManager {\n    /// @notice Checks how many accounts hold a tag.\n    /// @param tag The tag to check.\n    function totalTagHavers(bytes32 tag) external view returns (uint256);\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"viaIR":true},"evmVersion":"paris","metadata":{"useLiteralContent":true}}},"source":"/home/plopmenz/openmesh-smart-contracts/lib/tag-manager","submitted":{"transactionHash":"0x0d50fe81ee1fc892195834f4857faaffea7a68588f02362bd117bab755313049","date":"2024-03-27T19:43:06.044Z"}}