{"type":"deployment","id":"VerifiedContributorCountTrustlessManagement","batch":"TEST","batchIndex":25,"deploymentAddress":"0x16E518d5A9aa93a1A51c8c3DC46906DD18e8397D","constructorArgs":["0x184d2cc273013bdeCDC57d2E7382f4d2795476a0"],"to":"0x4e59b44847b379578588920ca78fbf26c0b4956c","value":"0","data":"","gas":"922450","from":"0xaF7E68bCb2Fc7295492A00177f14F59B92814e70","transactionSettings":{"chainId":80001,"nonce":"594","baseFee":"1500000000","priorityFee":"1500000000"},"salt":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OPENMESHTEST","artifact":{"abi":[{"type":"constructor","inputs":[{"name":"_collection","type":"address","internalType":"contract IERC721"}],"stateMutability":"nonpayable"},{"type":"function","name":"asDAO","inputs":[{"name":"_dao","type":"address","internalType":"contract IDAO"},{"name":"_role","type":"uint256","internalType":"uint256"},{"name":"_actions","type":"tuple[]","internalType":"struct IDAO.Action[]","components":[{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}]},{"name":"_failureMap","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"returnValues","type":"bytes[]","internalType":"bytes[]"},{"name":"failureMap","type":"uint256","internalType":"uint256"}],"stateMutability":"nonpayable"},{"type":"function","name":"changeFullAccess","inputs":[{"name":"_dao","type":"address","internalType":"contract IDAO"},{"name":"_role","type":"uint256","internalType":"uint256"},{"name":"_permissionChecker","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"changeFunctionAccess","inputs":[{"name":"_dao","type":"address","internalType":"contract IDAO"},{"name":"_role","type":"uint256","internalType":"uint256"},{"name":"_zone","type":"address","internalType":"address"},{"name":"_functionSelector","type":"bytes4","internalType":"bytes4"},{"name":"_permissionChecker","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"changeFunctionBlacklist","inputs":[{"name":"_dao","type":"address","internalType":"contract IDAO"},{"name":"_role","type":"uint256","internalType":"uint256"},{"name":"_zone","type":"address","internalType":"address"},{"name":"_functionSelector","type":"bytes4","internalType":"bytes4"},{"name":"_permissionChecker","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"changeZoneAccess","inputs":[{"name":"_dao","type":"address","internalType":"contract IDAO"},{"name":"_role","type":"uint256","internalType":"uint256"},{"name":"_zone","type":"address","internalType":"address"},{"name":"_permissionChecker","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"changeZoneBlacklist","inputs":[{"name":"_dao","type":"address","internalType":"contract IDAO"},{"name":"_role","type":"uint256","internalType":"uint256"},{"name":"_zone","type":"address","internalType":"address"},{"name":"_permissionChecker","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"hasRole","inputs":[{"name":"_account","type":"address","internalType":"address"},{"name":"_minTokens","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"isAllowed","inputs":[{"name":"_dao","type":"address","internalType":"contract IDAO"},{"name":"_role","type":"uint256","internalType":"uint256"},{"name":"_actions","type":"tuple[]","internalType":"struct IDAO.Action[]","components":[{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}]}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"pure"},{"type":"function","name":"setAdmin","inputs":[{"name":"_dao","type":"address","internalType":"contract IDAO"},{"name":"_admin","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"supportsInterface","inputs":[{"name":"_interfaceId","type":"bytes4","internalType":"bytes4"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"event","name":"AdminSet","inputs":[{"name":"dao","type":"address","indexed":true,"internalType":"contract IDAO"},{"name":"admin","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"Execution","inputs":[{"name":"dao","type":"address","indexed":true,"internalType":"contract IDAO"},{"name":"role","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"sender","type":"address","indexed":true,"internalType":"address"},{"name":"actions","type":"tuple[]","indexed":false,"internalType":"struct IDAO.Action[]","components":[{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}]},{"name":"returnValues","type":"bytes[]","indexed":false,"internalType":"bytes[]"},{"name":"failureMap","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"FullAccessChanged","inputs":[{"name":"dao","type":"address","indexed":true,"internalType":"contract IDAO"},{"name":"role","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"permissionChecker","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"FunctionAccessChanged","inputs":[{"name":"dao","type":"address","indexed":true,"internalType":"contract IDAO"},{"name":"role","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"zone","type":"address","indexed":false,"internalType":"address"},{"name":"functionSelector","type":"bytes4","indexed":false,"internalType":"bytes4"},{"name":"permissionChecker","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"FunctionBlacklistChanged","inputs":[{"name":"dao","type":"address","indexed":true,"internalType":"contract IDAO"},{"name":"role","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"zone","type":"address","indexed":false,"internalType":"address"},{"name":"functionSelector","type":"bytes4","indexed":false,"internalType":"bytes4"},{"name":"permissionChecker","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ZoneAccessChanged","inputs":[{"name":"dao","type":"address","indexed":true,"internalType":"contract IDAO"},{"name":"role","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"zone","type":"address","indexed":false,"internalType":"address"},{"name":"permissionChecker","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ZoneBlacklistChanged","inputs":[{"name":"dao","type":"address","indexed":true,"internalType":"contract IDAO"},{"name":"role","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"zone","type":"address","indexed":false,"internalType":"address"},{"name":"permissionChecker","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"error","name":"AccessDenied","inputs":[]},{"type":"error","name":"SenderDoesNotHaveRole","inputs":[]},{"type":"error","name":"SenderIsNotAdmin","inputs":[]}],"bytecode":"","compiler":{"version":"v0.8.23+commit.f704f362"},"contractName":"src/ERC721CountTrustlessManagement.sol:ERC721CountTrustlessManagement","license":"MIT","jsonDescription":{"language":"Solidity","sources":{"lib/ens-reverse-claimable/src/ENSReverseClaimable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSReverseClaimable {\n    /// @notice ENS reverse name resolution is claimable by the owner of the contract.\n    function owner() external pure virtual returns (address) {\n        return 0xaF7E68bCb2Fc7295492A00177f14F59B92814e70; // plopmenz.eth\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC-721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC-721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n     *   {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n     *   a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC-721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the address zero.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC-165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"lib/osx-commons/contracts/src/dao/IDAO.sol":{"content":"// SPDX-License-Identifier: AGPL-3.0-or-later\n\npragma solidity ^0.8.8;\n\n/// @title IDAO\n/// @author Aragon Association - 2022-2023\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\n/// @custom:security-contact sirt@aragon.org\ninterface IDAO {\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\n    /// @param to The address to call.\n    /// @param value The native token value to be sent with the call.\n    /// @param data The bytes-encoded function selector and calldata for the call.\n    struct Action {\n        address to;\n        uint256 value;\n        bytes data;\n    }\n\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\n    /// @param _where The address of the contract.\n    /// @param _who The address of a EOA or contract to give the permissions.\n    /// @param _permissionId The permission identifier.\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\n    /// @return Returns true if the address has permission, false if not.\n    function hasPermission(\n        address _where,\n        address _who,\n        bytes32 _permissionId,\n        bytes memory _data\n    ) external view returns (bool);\n\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\n    /// @param _metadata The IPFS hash of the new metadata object.\n    function setMetadata(bytes calldata _metadata) external;\n\n    /// @notice Emitted when the DAO metadata is updated.\n    /// @param metadata The IPFS hash of the new metadata object.\n    event MetadataSet(bytes metadata);\n\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\n    /// @param _actions The array of actions.\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\n    /// @return The array of results obtained from the executed actions in `bytes`.\n    /// @return The resulting failure map containing the actions have actually failed.\n    function execute(\n        bytes32 _callId,\n        Action[] memory _actions,\n        uint256 _allowFailureMap\n    ) external returns (bytes[] memory, uint256);\n\n    /// @notice Emitted when a proposal is executed.\n    /// @param actor The address of the caller.\n    /// @param callId The ID of the call.\n    /// @param actions The array of actions executed.\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\n    /// @param failureMap The failure map encoding which actions have failed.\n    /// @param execResults The array with the results of the executed actions.\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\n    event Executed(\n        address indexed actor,\n        bytes32 callId,\n        Action[] actions,\n        uint256 allowFailureMap,\n        uint256 failureMap,\n        bytes[] execResults\n    );\n\n    /// @notice Emitted when a standard callback is registered.\n    /// @param interfaceId The ID of the interface.\n    /// @param callbackSelector The selector of the callback function.\n    /// @param magicNumber The magic number to be registered for the callback function selector.\n    event StandardCallbackRegistered(\n        bytes4 interfaceId,\n        bytes4 callbackSelector,\n        bytes4 magicNumber\n    );\n\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\n    /// @param _token The address of the token or address(0) in case of the native token.\n    /// @param _amount The amount of tokens to deposit.\n    /// @param _reference The reference describing the deposit reason.\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\n\n    /// @notice Emitted when a token deposit has been made to the DAO.\n    /// @param sender The address of the sender.\n    /// @param token The address of the deposited token.\n    /// @param amount The amount of tokens deposited.\n    /// @param _reference The reference describing the deposit reason.\n    event Deposited(\n        address indexed sender,\n        address indexed token,\n        uint256 amount,\n        string _reference\n    );\n\n    /// @notice Emitted when a native token deposit has been made to the DAO.\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\n    /// @param sender The address of the sender.\n    /// @param amount The amount of native tokens deposited.\n    event NativeTokenDeposited(address sender, uint256 amount);\n\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\n    /// @param _trustedForwarder The trusted forwarder address.\n    function setTrustedForwarder(address _trustedForwarder) external;\n\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\n    /// @return The trusted forwarder address.\n    function getTrustedForwarder() external view returns (address);\n\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\n    /// @param forwarder the new forwarder address.\n    event TrustedForwarderSet(address forwarder);\n\n    /// @notice Checks whether a signature is valid for a provided hash according to [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271).\n    /// @param _hash The hash of the data to be signed.\n    /// @param _signature The signature byte array associated with `_hash`.\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid and `0xffffffff` if not.\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\n\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\n    /// @param _interfaceId The ID of the interface.\n    /// @param _callbackSelector The selector of the callback function.\n    /// @param _magicNumber The magic number to be registered for the function signature.\n    function registerStandardCallback(\n        bytes4 _interfaceId,\n        bytes4 _callbackSelector,\n        bytes4 _magicNumber\n    ) external;\n\n    /// @notice Removed function being left here to not corrupt the IDAO interface ID. Any call will revert.\n    /// @dev Introduced in v1.0.0. Removed in v1.4.0.\n    function setSignatureValidator(address) external;\n}\n"},"src/ERC721CountTrustlessManagement.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"../lib/openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\";\nimport {TrustlessManagement} from \"./TrustlessManagement.sol\";\n\ncontract ERC721CountTrustlessManagement is TrustlessManagement {\n    IERC721 private immutable collection;\n\n    constructor(IERC721 _collection) {\n        collection = _collection;\n    }\n\n    /// @inheritdoc TrustlessManagement\n    function hasRole(address _account, uint256 _minTokens) public view override returns (bool) {\n        return collection.balanceOf(_account) >= _minTokens;\n    }\n}\n"},"src/IDAOExtensionWithAdmin.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IDAO} from \"../lib/osx-commons/contracts/src/dao/IDAO.sol\";\n\ninterface IDAOExtensionWithAdmin {\n    error SenderIsNotAdmin();\n\n    event AdminSet(IDAO indexed dao, address admin);\n\n    /// @notice Registers or updates the admin of a DAO. The admin has the permission to change permissions.\n    /// @param _dao The DAO this admin will control.\n    /// @param _admin The address that will control the DAO.\n    /// @dev If no admin is set, this can only be called by the DAO itself. When an admin is set, only the existing admin can update.\n    function setAdmin(IDAO _dao, address _admin) external;\n}\n"},"src/IDAOManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IDAOExtensionWithAdmin, IDAO} from \"./IDAOExtensionWithAdmin.sol\";\n\ninterface IDAOManager is IDAOExtensionWithAdmin {\n    error AccessDenied();\n\n    event Execution(\n        IDAO indexed dao,\n        uint256 indexed role,\n        address indexed sender,\n        IDAO.Action[] actions,\n        bytes[] returnValues,\n        uint256 failureMap\n    );\n\n    /// @notice Executes a list of actions as the DAO.\n    /// @param _dao Which DAO should execute the actions.\n    /// @param _role The role to use for validation if execution is allowed.\n    /// @param _actions The actions to execute.\n    /// @param _failureMap Which actions are allowed to fail without reverting the whole transaction.\n    /// @dev Only a single role means that a user satisfies multiple roles they might need to split their actions into multiple batches (one per role).\n    function asDAO(IDAO _dao, uint256 _role, IDAO.Action[] calldata _actions, uint256 _failureMap)\n        external\n        returns (bytes[] memory returnValues, uint256 failureMap);\n}\n"},"src/IPermissionChecker.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IDAO} from \"../lib/osx-commons/contracts/src/dao/IDAO.sol\";\n\ninterface IPermissionChecker {\n    /// @notice Additional external check if custom conditions are met.\n    /// @param _role The role to check permission for. (this could represent address / holding x amount of ERC20 tokens / ERC721 tokenId / ERC1155 tokenId)\n    /// @param _action The action to check.\n    function checkPermission(uint256 _role, IDAO.Action calldata _action) external view returns (bool);\n}\n"},"src/ITrustlessManagement.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IDAOManager, IDAO, IDAOExtensionWithAdmin} from \"./IDAOManager.sol\";\n\ninterface ITrustlessManagement is IDAOManager {\n    error SenderDoesNotHaveRole();\n\n    event FunctionBlacklistChanged(\n        IDAO indexed dao, uint256 indexed role, address zone, bytes4 functionSelector, address permissionChecker\n    );\n    event ZoneBlacklistChanged(IDAO indexed dao, uint256 indexed role, address zone, address permissionChecker);\n    event FullAccessChanged(IDAO indexed dao, uint256 indexed role, address permissionChecker);\n    event ZoneAccessChanged(IDAO indexed dao, uint256 indexed role, address zone, address permissionChecker);\n    event FunctionAccessChanged(\n        IDAO indexed dao, uint256 indexed role, address zone, bytes4 functionSelector, address permissionChecker\n    );\n\n    /// @notice A container for all info related to a certain DAO.\n    /// @param admin The address that can change the permissions for this DAO.\n    /// @param permissions The permissions set for this DAO.\n    /// @dev Admin as zero address / unset means that the DAO will be the admin itself.\n    struct DAOInfo {\n        address admin;\n        mapping(uint256 role => PermissionInfo permission) permissions;\n    }\n\n    /// @notice A container for all info related to the permissions of a certain role.\n    /// @param fullAccess This role has access to perform any actions, the address referes to a permissionChecker that can be used to impose restrictions.\n    /// @param zoneAccess This role has access to perform any actions, as long as its with a certain smart contract address (zone).\n    /// @param zoneBlacklist This role is prevented to perform any actions with a certain smart contract address (zone).\n    /// @param functionAccess This role has access to call a specific function (functionSelector) of a certain smart contract address (zone).\n    /// @param functionBlacklist This role is prevented to call a specific function (functionSelector) of a certain smart contract address (zone).\n    /// @dev In case you dont need to use any permissionChecker, you can set the address to NO_PERMISSION_CHECKER = address(type(uint160).max).\n    /// @dev In case you want to revoke the permission, you can set the permissionChecker back to default REVOKE = address(0).\n    /// @dev FunctionIds are encoded as (uint160(bytes20(_zone)) << 32) + uint32(_functionSelector).\n    struct PermissionInfo {\n        address fullAccess;\n        mapping(address zone => address permissionChecker) zoneAccess;\n        mapping(address zone => address permissionChecker) zoneBlacklist;\n        mapping(uint256 functionId => address permissionChecker) functionAccess;\n        mapping(uint256 functionId => address permissionChecker) functionBlacklist;\n    }\n\n    /// @notice Verifies if an address has/satisfies a certain role.\n    /// @param _account The address to check.\n    /// @param _roleId The role to check.\n    function hasRole(address _account, uint256 _roleId) external view returns (bool);\n\n    /// @notice Verifies if a role is allowed to execute a list of actions.\n    /// @param _dao The DAO to check permissions of.\n    /// @param _role The role to check permission for.\n    /// @param _actions The actions to check.\n    /// @dev Only a single role means that a user satisfies multiple roles they might need to split their actions into multiple batches (one per role).\n    function isAllowed(IDAO _dao, uint256 _role, IDAO.Action[] calldata _actions) external view returns (bool);\n\n    /// @notice Grants/Revokes a role the permission to do any action (if not blacklisted).\n    /// @param _dao The DAO that will have the permission change.\n    /// @param _role The role that is granted/revoked the permission.\n    /// @param _permissionChecker ZeroAddress for always off, FullAddress (0xFFF...FFF) for always on. Can be the address of IPermissionChecker smart contract for a custom condition check.\n    function changeFullAccess(IDAO _dao, uint256 _role, address _permissionChecker) external;\n\n    /// @notice Grants/Revokes a role the permission to call all functions of one smart contract (if not blacklisted).\n    /// @param _dao The DAO that will have the permission change.\n    /// @param _role The role that is granted/revoked the permission.\n    /// @param _zone The address of the smart contract.\n    /// @param _permissionChecker ZeroAddress for always off, FullAddress (0xFFF...FFF) for always on. Can be the address of IPermissionChecker smart contract for a custom condition check.\n    function changeZoneAccess(IDAO _dao, uint256 _role, address _zone, address _permissionChecker) external;\n\n    /// @notice Adds to / Removes from a blacklist preventing a role from calling one function of one smart contract.\n    /// @param _dao The DAO that will have the permission change.\n    /// @param _role The role that is added to / removed from this blacklist.\n    /// @param _zone The address of the smart contract.\n    /// @param _functionSelector The function selector of the smart contract.\n    /// @param _permissionChecker ZeroAddress for always off, FullAddress (0xFFF...FFF) for always on. Can be the address of IPermissionChecker smart contract for a custom condition check.\n    /// @dev This takes priority no matter what access (full/zone/function) the role has.\n    function changeFunctionBlacklist(\n        IDAO _dao,\n        uint256 _role,\n        address _zone,\n        bytes4 _functionSelector,\n        address _permissionChecker\n    ) external;\n\n    /// @notice Grants/Revokes a role the permission to call one function of one smart contract (if not blacklisted).\n    /// @param _dao The DAO that will have the permission change.\n    /// @param _role The role that is granted/revoked the permission.\n    /// @param _zone The address of the smart contract.\n    /// @param _functionSelector The function selector of the smart contract.\n    /// @param _permissionChecker ZeroAddress for always off, FullAddress (0xFFF...FFF) for always on. Can be the address of IPermissionChecker smart contract for a custom condition check.\n    function changeFunctionAccess(\n        IDAO _dao,\n        uint256 _role,\n        address _zone,\n        bytes4 _functionSelector,\n        address _permissionChecker\n    ) external;\n\n    /// @notice Adds to / Removes from a blacklist preventing a role from calling any function of one smart contract.\n    /// @param _dao The DAO that will have the permission change.\n    /// @param _role The role that is added to / removed from this blacklist.\n    /// @param _zone The address of the smart contract.\n    /// @param _permissionChecker ZeroAddress for always off, FullAddress (0xFFF...FFF) for always on. Can be the address of IPermissionChecker smart contract for a custom condition check.\n    /// @dev This takes priority no matter what access (full/zone/function) the role has.\n    function changeZoneBlacklist(IDAO _dao, uint256 _role, address _zone, address _permissionChecker) external;\n}\n"},"src/TrustlessManagement.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ERC165} from \"../lib/openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\";\nimport {ENSReverseClaimable} from \"../lib/ens-reverse-claimable/src/ENSReverseClaimable.sol\";\n\nimport {IPermissionChecker} from \"./IPermissionChecker.sol\";\nimport {ITrustlessManagement, IDAOManager, IDAO, IDAOExtensionWithAdmin} from \"./ITrustlessManagement.sol\";\n\naddress constant NO_PERMISSION_CHECKER = address(type(uint160).max);\nbytes32 constant EXECUTION_ID = keccak256(\"TRUSTLESS_MANAGEMENT\");\n\nabstract contract TrustlessManagement is ERC165, ENSReverseClaimable, ITrustlessManagement {\n    mapping(IDAO dao => DAOInfo info) private daoInfo;\n\n    /// @inheritdoc ERC165\n    function supportsInterface(bytes4 _interfaceId) public view virtual override returns (bool) {\n        return _interfaceId == type(ITrustlessManagement).interfaceId || super.supportsInterface(_interfaceId);\n    }\n\n    /// @inheritdoc ITrustlessManagement\n    function hasRole(address _account, uint256 _roleId) public view virtual returns (bool);\n\n    /// @inheritdoc ITrustlessManagement\n    function isAllowed(IDAO _dao, uint256 _role, IDAO.Action[] calldata _actions) public view returns (bool) {\n        PermissionInfo storage permissions = daoInfo[_dao].permissions[_role];\n\n        for (uint256 i; i < _actions.length;) {\n            uint256 functionId = _functionId(_actions[i].to, bytes4(_actions[i].data));\n            if (\n                _checkPermission(permissions.functionBlacklist[functionId], _role, _actions[i])\n                    || _checkPermission(permissions.zoneBlacklist[_actions[i].to], _role, _actions[i])\n            ) {\n                // Blacklisted\n                return false;\n            }\n\n            if (\n                !_checkPermission(permissions.fullAccess, _role, _actions[i])\n                    && !_checkPermission(permissions.zoneAccess[_actions[i].to], _role, _actions[i])\n                    && !_checkPermission(permissions.functionAccess[functionId], _role, _actions[i])\n            ) {\n                // Permission not granted\n                return false;\n            }\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        // No action rejected => allowed\n        return true;\n    }\n\n    /// @inheritdoc IDAOManager\n    function asDAO(IDAO _dao, uint256 _role, IDAO.Action[] calldata _actions, uint256 _failureMap)\n        external\n        returns (bytes[] memory returnValues, uint256 failureMap)\n    {\n        if (!hasRole(msg.sender, _role)) {\n            revert SenderDoesNotHaveRole();\n        }\n        if (!isAllowed(_dao, _role, _actions)) {\n            revert AccessDenied();\n        }\n\n        (returnValues, failureMap) = _dao.execute(EXECUTION_ID, _actions, _failureMap);\n        emit Execution(_dao, _role, msg.sender, _actions, returnValues, failureMap);\n    }\n\n    /// @inheritdoc IDAOExtensionWithAdmin\n    function setAdmin(IDAO _dao, address _admin) external {\n        DAOInfo storage info = daoInfo[_dao];\n        _ensureSenderIsAdmin(_dao, info.admin);\n        info.admin = _admin;\n        emit AdminSet(_dao, _admin);\n    }\n\n    /// @inheritdoc ITrustlessManagement\n    function changeFullAccess(IDAO _dao, uint256 _role, address _permissionChecker) external {\n        DAOInfo storage info = daoInfo[_dao];\n        _ensureSenderIsAdmin(_dao, info.admin);\n        info.permissions[_role].fullAccess = _permissionChecker;\n        emit FullAccessChanged(_dao, _role, _permissionChecker);\n    }\n\n    /// @inheritdoc ITrustlessManagement\n    function changeZoneAccess(IDAO _dao, uint256 _role, address _zone, address _permissionChecker) external {\n        DAOInfo storage info = daoInfo[_dao];\n        _ensureSenderIsAdmin(_dao, info.admin);\n        info.permissions[_role].zoneAccess[_zone] = _permissionChecker;\n        emit ZoneAccessChanged(_dao, _role, _zone, _permissionChecker);\n    }\n\n    /// @inheritdoc ITrustlessManagement\n    function changeZoneBlacklist(IDAO _dao, uint256 _role, address _zone, address _permissionChecker) external {\n        DAOInfo storage info = daoInfo[_dao];\n        _ensureSenderIsAdmin(_dao, info.admin);\n        info.permissions[_role].zoneBlacklist[_zone] = _permissionChecker;\n        emit ZoneBlacklistChanged(_dao, _role, _zone, _permissionChecker);\n    }\n\n    /// @inheritdoc ITrustlessManagement\n    function changeFunctionAccess(\n        IDAO _dao,\n        uint256 _role,\n        address _zone,\n        bytes4 _functionSelector,\n        address _permissionChecker\n    ) external {\n        DAOInfo storage info = daoInfo[_dao];\n        _ensureSenderIsAdmin(_dao, info.admin);\n        info.permissions[_role].functionAccess[_functionId(_zone, _functionSelector)] = _permissionChecker;\n        emit FunctionAccessChanged(_dao, _role, _zone, _functionSelector, _permissionChecker);\n    }\n\n    /// @inheritdoc ITrustlessManagement\n    function changeFunctionBlacklist(\n        IDAO _dao,\n        uint256 _role,\n        address _zone,\n        bytes4 _functionSelector,\n        address _permissionChecker\n    ) external {\n        DAOInfo storage info = daoInfo[_dao];\n        _ensureSenderIsAdmin(_dao, info.admin);\n        info.permissions[_role].functionBlacklist[_functionId(_zone, _functionSelector)] = _permissionChecker;\n        emit FunctionBlacklistChanged(_dao, _role, _zone, _functionSelector, _permissionChecker);\n    }\n\n    function _checkPermission(address _permissionChecker, uint256 _role, IDAO.Action calldata _action)\n        internal\n        view\n        returns (bool)\n    {\n        if (_permissionChecker == address(0)) {\n            // Permission not granted\n            return false;\n        }\n        if (_permissionChecker == NO_PERMISSION_CHECKER) {\n            // Permission always granted\n            return true;\n        }\n\n        // Additional check\n        return IPermissionChecker(_permissionChecker).checkPermission(_role, _action);\n    }\n\n    // address + function selector\n    function _functionId(address _zone, bytes4 _functionSelector) internal pure returns (uint256) {\n        return (uint160(bytes20(_zone)) << 32) + uint32(_functionSelector);\n    }\n\n    function _ensureSenderIsAdmin(IDAO _dao, address _admin) internal view {\n        if (_admin == address(0)) {\n            // Admin not set means DAO is the admin\n            if (msg.sender != address(_dao)) {\n                revert SenderIsNotAdmin();\n            }\n        } else {\n            // Specific admin will only be allowed. DAO is not allowed to change permissions. (for example: if it is a SubDAO)\n            if (msg.sender != _admin) {\n                revert SenderIsNotAdmin();\n            }\n        }\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","ens-reverse-claimable/=lib/ens-reverse-claimable/src/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","osx-commons/=lib/osx-commons/","tag-manager/=lib/tag-manager/src/"],"viaIR":true},"evmVersion":"paris","metadata":{"useLiteralContent":true}}},"source":"/home/plopmenz/openmesh-smart-contracts/lib/trustless-management","submitted":{"transactionHash":"0x27d1c37d72708136bffec1982f7fa14aa69b97c1d9957081bb7d81d2702da5d0","date":"2024-03-27T19:43:14.017Z"}}