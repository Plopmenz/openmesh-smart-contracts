{"type":"deployment","id":"OpenmeshAdmin_80001","batch":"TEST","batchIndex":9,"deploymentAddress":"0xB4e54a5B6b80AFdb5DC4B5d8c1c66b75FF75FCaE","constructorArgs":[],"to":"0x4e59b44847b379578588920ca78fbf26c0b4956c","value":"0","data":"0x00000000000000000000000000000000000000004f50454e4d455348544553546080806040523461006f576000805473af7e68bcb2fc7295492a00177f14f59b92814e706001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361065a90816100758239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c8063306b4d6c146103c7578063715018a61461036d5780638babb23b146102fc5780638da5cb5b146102d4578063ac9650d8146100ec5763f2fde38b1461006357600080fd5b346100e85760203660031901126100e85761007c61042e565b90610085610595565b6001600160a01b039182169283156100d257505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b508290346102d057602091826003193601126102cd5781359167ffffffffffffffff8084116100e857366023850112156100e857838201358181116102c95760059260243683861b88018201116102c55788519288840192848410868511176102b2575094828a5286845261016086610553565b9761016d8b51998a6104db565b86895261017987610553565b601f19018a895b8b8382106102a25750505050368190036042190191885b8881106101fb578c8c8c8c83519280840190808552835180925280868601968360051b870101940192955b8287106101cf5785850386f35b9091929382806101eb600193603f198a8203018652885161049a565b96019201960195929190926101c2565b8481831b840101358481121561029e578301858101359089821161029a5760440190803603821361029a576102888f938f8f938f83966102628f8f95849561026e926102829860019e5195838794868601998a37840191858301938a855251938491610477565b010380845201826104db565b5190305af461027b610513565b90306105c1565b9261056b565b52610293818d61056b565b5001610197565b8b80fd5b8a80fd5b60609082018301528c9101610180565b634e487b7160e01b885260419052602487fd5b8580fd5b8380fd5b80fd5b5080fd5b5050346102d057816003193601126102d057905490516001600160a01b039091168152602090f35b508290346102d057826003193601126102d05761031761042e565b9060243567ffffffffffffffff81116102c95783929161033991369101610449565b90610342610595565b8186519283928337810184815203915af461036961035e610513565b9251928392836104bf565b0390f35b83346102cd57806003193601126102cd57610386610595565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b508290346102d05760603660031901126102d0576103e361042e565b9060443567ffffffffffffffff81116102c95783929161040591369101610449565b9061040e610595565b818651928392833781018481520391602435905af161036961035e610513565b600435906001600160a01b038216820361044457565b600080fd5b9181601f840112156104445782359167ffffffffffffffff8311610444576020838186019501011161044457565b60005b83811061048a5750506000910152565b818101518382015260200161047a565b906020916104b381518092818552858086019101610477565b601f01601f1916010190565b6040906104d8939215158152816020820152019061049a565b90565b90601f8019910116810190811067ffffffffffffffff8211176104fd57604052565b634e487b7160e01b600052604160045260246000fd5b3d1561054e573d9067ffffffffffffffff82116104fd5760405191610542601f8201601f1916602001846104db565b82523d6000602084013e565b606090565b67ffffffffffffffff81116104fd5760051b60200190565b805182101561057f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633036105a957565b60405163118cdaa760e01b8152336004820152602490fd5b906105e857508051156105d657805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061061b575b6105f9575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156105f156fea2646970667358221220d34f135b98f61bbdbb95084c449bc167b90ec543c309b4ecec5cec00a55a10d964736f6c63430008170033","gas":"436404","from":"0xaF7E68bCb2Fc7295492A00177f14F59B92814e70","transactionSettings":{"chainId":80001,"nonce":"587","baseFee":"1500000000","priorityFee":"1500000000"},"salt":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OPENMESHTEST","artifact":{"abi":[{"type":"constructor","inputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"multicall","inputs":[{"name":"data","type":"bytes[]","internalType":"bytes[]"}],"outputs":[{"name":"results","type":"bytes[]","internalType":"bytes[]"}],"stateMutability":"nonpayable"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"performCall","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"value","type":"uint256","internalType":"uint256"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnValue","type":"bytes","internalType":"bytes"}],"stateMutability":"nonpayable"},{"type":"function","name":"performDelegateCall","inputs":[{"name":"to","type":"address","internalType":"address"},{"name":"data","type":"bytes","internalType":"bytes"}],"outputs":[{"name":"success","type":"bool","internalType":"bool"},{"name":"returnValue","type":"bytes","internalType":"bytes"}],"stateMutability":"nonpayable"},{"type":"function","name":"renounceOwnership","inputs":[],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"transferOwnership","inputs":[{"name":"newOwner","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"OwnershipTransferred","inputs":[{"name":"previousOwner","type":"address","indexed":true,"internalType":"address"},{"name":"newOwner","type":"address","indexed":true,"internalType":"address"}],"anonymous":false},{"type":"error","name":"AddressEmptyCode","inputs":[{"name":"target","type":"address","internalType":"address"}]},{"type":"error","name":"FailedInnerCall","inputs":[]},{"type":"error","name":"OwnableInvalidOwner","inputs":[{"name":"owner","type":"address","internalType":"address"}]},{"type":"error","name":"OwnableUnauthorizedAccount","inputs":[{"name":"account","type":"address","internalType":"address"}]}],"bytecode":"0x6080806040523461006f576000805473af7e68bcb2fc7295492a00177f14f59b92814e706001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361065a90816100758239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c8063306b4d6c146103c7578063715018a61461036d5780638babb23b146102fc5780638da5cb5b146102d4578063ac9650d8146100ec5763f2fde38b1461006357600080fd5b346100e85760203660031901126100e85761007c61042e565b90610085610595565b6001600160a01b039182169283156100d257505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b508290346102d057602091826003193601126102cd5781359167ffffffffffffffff8084116100e857366023850112156100e857838201358181116102c95760059260243683861b88018201116102c55788519288840192848410868511176102b2575094828a5286845261016086610553565b9761016d8b51998a6104db565b86895261017987610553565b601f19018a895b8b8382106102a25750505050368190036042190191885b8881106101fb578c8c8c8c83519280840190808552835180925280868601968360051b870101940192955b8287106101cf5785850386f35b9091929382806101eb600193603f198a8203018652885161049a565b96019201960195929190926101c2565b8481831b840101358481121561029e578301858101359089821161029a5760440190803603821361029a576102888f938f8f938f83966102628f8f95849561026e926102829860019e5195838794868601998a37840191858301938a855251938491610477565b010380845201826104db565b5190305af461027b610513565b90306105c1565b9261056b565b52610293818d61056b565b5001610197565b8b80fd5b8a80fd5b60609082018301528c9101610180565b634e487b7160e01b885260419052602487fd5b8580fd5b8380fd5b80fd5b5080fd5b5050346102d057816003193601126102d057905490516001600160a01b039091168152602090f35b508290346102d057826003193601126102d05761031761042e565b9060243567ffffffffffffffff81116102c95783929161033991369101610449565b90610342610595565b8186519283928337810184815203915af461036961035e610513565b9251928392836104bf565b0390f35b83346102cd57806003193601126102cd57610386610595565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b508290346102d05760603660031901126102d0576103e361042e565b9060443567ffffffffffffffff81116102c95783929161040591369101610449565b9061040e610595565b818651928392833781018481520391602435905af161036961035e610513565b600435906001600160a01b038216820361044457565b600080fd5b9181601f840112156104445782359167ffffffffffffffff8311610444576020838186019501011161044457565b60005b83811061048a5750506000910152565b818101518382015260200161047a565b906020916104b381518092818552858086019101610477565b601f01601f1916010190565b6040906104d8939215158152816020820152019061049a565b90565b90601f8019910116810190811067ffffffffffffffff8211176104fd57604052565b634e487b7160e01b600052604160045260246000fd5b3d1561054e573d9067ffffffffffffffff82116104fd5760405191610542601f8201601f1916602001846104db565b82523d6000602084013e565b606090565b67ffffffffffffffff81116104fd5760051b60200190565b805182101561057f5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b6000546001600160a01b031633036105a957565b60405163118cdaa760e01b8152336004820152602490fd5b906105e857508051156105d657805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061061b575b6105f9575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b156105f156fea2646970667358221220d34f135b98f61bbdbb95084c449bc167b90ec543c309b4ecec5cec00a55a10d964736f6c63430008170033","compiler":{"version":"v0.8.23+commit.f704f362"},"contractName":"src/OpenmeshAdmin.sol:OpenmeshAdmin","license":"MIT","jsonDescription":{"language":"Solidity","sources":{"lib/smart-account/lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"lib/smart-account/lib/openzeppelin-contracts/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"},"lib/smart-account/lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"lib/smart-account/lib/openzeppelin-contracts/contracts/utils/Multicall.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Multicall.sol)\n\npragma solidity ^0.8.20;\n\nimport {Address} from \"./Address.sol\";\nimport {Context} from \"./Context.sol\";\n\n/**\n * @dev Provides a function to batch together multiple calls in a single external call.\n *\n * Consider any assumption about calldata validation performed by the sender may be violated if it's not especially\n * careful about sending transactions invoking {multicall}. For example, a relay address that filters function\n * selectors won't filter calls nested within a {multicall} operation.\n *\n * NOTE: Since 5.0.1 and 4.9.4, this contract identifies non-canonical contexts (i.e. `msg.sender` is not {_msgSender}).\n * If a non-canonical context is identified, the following self `delegatecall` appends the last bytes of `msg.data`\n * to the subcall. This makes it safe to use with {ERC2771Context}. Contexts that don't affect the resolution of\n * {_msgSender} are not propagated to subcalls.\n */\nabstract contract Multicall is Context {\n    /**\n     * @dev Receives and executes a batch of function calls on this contract.\n     * @custom:oz-upgrades-unsafe-allow-reachable delegatecall\n     */\n    function multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\n        bytes memory context = msg.sender == _msgSender()\n            ? new bytes(0)\n            : msg.data[msg.data.length - _contextSuffixLength():];\n\n        results = new bytes[](data.length);\n        for (uint256 i = 0; i < data.length; i++) {\n            results[i] = Address.functionDelegateCall(address(this), bytes.concat(data[i], context));\n        }\n        return results;\n    }\n}\n"},"lib/smart-account/src/ISmartAccount.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ISmartAccount {\n    /// @notice Executes an arbitrary blockchain call.\n    function performCall(address to, uint256 value, bytes calldata data)\n        external\n        returns (bool success, bytes memory returnValue);\n\n    /// @notice Executes an arbitrary blockchain call with delegateCall. This allows advanced code execution inside the account itself.\n    function performDelegateCall(address to, bytes calldata data)\n        external\n        returns (bool success, bytes memory returnValue);\n}\n"},"lib/smart-account/src/SmartAccount.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"../lib/openzeppelin-contracts/contracts/access/Ownable.sol\";\nimport {Multicall} from \"../lib/openzeppelin-contracts/contracts/utils/Multicall.sol\";\n\nimport {ISmartAccount} from \"./ISmartAccount.sol\";\n\ncontract SmartAccount is Ownable, Multicall, ISmartAccount {\n    constructor(address admin) Ownable(admin) {}\n\n    /// @inheritdoc ISmartAccount\n    function performCall(address to, uint256 value, bytes calldata data)\n        external\n        onlyOwner\n        returns (bool success, bytes memory returnValue)\n    {\n        (success, returnValue) = to.call{value: value}(data);\n    }\n\n    /// @inheritdoc ISmartAccount\n    function performDelegateCall(address to, bytes calldata data)\n        external\n        onlyOwner\n        returns (bool success, bytes memory returnValue)\n    {\n        (success, returnValue) = to.delegatecall(data);\n    }\n}\n"},"src/OpenmeshAdmin.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {SmartAccount} from \"../lib/smart-account/src/SmartAccount.sol\";\n\ncontract OpenmeshAdmin is SmartAccount {\n    constructor() SmartAccount(0xaF7E68bCb2Fc7295492A00177f14F59B92814e70) {}\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"remappings":["@openzeppelin/contracts/=lib/smart-account/lib/openzeppelin-contracts/contracts/","ds-test/=lib/forge-std/lib/ds-test/src/","ens-reverse-claimable/=lib/ens-reverse-claimable/src/","erc4626-tests/=lib/smart-account/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openzeppelin-contracts/=lib/smart-account/lib/openzeppelin-contracts/","smart-account/=lib/smart-account/src/"],"viaIR":true},"evmVersion":"paris","metadata":{"useLiteralContent":true}}},"source":"/home/plopmenz/openmesh-smart-contracts/lib/openmesh-admin","submitted":{"transactionHash":"0x3669ce6e88c940fd8630017dff7d85ead0fea8f1f94a2009ab5af02fc93ab5f1","date":"2024-03-27T19:42:33.248Z"}}