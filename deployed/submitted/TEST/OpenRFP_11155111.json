{"type":"deployment","id":"OpenRFP_11155111","batch":"TEST","batchIndex":7,"deploymentAddress":"0x03034a94aA7e9A20EC50C1c3494E7f3b4b7B3405","constructorArgs":["0xeF699CA61f04916358e446bA0DbB9C6Ab9F86A5C"],"to":"0x4e59b44847b379578588920ca78fbf26c0b4956c","value":"0","data":"0x00000000000000000000000000000000000000004f50454e4d4553485445535460c034620000e3576001600160401b0390601f62002fb938819003918201601f191683019184831184841017620000cd57808492602094604052833981010312620000e357516001600160a01b0391908281168103620000e357608052604051906109f49081830190811183821017620000cd578291620025c5833903906000f08015620000c1571660a0526040516124dc9081620000e9823960805181818160d8015281816102d401526111e5015260a05181818161024e0152610d8b0152f35b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b600080fdfe6101c0604052600436101561001c575b361561001a57600080fd5b005b60006101a0526101a0513560e01c806303523a3c14611747578063263daa0d1461155f5780632f72af341461152857806337374f4c14610dba5780634ca8ff5a14610d735780638da5cb5b14610d42578063a42dab6314610782578063bfd890fd14610107578063c305a6d9146100c05763dea8a5910361000f57346100b9576101a0513660031901126100b95760206101a05154604051908152f35b6101a05180fd5b346100b9576101a0513660031901126100b9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60c03660031901126100b9576004356001600160401b0381116100b957610132903690600401611bed565b602435916001600160401b038316830361077d576044356001600160401b0381116100b957610165903690600401611c1a565b90916064356001600160a01b038116810361077d57608435916001600160a01b038316830361077d5760a435956001600160a01b038716870361077d576101a0515492600019841461076357600184016101a05155836101a05152600160205260406101a05120976001600160401b038311610539576101e58954612233565b601f8111610719575b50826101a051601f82116001146106b0576101a051916106a5575b508360011b906000198560031b1c19161789555b6001600160401b038a166001600160401b031960018b0154161760018a01556e5af43d82803e903d91602b57fd5bf37f0000000000000000000000000000000000000000000000000000000000000000763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8260881c16176101a0515260781b17602052603760096101a051f0956001600160a01b03871615610693576001600160a01b0387163b156100b95760408051635256cec760e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600482015260248101919091526101a051818061031d604482018d8f61238d565b0381346001600160a01b038d165af180156106855761066e575b5060018a01805468010000000000000000600160e01b031916604089901b68010000000000000000600160e01b031617905561037288612423565b60058b01805460ff60a01b191660a09290921b60ff60a01b169190911790556101a0515b60ff891660ff8216101561057557886001600160601b036103dd60206103d78e6103cc6103c760ff89168884612348565b612358565b9560ff881691612348565b0161213e565b6040516323b872dd60e01b60208201523360248201526001600160a01b038c166044820152911660648083019190915281526001600160401b0360a082019081119082111761055f5760a081016040526101a05181519091829190602001826001600160a01b0386165af13d15610553573d6001600160401b0381116105395761049691604051916104796020601f19601f8401160184611903565b82526101a0513d90602084013e5b6001600160a01b038416612443565b8051908115159182610515575b50506104f357506001818c60066104c36103c78f8f60ff80991691612348565b9185841660005201602052604060002090838060a01b03166001600160601b0360a01b8254161790550116610396565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b81925090602091810103126100b957602001518015908115036100b9578e806104a3565b634e487b7160e01b6101a05152604160045260246101a051fd5b61049690606090610487565b634e487b7160e01b600052604160045260246000fd5b50908597916106358c7f91536f789dd78c27091e345c96c0cc07ba86b0364742aee608eaba8b795a3e5c98999460209c8e60026001600160601b0360a01b9160018060a01b038916836005830154161760058201556003810160018060a01b038c16848254161790556004810160018060a01b03891684825416179055019033908254161790556001600160401b0361061c6040519b8c9b8c6101208091528d019161236c565b93168e8a01523460408a015288830360608a015261238d565b3360808701526001600160a01b0394851660a087015290841660c086015290831660e085015291166101008301520390a2604051908152f35b610677906118ba565b6101a0516100b9578b610337565b6040513d6101a051823e3d90fd5b6040516330be1a3d60e21b8152600490fd5b90508401358b610209565b6101a080518c9052516020812092505b601f1986168110610701575084601f198116106106e7575b5050600183811b01895561021d565b850135600019600386901b60f8161c191690558a806106d8565b9091602060018192858a0135815501930191016106c0565b896101a0515260206101a05120601f850160051c81016020861061075c575b601f830160051c8201811061074e5750506101ee565b6101a0518155600101610738565b5080610738565b634e487b7160e01b6101a05152601160045260246101a051fd5b600080fd5b346100b95760a03660031901126100b9576024356001600160401b0381116100b9576107b2903690600401611bed565b906001600160401b03604435166044350361077d576064356001600160401b0381116100b9576107e6903690600401611c1a565b90608435916001600160401b0383116100b957366023840112156100b9576001600160401b038360040135116100b9573660246060856004013502850101116100b9576108346004356123f7565b936001600160401b03600186015416421015610d3057600484013515158080610d0a575b610cf85760058601549563ffffffff808860a81c16146107635760079063ffffffff60a81b600163ffffffff8a60a81c160160a81b1663ffffffff60a81b19891617600582015563ffffffff8860a81c16600052016020526040600020906001600160401b038811610539576108ce8254612233565b601f8111610cae575b50876101a051601f8211600114610c45576101a05191610c3a575b508860011b906000198a60031b1c19161782555b6001820180546001600160e01b0319811660443560a01b67ffffffffffffffff60a01b1617331790915584610b73575b50610aa4575b506109666020916040949394519763ffffffff8860a81c16895260c0848a015260c089019161236c565b3360408801526001600160401b0360443516606088015286810360808801528381520190916101a0515b818110610a5e5750506020915084810360a086015282600401358152019060248101906101a051905b80600401358210610a04575050507f2788e7d7c40931d25e7d002379e04a016900cde1cdafea94d44f3f7b1a936b5383602094600435930390a263ffffffff6040519160a81c168152f35b9091928335908115158092036100b95790815260019060609081906001600160a01b03610a3360208901611c4a565b1660208201526001600160581b03610a4d60408901612317565b1660408201520194019201906109b9565b909160019060409081906001600160a01b03610a7988611c4a565b1681526001600160601b03610a9060208901612303565b166020820152019401910192919092610990565b9491610ab7856004989593980135612423565b60018701805460ff60f01b191660f09290921b60ff60f01b169190911790556101a0515b60ff86600401351660ff82161015610b6557600181610b0660ff809416896004013560248b0161232b565b83821660005260038a0160205260406000209084610b238261233b565b1515166101008560a81b03610b3a60208401612358565b60081b16916001600160a81b031990610b559060400161221f565b60a81b1691171790550116610adb565b50919450919461096661093c565b60ff60e89994989396999792971b610b8a86612423565b6001600160e01b031990921660443560a01b67ffffffffffffffff60a01b1617331760ff60e81b191660e89290921b161760018601556101a0515b60ff811660ff8616811015610c2b5760ff9181610be5600193898e612348565b9060005260028901602052604060002090838060a01b03610c0582612358565b16906001600160a01b031990610c1d9060200161213e565b60a01b161790550116610bc5565b50509496939095919688610936565b9050830135896108f2565b6101a08051859052516020812092505b601f198b168110610c96575089601f19811610610c7c575b5050600188811b018255610906565b84013560001960038b901b60f8161c191690558880610c6d565b90916020600181928589013581550193019101610c55565b826101a0515260206101a05120601f8a0160051c810160208b10610cf1575b601f830160051c82018110610ce35750506108d7565b6101a0518155600101610ccd565b5080610ccd565b604051631006c52360e01b8152600490fd5b50610d2a610d2560048701356000198101906024890161232b565b61233b565b15610858565b604051630ef7b67760e21b8152600490fd5b346100b9576101a0513660031901126100b957602060405173b4e54a5b6b80afdb5dc4b5d8c1c66b75ff75fcae8152f35b346100b9576101a0513660031901126100b9576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100b95760803660031901126100b95760243563ffffffff80821682036100b9576044356001600160401b0381116100b957610dfb903690600401611bbd565b6064939193356001600160401b0381116100b957610e1d903690600401611bbd565b6101405290610e2d6004356123f7565b6005810154909390926001600160a01b038416330361151657858460a81c16868316101561150457858216600052600785016020526040600020608052600160805101549560ff8760e01c166114f2576101a05195610e9260e889901c60ff166120cb565b6101a051979094905b855160ff8a1690811015610f2f57610f2660ff92610f20610ef08f948c600196610f1a838f816000526002608051016020528a8060a01b03604060002054166001600160601b03610ef5610ef085898961212e565b61213e565b60405192610f02846118cd565b8352166020820152610f148383611cd6565b52611cd6565b5061212e565b90612152565b99011697610e9b565b50868a959493928c9288610f6760ff8d60a01c16610f5d610f4f82611924565b60405160c05260c051611903565b8060c05152611924565b6101a0515b601f19820181106114b7575050610f8860ff8a60f01c16612183565b60a0526101a051610180819052610100525b60c0515160ff6101005116101561113a576101005160ff1660009081526006870160205260409020546101a051610160526001600160a01b0316985b60a051516101205260ff610180511660e0526101205160e051101561112c5760e05160005260036080510160205261101160406000206121eb565b61101f60e05160a051611cd6565b5261102e60e05160a051611cd6565b5061108761104a61104560e051610140518d61212e565b61221f565b604061105a60e05160a051611cd6565b51016001600160581b03809216905261107d61104560e0518d610140519061212e565b1661016051612152565b6101605261109960e05160a051611cd6565b51516110b25760ff600161018051011661018052610fd6565b90919293949596979860ff6001610180510116610180525b604051906110d7826118cd565b81526001600160601b03610160511660208201526110fd60ff610100511660c051611cd6565b5261111060ff610100511660c051611cd6565b5060ff6001610100510116610100529796959493929190610f9a565b9091929394959697986110ca565b948891956040519061114b826118cd565b600182526101a0515b6020811061148057506040519061116a826118e8565b6001600160a01b0385168252602082015260a051604082015261118c82611cb3565b5261119681611cb3565b5060018060a01b03600183015460401c16926001600160601b0360018060a01b0360038501541693600460018060a01b039101541698604051998a956321ec955960e11b875260018060a01b037f000000000000000000000000000000000000000000000000000000000000000016600488015261010060248801526001600160401b0361122a610104890160805161226d565b9560a01c166044880152606487015260848601521660a48401526003198382030160c4840152602060c05151918281520190602060c05101906101a0515b818110611449575050506003198382030160e4840152815180825260208201916020808360051b8301019401926101a051915b8383106113e757505050505091818060209403916101a051905af1938415610685576101a051946113b3575b5060808051600101805460ff60e01b1916600160e01b1790556040519590911685526020850181905284018190526101a05160a0850191905b81811061138957505060209150838103604085015261014051815201926101a0515b61014051811061136357606084018390526004357fb6c553e6537a417a3520cb59f37487db1585a760dfb66146d6f3431dc8037aa085870386a26101a05180f35b90936020806001926001600160581b0361137c89612317565b1681520195019101611322565b90916020806001926001600160601b036113a288612303565b168152019401910192919092611300565b9093506020813d6020116113df575b816113cf60209383611903565b8101031261077d575192816112c7565b3d91506113c2565b919395509193602080611437600193601f1986820301875289519060406114266060888060a01b0385511684528685015190808886015284019061197b565b9201519060408184039101526119cc565b97019301930190928a9594929361129b565b825180516001600160a01b031685526020908101516001600160601b0316818601528b965060409094019390920191600101611268565b6020906040999593949951611494816118e8565b6101a0518152606080848301526040820152828287010152019792919397611154565b60209060409b939495969798999a9b516114d0816118cd565b60008152600083820152828260c0510101520199989796959493929199610f6c565b60405163087aeca360e41b8152600490fd5b6040516338fde52b60e01b8152600490fd5b60405163607e454560e11b8152600490fd5b346100b95760203660031901126100b95761155b611547600435611cea565b604051918291602083526020830190611a2a565b0390f35b346100b9576020806003193601126100b9576004359061157e826123f7565b60058101805490926001600160a01b0392918316330361151657600192600183019181835460401c1660028501928084541690823191833b156100b95760405190633e97486160e11b825260048201526024926024820152604493816044816101a051936101a051905af1801561068557611738575b508760ff809a5460a01c166101a0515060066101a0519901915b611645575b8b7fdc7e0409b742bc5f5999ed477fba8518523be3d07b41b9a67ce75191f490cab86101a0516101a051a26101a05180f35b8a8916818110156117325760005281865282604060002054169883895460401c1685858a5416898d604051938480926370a0823160e01b82528760048301525afa918215610685576101a05192611703575b50823b156100b95760049c6040519d8e6317d5759960e31b81520152878d0152878c01528a6064816101a051936101a051905af1908115610685578b9a8d926116e5575b508a01169861160e565b909a506116f291506118ba565b6101a0516100b9578a8a998e6116db565b9091508981813d831161172b575b61171b8183611903565b8101031261077d57519038611697565b503d611711565b50611613565b611741906118ba565b8a6115f4565b346100b9576020806003193601126100b9576004356001600160401b0381116100b957366023820112156100b957806004013561178381611924565b916117916040519384611903565b81835260248484019260051b820101913683116100b9576024859201905b8382106118ab5782858051906117dd6117c783611924565b926117d56040519485611903565b808452611924565b601f1901836101a0515b8281106118955750506101a05190505b8151811015611832578061181661181060019385611cd6565b51611cea565b6118208286611cd6565b5261182b8185611cd6565b50016117f7565b50506040519082820192808352815180945260408301938160408260051b8601019301916101a051955b8287106118695785850386f35b909192938280611885600193603f198a82030186528851611a2a565b960192019601959291909261185c565b61189d611c5e565b8282870101520184906117e7565b813581529082019082016117af565b6001600160401b03811161055f57604052565b604081019081106001600160401b0382111761055f57604052565b606081019081106001600160401b0382111761055f57604052565b90601f801991011681019081106001600160401b0382111761055f57604052565b6001600160401b03811161055f5760051b60200190565b919082519283825260005b848110611967575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201611946565b90815180825260208080930193019160005b82811061199b575050505090565b835180516001600160a01b031686528201516001600160601b0316858301526040909401939281019260010161198d565b90815180825260208080930193019160005b8281106119ec575050505090565b8351805115158652808301516001600160a01b0316868401526040908101516001600160581b031690860152606090940193928101926001016119de565b90611a3f61012083519080845283019061193b565b9060209081840151916001600160401b038093168183015260409360408601519460018060a01b03809616604085015260609386606089015116606082015260808760808a015116608083015260a0908860a08b01511660a084015260c0928960c08c01511660c082015260e08b01519581810360e083015287808851928381520197019060005b818110611ba757505050610100809b01519a8187039101528951968786528686019487808a60051b8901019c01996000975b8a8910611b10575050505050505050505050505090565b909192939495969798999a9b9d9c8a8f611b8d8f6001948b611b7d8f958f94611b4e908998601f198d8803019052519586519080875286019061193b565b85880151909116848801528b8501518b168c8501528c85015115158d8501528d8501518482038f86015261197b565b920151908c8184039101526119cc565b9e0199019901979a9998969594939291909d9b9c9d611af9565b82518d1689529789019791890191600101611ac7565b9181601f8401121561077d578235916001600160401b03831161077d576020808501948460051b01011161077d57565b9181601f8401121561077d578235916001600160401b03831161077d576020838186019501011161077d57565b9181601f8401121561077d578235916001600160401b03831161077d576020808501948460061b01011161077d57565b35906001600160a01b038216820361077d57565b6040519061012082018281106001600160401b0382111761055f57604052606061010083828152600080602083015280604083015280848301528060808301528060a083015260c08201528260e08201520152565b805115611cc05760200190565b634e487b7160e01b600052603260045260246000fd5b8051821015611cc05760209160051b010190565b611cfc90611cf6611c5e565b506123f7565b611d04611c5e565b90604051611d1d81611d16818561226d565b0382611903565b825260018101546001600160401b038116602084015260028201546001600160a01b039081166060850152600383015481166080850152600583015480821660c080870191909152604093841c9092169285019290925290939060a085901c60ff16611da1611d8b82611924565b91611d996040519384611903565b808352611924565b601f190136602083013760e085015260005b60e08501515160ff82161015611dfa5760018160ff80931660005260068601602052818060a01b0360406000205416611df284831660e08a0151611cd6565b520116611db3565b5090919363ffffffff9060a81c1690611e1282611924565b91611e206040519384611903565b808352611e2f601f1991611924565b019060005b8281106120735750505061010083015260005b6101008301515160ff8216101561206d5760ff811660005260078401602052604060002093611e7e60ff8316610100860151611cd6565b5160405190611e9882611e91818a61226d565b0383611903565b526001850154926001600160401b038460a01c166040611ec060ff8616610100890151611cd6565b51015260018060a01b0384166020611ee060ff8616610100890151611cd6565b5101526060611ef760ff8516610100880151611cd6565b510160ff8560e01c1615159052611f1360ff8560e81c166120cb565b6080611f2760ff8616610100890151611cd6565b51015260005b6080611f4160ff8616610100890151611cd6565b5101515160ff821690811015611fb45760ff91611fac8260019360005260028b0160205260406000206080611f7e8c610100898d16910151611cd6565b5101519060405190611f8f826118cd565b54868060a01b038116825260a01c6020820152610f148383611cd6565b500116611f2d565b50509091939260ff611fc99160f01c16612183565b60a0611fdd60ff8716610100870151611cd6565b51015260005b60a0611ff760ff8716610100870151611cd6565b5101515160ff8216101561205c5760018160ff80931660005260038801602052612054604060002061203e60a0612035878c166101008c0151611cd6565b510151916121eb565b61204a86851683611cd6565b5284831690611cd6565b500116611fe3565b50909350909160010160ff16611e47565b50915090565b60409694965190828201918083106001600160401b0384111761055f5760209260405260608152600083820152600060408201526000606082015260606080820152606060a082015282828701015201959395611e34565b906120d582611924565b6040906120e56040519182611903565b83815280936120f6601f1991611924565b019160009060005b84811061210c575050505050565b602090825161211a816118cd565b8481528285818301528287010152016120fe565b9190811015611cc05760051b0190565b356001600160601b038116810361077d5790565b9190916001600160601b038080941691160191821161216d57565b634e487b7160e01b600052601160045260246000fd5b9061218d82611924565b60409061219d6040519182611903565b83815280936121ae601f1991611924565b019160009160005b8481106121c4575050505050565b60209083516121d2816118e8565b85815282868183015286868301528285010152016121b6565b906040516121f8816118e8565b915460ff811615158352600881901c6001600160a01b0316602084015260a81c6040830152565b356001600160581b038116810361077d5790565b90600182811c92168015612263575b602083101461224d57565b634e487b7160e01b600052602260045260246000fd5b91607f1691612242565b80546000939261227c82612233565b918282526020936001916001811690816000146122e457506001146122a3575b5050505050565b90939495506000929192528360002092846000945b8386106122d05750505050010190388080808061229c565b8054858701830152940193859082016122b8565b60ff19168685015250505090151560051b01019150388080808061229c565b35906001600160601b038216820361077d57565b35906001600160581b038216820361077d57565b9190811015611cc0576060020190565b35801515810361077d5790565b9190811015611cc05760061b0190565b356001600160a01b038116810361077d5790565b908060209392818452848401376000828201840152601f01601f1916010190565b91818152602080910192916000916000905b8282106123ae57505050505090565b9091929394853560018060a01b0381168091036123f35781526001906001600160601b036123dd888501612303565b168184015260409081019601949392019061239f565b8580fd5b600054811015612411576000526001602052604060002090565b60405163184092c160e21b8152600490fd5b60ff81116124315760ff1690565b604051631a93c68960e11b8152600490fd5b9061246a575080511561245857805190602001fd5b60405163d6bda27560e01b8152600490fd5b8151158061249d575b61247b575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561247356fea264697066735822122081e3729815a1491c5afd8a74366f6f5c43421d7987d5c2c6575385bc0c90727564736f6c6343000817003360808060405234610016576109d8908161001c8239f35b600080fdfe60806040526004361015610018575b361561001657005b005b60003560e01c806343d92ab2146102c557806365b145fb146102b15780637d2e90c214610244578063a4ad9d8e146100e25763beabacc80361000e57346100dd5760603660031901126100dd5761006d610783565b6001600160a01b039060243582811691908290036100dd57604435926000541633036100cb578261009a57005b610016926040519263a9059cbb60e01b602085015260248401526044830152604482526100c6826107f1565b6108cd565b6040516330cd747160e01b8152600490fd5b600080fd5b60403660031901126100dd576100f6610783565b6024906001600160401b039082358281116100dd576101199036906004016107c1565b92610122610843565b6001600160a01b039283169160005b85811061013a57005b8060061b820135908582168083036100dd576040516020918282019063095ea7b360e01b90818352898d85015260008060449481198688015285875261017f876107f1565b86519082855af19061018f610876565b82610211575b5081610206575b50156101b1575b505050506001915001610131565b60405193840152878b84015260008184015282526080820193828510878611176101f1576100c66101e893600196604052826108cd565b888080806101a3565b8a634e487b7160e01b60005260416004526000fd5b90503b15158d61019c565b80919250519086821592831561022c575b505050908e610195565b61023c93508201810191016108b5565b8e8681610222565b346100dd5760403660031901126100dd576004356001600160a01b03818116918290036100dd57602435906000541633036100cb57801591821561028457005b60009283928392839283906102a8575bf11561029c57005b6040513d6000823e3d90fd5b506108fc610294565b60003660031901126100dd57610016610843565b346100dd576101003660031901126100dd576102df610783565b6001600160401b03602435116100dd573660236024350112156100dd576001600160401b0360243560040135116100dd5736602480356004013581350101116100dd576044356001600160401b03811681036100dd57606435916001600160a01b03831683036100dd57608435926001600160a01b03841684036100dd5760a435926001600160601b03841684036100dd5760c4356001600160401b0381116100dd576103909036906004016107c1565b9190926001600160401b0360e435116100dd5736602360e4350112156100dd576001600160401b0360e43560040135116100dd5736602460e4356004013560051b60e4350101116100dd576000546001600160a01b031633036107725793826101048793968995604051988997637e19374560e01b895260c060048a01526024356004013560c48a015260243560040135602480350160e48b0137600060e4602435600401358b010152601f19601f6024356004013501168901936001600160401b0360e48601931660248b015260018060a01b031660448a015260018060a01b0316606489015260e08884030160848901525201949060005b818110610728575050508284036003190160a4840152600460e4359081013580865260051b850160209081019560249092019160009181015b60e43560040135831061053c575050505082906001600160601b03826020960393169060018060a01b03165af1801561029c57600090610509575b602090604051908152f35b506020813d602011610534575b8161052360209383610822565b810103126100dd57602090516104fe565b3d9150610516565b91939550919395601f1983820301825284359060821960e4353603018212156100dd576001600160a01b0361057760e4358401602401610799565b16815260e4358201368190036042190160449091013512156100dd5760e4358201604481013501916001600160401b036024840135116100dd57602483013560061b360360448401136100dd576060602083015260248301356060830152608082019260448101906000905b602481013582106106e85750505060e4358101368190036042190160649091013512156100dd5760e43501606481013501916001600160401b036024840135116100dd576060602484013502360360448401136100dd57816040602093830391015260248301358152019060448101906000905b6024810135821061067e5750505060208060019296019201930190918795939694966104c3565b909192833580151581036100dd57151581526001600160a01b036106a460208601610799565b1660208201526040840135906affffffffffffffffffffff821682036100dd57606080916affffffffffffffffffffff600194166040820152019401920190610657565b909194604080600192838060a01b036107008a610799565b1681526001600160601b0361071760208b016107ad565b1660208201520196019201906105e3565b91939560019193955060408091838060a01b0361074488610799565b16815260206001600160601b0361075c828a016107ad565b169082015201940191019186949295939561048a565b6330cd747160e01b60805260046080fd5b600435906001600160a01b03821682036100dd57565b35906001600160a01b03821682036100dd57565b35906001600160601b03821682036100dd57565b9181601f840112156100dd578235916001600160401b0383116100dd576020808501948460061b0101116100dd57565b608081019081106001600160401b0382111761080c57604052565b634e487b7160e01b600052604160045260246000fd5b90601f801991011681019081106001600160401b0382111761080c57604052565b6000546001600160a01b038116610865576001600160a01b0319163317600055565b60405162dc149f60e41b8152600490fd5b3d156108b0573d906001600160401b03821161080c57604051916108a4601f8201601f191660200184610822565b82523d6000602084013e565b606090565b908160209103126100dd575180151581036100dd5790565b6000806108f69260018060a01b03169360208151910182865af16108ef610876565b908361093f565b8051908115159182610924575b505061090c5750565b60249060405190635274afe760e01b82526004820152fd5b61093792506020809183010191016108b5565b153880610903565b90610966575080511561095457805190602001fd5b60405163d6bda27560e01b8152600490fd5b81511580610999575b610977575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561096f56fea26469706673582212205ddf1a432c63285daebce8073cb7ba148e37e9ef158804605c0e0b49ad96cd9f64736f6c63430008170033000000000000000000000000ef699ca61f04916358e446ba0dbb9c6ab9f86a5c","gas":"2714552","from":"0xaF7E68bCb2Fc7295492A00177f14F59B92814e70","transactionSettings":{"chainId":11155111,"nonce":"116","baseFee":"1000000000","priorityFee":"1000000000"},"salt":"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000OPENMESHTEST","artifact":{"abi":[{"type":"constructor","inputs":[{"name":"_tasks","type":"address","internalType":"contract ITasks"}],"stateMutability":"nonpayable"},{"type":"receive","stateMutability":"payable"},{"type":"function","name":"acceptProject","inputs":[{"name":"_rfpId","type":"uint256","internalType":"uint256"},{"name":"_projectId","type":"uint32","internalType":"uint32"},{"name":"_nativeReward","type":"uint96[]","internalType":"uint96[]"},{"name":"_reward","type":"uint88[]","internalType":"uint88[]"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createRFP","inputs":[{"name":"_metadata","type":"string","internalType":"string"},{"name":"_deadline","type":"uint64","internalType":"uint64"},{"name":"_budget","type":"tuple[]","internalType":"struct ITasks.ERC20Transfer[]","components":[{"name":"tokenContract","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"_tasksManager","type":"address","internalType":"address"},{"name":"_disputeManager","type":"address","internalType":"address"},{"name":"_manager","type":"address","internalType":"address"}],"outputs":[{"name":"rfpId","type":"uint256","internalType":"uint256"}],"stateMutability":"payable"},{"type":"function","name":"emptyRFP","inputs":[{"name":"_rfpId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"escrowImplementation","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getRFP","inputs":[{"name":"_rfpId","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"offchainRFP","type":"tuple","internalType":"struct IRFPs.OffChainRFP","components":[{"name":"metadata","type":"string","internalType":"string"},{"name":"deadline","type":"uint64","internalType":"uint64"},{"name":"escrow","type":"address","internalType":"contract RFPEscrow"},{"name":"creator","type":"address","internalType":"address"},{"name":"tasksManager","type":"address","internalType":"address"},{"name":"disputeManager","type":"address","internalType":"address"},{"name":"manager","type":"address","internalType":"address"},{"name":"budget","type":"address[]","internalType":"contract IERC20[]"},{"name":"projects","type":"tuple[]","internalType":"struct IRFPs.OffchainProject[]","components":[{"name":"metadata","type":"string","internalType":"string"},{"name":"representative","type":"address","internalType":"address"},{"name":"deadline","type":"uint64","internalType":"uint64"},{"name":"accepted","type":"bool","internalType":"bool"},{"name":"nativeReward","type":"tuple[]","internalType":"struct ITasks.NativeReward[]","components":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"reward","type":"tuple[]","internalType":"struct ITasks.Reward[]","components":[{"name":"nextToken","type":"bool","internalType":"bool"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint88","internalType":"uint88"}]}]}]}],"stateMutability":"view"},{"type":"function","name":"getRFPs","inputs":[{"name":"_rfpIds","type":"uint256[]","internalType":"uint256[]"}],"outputs":[{"name":"","type":"tuple[]","internalType":"struct IRFPs.OffChainRFP[]","components":[{"name":"metadata","type":"string","internalType":"string"},{"name":"deadline","type":"uint64","internalType":"uint64"},{"name":"escrow","type":"address","internalType":"contract RFPEscrow"},{"name":"creator","type":"address","internalType":"address"},{"name":"tasksManager","type":"address","internalType":"address"},{"name":"disputeManager","type":"address","internalType":"address"},{"name":"manager","type":"address","internalType":"address"},{"name":"budget","type":"address[]","internalType":"contract IERC20[]"},{"name":"projects","type":"tuple[]","internalType":"struct IRFPs.OffchainProject[]","components":[{"name":"metadata","type":"string","internalType":"string"},{"name":"representative","type":"address","internalType":"address"},{"name":"deadline","type":"uint64","internalType":"uint64"},{"name":"accepted","type":"bool","internalType":"bool"},{"name":"nativeReward","type":"tuple[]","internalType":"struct ITasks.NativeReward[]","components":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"reward","type":"tuple[]","internalType":"struct ITasks.Reward[]","components":[{"name":"nextToken","type":"bool","internalType":"bool"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint88","internalType":"uint88"}]}]}]}],"stateMutability":"view"},{"type":"function","name":"owner","inputs":[],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"pure"},{"type":"function","name":"rfpCount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"submitProject","inputs":[{"name":"_rfpId","type":"uint256","internalType":"uint256"},{"name":"_metadata","type":"string","internalType":"string"},{"name":"_deadline","type":"uint64","internalType":"uint64"},{"name":"_nativeReward","type":"tuple[]","internalType":"struct ITasks.NativeReward[]","components":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"_reward","type":"tuple[]","internalType":"struct ITasks.Reward[]","components":[{"name":"nextToken","type":"bool","internalType":"bool"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint88","internalType":"uint88"}]}],"outputs":[{"name":"projectId","type":"uint32","internalType":"uint32"}],"stateMutability":"nonpayable"},{"type":"function","name":"tasks","inputs":[],"outputs":[{"name":"","type":"address","internalType":"contract ITasks"}],"stateMutability":"view"},{"type":"event","name":"ProjectAccepted","inputs":[{"name":"rfpId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"projectId","type":"uint32","indexed":false,"internalType":"uint32"},{"name":"nativeReward","type":"uint96[]","indexed":false,"internalType":"uint96[]"},{"name":"reward","type":"uint88[]","indexed":false,"internalType":"uint88[]"},{"name":"taskId","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"ProjectSubmitted","inputs":[{"name":"rfpId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"projectId","type":"uint32","indexed":false,"internalType":"uint32"},{"name":"metadata","type":"string","indexed":false,"internalType":"string"},{"name":"representative","type":"address","indexed":false,"internalType":"address"},{"name":"deadline","type":"uint64","indexed":false,"internalType":"uint64"},{"name":"nativeReward","type":"tuple[]","indexed":false,"internalType":"struct ITasks.NativeReward[]","components":[{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"reward","type":"tuple[]","indexed":false,"internalType":"struct ITasks.Reward[]","components":[{"name":"nextToken","type":"bool","internalType":"bool"},{"name":"to","type":"address","internalType":"address"},{"name":"amount","type":"uint88","internalType":"uint88"}]}],"anonymous":false},{"type":"event","name":"RFPCreated","inputs":[{"name":"rfpId","type":"uint256","indexed":true,"internalType":"uint256"},{"name":"metadata","type":"string","indexed":false,"internalType":"string"},{"name":"deadline","type":"uint64","indexed":false,"internalType":"uint64"},{"name":"nativeBudget","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"budget","type":"tuple[]","indexed":false,"internalType":"struct ITasks.ERC20Transfer[]","components":[{"name":"tokenContract","type":"address","internalType":"contract IERC20"},{"name":"amount","type":"uint96","internalType":"uint96"}]},{"name":"creator","type":"address","indexed":false,"internalType":"address"},{"name":"tasksManager","type":"address","indexed":false,"internalType":"address"},{"name":"disputeManager","type":"address","indexed":false,"internalType":"address"},{"name":"manager","type":"address","indexed":false,"internalType":"address"},{"name":"escrow","type":"address","indexed":false,"internalType":"contract RFPEscrow"}],"anonymous":false},{"type":"event","name":"RFPEmptied","inputs":[{"name":"rfpId","type":"uint256","indexed":true,"internalType":"uint256"}],"anonymous":false},{"type":"error","name":"AddressEmptyCode","inputs":[{"name":"target","type":"address","internalType":"address"}]},{"type":"error","name":"ERC1167FailedCreateClone","inputs":[]},{"type":"error","name":"FailedCall","inputs":[]},{"type":"error","name":"InsufficientBalance","inputs":[{"name":"balance","type":"uint256","internalType":"uint256"},{"name":"needed","type":"uint256","internalType":"uint256"}]},{"type":"error","name":"NotManager","inputs":[]},{"type":"error","name":"Overflow","inputs":[]},{"type":"error","name":"ProjectAlreadyAccepted","inputs":[]},{"type":"error","name":"ProjectDoesNotExist","inputs":[]},{"type":"error","name":"RFPClosed","inputs":[]},{"type":"error","name":"RFPDoesNotExist","inputs":[]},{"type":"error","name":"RewardDoesntEndWithNextToken","inputs":[]},{"type":"error","name":"SafeERC20FailedOperation","inputs":[{"name":"token","type":"address","internalType":"address"}]}],"bytecode":"","compiler":{"version":"v0.8.23+commit.f704f362"},"contractName":"src/RFPs.sol:RFPs","license":"MIT","jsonDescription":{"language":"Solidity","sources":{"lib/openmesh-admin/lib/ens-reverse-claimable/src/ENSReverseClaimable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSReverseClaimable {\n    /// @notice ENS reverse name resolution is claimable by the owner of the contract.\n    function owner() external pure virtual returns (address) {\n        return 0xaF7E68bCb2Fc7295492A00177f14F59B92814e70; // plopmenz.eth\n    }\n}\n"},"lib/openmesh-admin/src/Openmesh.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Openmesh {\n    address constant OPENMESH_ADMIN = 0xB4e54a5B6b80AFdb5DC4B5d8c1c66b75FF75FCaE;\n}\n"},"lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ENSReverseClaimable} from \"../lib/ens-reverse-claimable/src/ENSReverseClaimable.sol\";\nimport {Openmesh} from \"./Openmesh.sol\";\n\ncontract OpenmeshENSReverseClaimable is Openmesh, ENSReverseClaimable {\n    /// @inheritdoc ENSReverseClaimable\n    function owner() external pure override returns (address) {\n        return OPENMESH_ADMIN;\n    }\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/interfaces/IERC1363.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1363.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"./IERC20.sol\";\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @title IERC1363\n * @dev Interface of the ERC-1363 standard as defined in the https://eips.ethereum.org/EIPS/eip-1363[ERC-1363].\n *\n * Defines an extension interface for ERC-20 tokens that supports executing code on a recipient contract\n * after `transfer` or `transferFrom`, or code on a spender contract after `approve`, in a single transaction.\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /*\n     * Note: the ERC-165 identifier for this interface is 0xb0202a11.\n     * 0xb0202a11 ===\n     *   bytes4(keccak256('transferAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('transferAndCall(address,uint256,bytes)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256)')) ^\n     *   bytes4(keccak256('transferFromAndCall(address,address,uint256,bytes)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256)')) ^\n     *   bytes4(keccak256('approveAndCall(address,uint256,bytes)'))\n     */\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferAndCall(address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism\n     * and then calls {IERC1363Receiver-onTransferReceived} on `to`.\n     * @param from The address which you want to send tokens from.\n     * @param to The address which you want to transfer to.\n     * @param value The amount of tokens to be transferred.\n     * @param data Additional data with no specified format, sent in call to `to`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function transferFromAndCall(address from, address to, uint256 value, bytes calldata data) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens and then calls {IERC1363Spender-onApprovalReceived} on `spender`.\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     * @param data Additional data with no specified format, sent in call to `spender`.\n     * @return A boolean value indicating whether the operation succeeded unless throwing.\n     */\n    function approveAndCall(address spender, uint256 value, bytes calldata data) external returns (bool);\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../utils/introspection/IERC165.sol\";\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../token/ERC20/IERC20.sol\";\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC1363} from \"../../../interfaces/IERC1363.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferAndCall, with a fallback to the simple {ERC20} transfer if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            safeTransfer(token, to, value);\n        } else if (!token.transferAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} transferFromAndCall, with a fallback to the simple {ERC20} transferFrom if the target\n     * has no code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function transferFromAndCallRelaxed(\n        IERC1363 token,\n        address from,\n        address to,\n        uint256 value,\n        bytes memory data\n    ) internal {\n        if (to.code.length == 0) {\n            safeTransferFrom(token, from, to, value);\n        } else if (!token.transferFromAndCall(from, to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Performs an {ERC1363} approveAndCall, with a fallback to the simple {ERC20} approve if the target has no\n     * code. This can be used to implement an {ERC721}-like safe transfer that rely on {ERC1363} checks when\n     * targeting contracts.\n     *\n     * NOTE: When the recipient address (`to`) has no code (i.e. is an EOA), this function behaves as {forceApprove}.\n     * Opposedly, when the recipient address (`to`) has code, this function only attempts to call {ERC1363-approveAndCall}\n     * once without retrying, and relies on the returned value to be true.\n     *\n     * Reverts if the returned value is other than `true`.\n     */\n    function approveAndCallRelaxed(IERC1363 token, address to, uint256 value, bytes memory data) internal {\n        if (to.code.length == 0) {\n            forceApprove(token, to, value);\n        } else if (!token.approveAndCall(to, value, data)) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\nimport {Errors} from \"./Errors.sol\";\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert Errors.InsufficientBalance(address(this).balance, amount);\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert Errors.FailedCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {Errors.FailedCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert Errors.InsufficientBalance(address(this).balance, value);\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {Errors.FailedCall}) in case\n     * of an unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {Errors.FailedCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {Errors.FailedCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert Errors.FailedCall();\n        }\n    }\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/utils/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of common custom errors used in multiple contracts\n *\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\n * It is recommended to avoid relying on the error API for critical functionality.\n */\nlibrary Errors {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error InsufficientBalance(uint256 balance, uint256 needed);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedCall();\n\n    /**\n     * @dev The deployment failed.\n     */\n    error FailedDeployment();\n}\n"},"lib/openrd-foundry/lib/openzeppelin-contracts/contracts/utils/introspection/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC-165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[ERC].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[ERC section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"},"lib/openrd-foundry/src/Escrow.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract Escrow {\r\n    using SafeERC20 for IERC20;\r\n\r\n    error AlreadyInitialized();\r\n    error NotOwner();\r\n\r\n    address internal owner;\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /// @notice Initializes the Escrow with the sender of the transaction as owner.\r\n    /// @dev This should be called in the same transaction as deploying the escrow, to prevent front running.\r\n    function __Escrow_init() public payable {\r\n        if (owner != address(0)) {\r\n            revert AlreadyInitialized();\r\n        }\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Transfers a certain amount of ERC20 token to a given address. Can only be called by the owner.\r\n    /// @param token The ERC20 contract address.\r\n    /// @param to The address to recieve the tokens.\r\n    /// @param amount The amount of ERC20 token to receive.\r\n    /// @dev Wont do anything if amount is 0.\r\n    function transfer(IERC20 token, address to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        if (amount != 0) {\r\n            token.safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Transfers a certain amount of native currency to a given address. Can only be called by the owner.\r\n    /// @param to The address to recieve the currency.\r\n    /// @param amount The amount of native currency to receive.\r\n    /// @dev Wont do anything if amount is 0.\r\n    function transferNative(address payable to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        if (amount != 0) {\r\n            to.transfer(amount);\r\n        }\r\n    }\r\n}\r\n"},"lib/openrd-foundry/src/ITasks.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Escrow, IERC20} from \"./Escrow.sol\";\r\n\r\ninterface ITasks {\r\n    error TaskDoesNotExist();\r\n    error TaskNotOpen();\r\n    error TaskNotTaken();\r\n    error TaskNotClosed();\r\n    error TaskClosed();\r\n\r\n    error NotManager();\r\n    error NotExecutor();\r\n    error NotDisputeManager();\r\n\r\n    error RewardAboveBudget();\r\n    error RewardDoesntEndWithNextToken();\r\n    error NotEnoughNativeCurrencyAttached();\r\n    error ApplicationDoesNotExist();\r\n    error NotYourApplication();\r\n    error ApplicationNotAccepted();\r\n    error SubmissionDoesNotExist();\r\n    error SubmissionAlreadyJudged();\r\n    error JudgementNone();\r\n\r\n    error RequestDoesNotExist();\r\n    error RequestAlreadyAccepted();\r\n    error RequestNotAccepted();\r\n    error RequestAlreadyExecuted();\r\n\r\n    error Overflow();\r\n    error ManualBudgetIncreaseNeeded();\r\n    error PartialRewardAboveFullReward();\r\n    error NativeTransferFailed();\r\n    error ERC1167FailedCreateClone();\r\n\r\n    // The budget here repesents the call of the funder to the escrow, the actual value in the escrow (actual budget) might differ in case of transfer fees / rewards.\r\n    event TaskCreated(\r\n        uint256 indexed taskId,\r\n        string metadata,\r\n        uint64 deadline,\r\n        address manager,\r\n        address disputeManager,\r\n        address creator,\r\n        uint96 nativeBudget,\r\n        ERC20Transfer[] budget,\r\n        Escrow escrow\r\n    );\r\n    event ApplicationCreated(\r\n        uint256 indexed taskId,\r\n        uint32 indexed applicationId,\r\n        string metadata,\r\n        address applicant,\r\n        NativeReward[] nativeReward,\r\n        Reward[] reward\r\n    );\r\n    event ApplicationAccepted(uint256 indexed taskId, uint32 indexed applicationId);\r\n    event TaskTaken(uint256 indexed taskId, uint32 indexed applicationId);\r\n    event SubmissionCreated(uint256 indexed taskId, uint8 indexed submissionId, string metadata);\r\n    event SubmissionReviewed(\r\n        uint256 indexed taskId, uint8 indexed submissionId, SubmissionJudgement judgement, string feedback\r\n    );\r\n    event TaskCompleted(uint256 indexed taskId, TaskCompletionSource source);\r\n\r\n    event CancelTaskRequested(uint256 indexed taskId, uint8 indexed requestId, string metadata);\r\n    event TaskCancelled(uint256 indexed taskId, string metadata);\r\n    event RequestAccepted(uint256 indexed taskId, RequestType indexed requestType, uint8 indexed requestId);\r\n    event RequestExecuted(uint256 indexed taskId, RequestType indexed requestType, uint8 indexed requestId, address by);\r\n\r\n    event DeadlineChanged(uint256 indexed taskId, uint64 newDeadline);\r\n    event BudgetChanged(uint256 indexed taskId); // Quite expensive to transfer budget into a datastructure to emit\r\n    event RewardIncreased(\r\n        uint256 indexed taskId, uint32 indexed applicationId, uint96[] nativeIncrease, uint88[] increase\r\n    );\r\n    event MetadataChanged(uint256 indexed taskId, string newMetadata);\r\n    event ManagerChanged(uint256 indexed taskId, address newManager);\r\n    event PartialPayment(uint256 indexed taskId, uint96[] partialNativeReward, uint88[] partialReward);\r\n\r\n    /// @notice A container for ERC20 transfer information.\r\n    /// @param tokenContract ERC20 token to transfer.\r\n    /// @param amount How much of this token should be transfered. uint96 to keep struct packed into a single uint256.\r\n    struct ERC20Transfer {\r\n        IERC20 tokenContract;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a native reward payout.\r\n    /// @param to Whom the native reward should be transfered to.\r\n    /// @param amount How much native reward should be transfered. uint96 to keep struct packed into a single uint256.\r\n    struct NativeReward {\r\n        address to;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a reward payout.\r\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\r\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\r\n    /// @notice nextToken should always be true for the last entry\r\n    /// @param to Whom this token should be transfered to.\r\n    /// @param amount How much of this token should be transfered. uint88 to keep struct packed into a single uint256.\r\n    struct Reward {\r\n        bool nextToken;\r\n        address to;\r\n        uint88 amount;\r\n    }\r\n\r\n    /// @notice A container for a task application.\r\n    /// @param metadata Metadata of the application. (IPFS hash)\r\n    /// @param applicant Who has submitted this application.\r\n    /// @param accepted If the application has been accepted by the manager.\r\n    /// @param nativeReward How much native currency the applicant wants for completion.\r\n    /// @param reward How much rewards the applicant wants for completion.\r\n    struct Application {\r\n        string metadata;\r\n        // Storage block seperator\r\n        address applicant;\r\n        bool accepted;\r\n        uint8 nativeRewardCount;\r\n        uint8 rewardCount;\r\n        // Storage block seperator\r\n        mapping(uint8 => NativeReward) nativeReward;\r\n        mapping(uint8 => Reward) reward;\r\n    }\r\n\r\n    struct OffChainApplication {\r\n        string metadata;\r\n        address applicant;\r\n        bool accepted;\r\n        NativeReward[] nativeReward;\r\n        Reward[] reward;\r\n    }\r\n\r\n    /// @notice For approving people on task creation (they are not required to make an application).\r\n    struct PreapprovedApplication {\r\n        address applicant;\r\n        NativeReward[] nativeReward;\r\n        Reward[] reward;\r\n    }\r\n\r\n    enum SubmissionJudgement {\r\n        None,\r\n        Accepted,\r\n        Rejected\r\n    }\r\n\r\n    /// @notice A container for a task submission.\r\n    /// @param metadata Metadata of the submission. (IPFS hash)\r\n    /// @param judgement Judgement cast on the submission.\r\n    /// @param feedback A response from the manager. (IPFS hash)\r\n    struct Submission {\r\n        string metadata;\r\n        string feedback;\r\n        SubmissionJudgement judgement;\r\n    }\r\n\r\n    // This is for future expansion of the request system\r\n    enum RequestType {CancelTask}\r\n\r\n    /// @notice A container for shared request information.\r\n    /// @param accepted If the request was accepted.\r\n    /// @param executed If the request was executed.\r\n    struct Request {\r\n        bool accepted;\r\n        bool executed;\r\n    }\r\n\r\n    /// @notice A container for a request to cancel the task.\r\n    /// @param request Request information.\r\n    /// @param metadata Metadata of the request. (IPFS hash, Why the task should be cancelled)\r\n    struct CancelTaskRequest {\r\n        Request request;\r\n        string metadata;\r\n    }\r\n\r\n    enum TaskState {\r\n        Open,\r\n        Taken,\r\n        Closed\r\n    }\r\n\r\n    /// @notice A container for task-related information.\r\n    /// @param metadata Metadata of the task. (IPFS hash)\r\n    /// @param deadline Block timestamp at which the task expires if not completed.\r\n    /// @param escrow The address of the escrow which holds the budget funds.\r\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param nativeBudget Maximum native currency reward that can be earned by completing the task.\r\n    /// @param creator Who has created the task.\r\n    /// @param disputeManager Who has the permission to complete the task without the managers approval.\r\n    /// @param manager Who has the permission to manage the task.\r\n    /// @param state Current state the task is in.\r\n    /// @param applications Applications to take the job.\r\n    /// @param executorApplication Index of the application that will execture the task.\r\n    /// @param submissions Submission made to finish the task.\r\n    struct Task {\r\n        string metadata;\r\n        // Storage block seperator\r\n        uint64 deadline;\r\n        Escrow escrow;\r\n        // Storage block seperator\r\n        uint96 nativeBudget;\r\n        address creator;\r\n        // Storage block seperator\r\n        address disputeManager;\r\n        // Storage block seperator\r\n        address manager;\r\n        TaskState state;\r\n        uint32 executorApplication;\r\n        uint8 budgetCount;\r\n        uint32 applicationCount;\r\n        uint8 submissionCount;\r\n        uint8 cancelTaskRequestCount;\r\n        // Storage block seperator\r\n        mapping(uint8 => ERC20Transfer) budget;\r\n        mapping(uint32 => Application) applications;\r\n        mapping(uint8 => Submission) submissions;\r\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\r\n    }\r\n\r\n    struct OffChainTask {\r\n        string metadata;\r\n        uint64 deadline;\r\n        uint32 executorApplication;\r\n        address manager;\r\n        address disputeManager;\r\n        address creator;\r\n        TaskState state;\r\n        Escrow escrow;\r\n        uint96 nativeBudget;\r\n        ERC20Transfer[] budget;\r\n        OffChainApplication[] applications;\r\n        Submission[] submissions;\r\n        CancelTaskRequest[] cancelTaskRequests;\r\n    }\r\n\r\n    enum TaskCompletionSource {\r\n        SubmissionAccepted,\r\n        Dispute\r\n    }\r\n\r\n    /// @notice Retrieves the current amount of created tasks.\r\n    function taskCount() external view returns (uint256);\r\n\r\n    /// @notice Retrieves all task information by id.\r\n    /// @param _taskId Id of the task.\r\n    function getTask(uint256 _taskId) external view returns (OffChainTask memory);\r\n\r\n    /// @notice Retrieves multiple tasks in a single call.\r\n    /// @param _taskIds Ids of the tasks.\r\n    function getTasks(uint256[] calldata _taskIds) external view returns (OffChainTask[] memory);\r\n\r\n    /// @notice Create a new task.\r\n    /// @param _metadata Metadata of the task. (IPFS hash)\r\n    /// @param _deadline Block timestamp at which the task expires if not completed.\r\n    /// @param _manager Who will manage the task (become the manager).\r\n    /// @param _disputeManager Who will manage the disputes (handle situations where the manager and executor are in disagreement).\r\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param _preapprove List of addresses (with reward) that are able to take the task without creating an application themselves.\r\n    /// @return taskId Id of the newly created task.\r\n    function createTask(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        address _manager,\r\n        address _disputeManager,\r\n        ERC20Transfer[] calldata _budget,\r\n        PreapprovedApplication[] calldata _preapprove\r\n    ) external payable returns (uint256 taskId);\r\n\r\n    /// @notice Apply to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of your application.\r\n    /// @param _nativeReward Wanted native currency for completing the task.\r\n    /// @param _reward Wanted rewards for completing the task.\r\n    /// @return applicationId Id of the newly created application.\r\n    function applyForTask(\r\n        uint256 _taskId,\r\n        string calldata _metadata,\r\n        NativeReward[] calldata _nativeReward,\r\n        Reward[] calldata _reward\r\n    ) external returns (uint32 applicationId);\r\n\r\n    /// @notice Accept application to allow them to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationIds Indexes of the applications to accept.\r\n    /// @dev Will revert if applicant reward is higher than the budget. increaseBudget should be called beforehand.\r\n    function acceptApplications(uint256 _taskId, uint32[] calldata _applicationIds) external;\r\n\r\n    /// @notice Take the task after your application has been accepted.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationId Index of application you made that has been accepted.\r\n    function takeTask(uint256 _taskId, uint32 _applicationId) external;\r\n\r\n    /// @notice Create a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of the submission. (IPFS hash)\r\n    /// @return submissionId Id of the newly created submission.\r\n    function createSubmission(uint256 _taskId, string calldata _metadata) external returns (uint8 submissionId);\r\n\r\n    /// @notice Review a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _submissionId Index of the submission that is reviewed.\r\n    /// @param _judgement Outcome of the review.\r\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\r\n    function reviewSubmission(\r\n        uint256 _taskId,\r\n        uint8 _submissionId,\r\n        SubmissionJudgement _judgement,\r\n        string calldata _feedback\r\n    ) external;\r\n\r\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Why the task was cancelled. (IPFS hash)\r\n    /// @return cancelTaskRequestId Id of the newly created request for task cancellation.\r\n    function cancelTask(uint256 _taskId, string calldata _metadata) external returns (uint8 cancelTaskRequestId);\r\n\r\n    /// @notice Accepts a request, executing the proposed action.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    /// @param _execute If the request should also be executed in this transaction.\r\n    function acceptRequest(uint256 _taskId, RequestType _requestType, uint8 _requestId, bool _execute) external;\r\n\r\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    function executeRequest(uint256 _taskId, RequestType _requestType, uint8 _requestId) external;\r\n\r\n    /// @notice Extend the deadline of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _extension How much to extend the deadline by.\r\n    function extendDeadline(uint256 _taskId, uint64 _extension) external;\r\n\r\n    /// @notice Increase the budget of the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _increase How much to increase each tokens amount by.\r\n    /// @dev Any attached native reward will also be used to increase the budget.\r\n    function increaseBudget(uint256 _taskId, uint96[] calldata _increase) external payable;\r\n\r\n    /// @notice Increase the reward of an application of the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationId Id of the application.\r\n    /// @param _nativeIncrease How much to increase each native amount by.\r\n    /// @param _increase How much to increase each tokens amount by.\r\n    function increaseReward(\r\n        uint256 _taskId,\r\n        uint32 _applicationId,\r\n        uint96[] calldata _nativeIncrease,\r\n        uint88[] calldata _increase\r\n    ) external;\r\n\r\n    /// @notice Edit the metadata of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newMetadata New metadata of the task.\r\n    /// @dev This metadata update might change the task completely. Show a warning to people who applied before the change.\r\n    function editMetadata(uint256 _taskId, string calldata _newMetadata) external;\r\n\r\n    /// @notice Transfers the manager role to a different address.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newManager What address should become the manager.\r\n    function transferManagement(uint256 _taskId, address _newManager) external;\r\n\r\n    /// @notice Completes the task through dispute resolution.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _partialNativeReward How much of each native reward should be paid out.\r\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\r\n    function completeByDispute(\r\n        uint256 _taskId,\r\n        uint96[] calldata _partialNativeReward,\r\n        uint88[] calldata _partialReward\r\n    ) external;\r\n\r\n    /// @notice Releases a part of the reward to the executor without marking the task as complete.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _partialNativeReward How much of each native reward should be paid out.\r\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\r\n    /// @dev Will fetch balanceOf to set the budget afterwards, can be used in case funds where sent manually to the escrow to sync the budget.\r\n    function partialPayment(uint256 _taskId, uint96[] calldata _partialNativeReward, uint88[] calldata _partialReward)\r\n        external;\r\n}\r\n"},"src/IRFPs.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {RFPEscrow, IERC20, SafeERC20} from \"./RFPEscrow.sol\";\r\nimport {ITasks} from \"../lib/openrd-foundry/src/ITasks.sol\";\r\n\r\ninterface IRFPs {\r\n    error RFPDoesNotExist();\r\n    error RFPClosed();\r\n    error NotManager();\r\n    error ProjectDoesNotExist();\r\n    error ProjectAlreadyAccepted();\r\n    error RewardDoesntEndWithNextToken();\r\n\r\n    error Overflow();\r\n    error ERC1167FailedCreateClone();\r\n\r\n    event RFPCreated(\r\n        uint256 indexed rfpId,\r\n        string metadata,\r\n        uint64 deadline,\r\n        uint256 nativeBudget,\r\n        ITasks.ERC20Transfer[] budget,\r\n        address creator,\r\n        address tasksManager,\r\n        address disputeManager,\r\n        address manager,\r\n        RFPEscrow escrow\r\n    );\r\n    event ProjectSubmitted(\r\n        uint256 indexed rfpId,\r\n        uint32 projectId,\r\n        string metadata,\r\n        address representative,\r\n        uint64 deadline,\r\n        ITasks.NativeReward[] nativeReward,\r\n        ITasks.Reward[] reward\r\n    );\r\n    event ProjectAccepted(\r\n        uint256 indexed rfpId, uint32 projectId, uint96[] nativeReward, uint88[] reward, uint256 taskId\r\n    );\r\n    event RFPEmptied(uint256 indexed rfpId);\r\n\r\n    /// @notice A container for a RFP project.\r\n    /// @param metadata Metadata of the project. (IPFS hash)\r\n    /// @param representative Who has submitted this project.\r\n    /// @param deadline The deadline after which the project should be completed.\r\n    /// @param accepted If the project has been accepted. To prevent 2 OpenR&D tasks from being created.\r\n    /// @param nativeReward How much native currency the representative wants for completion.\r\n    /// @param reward How much rewards the representative wants for completion.\r\n    struct Project {\r\n        string metadata;\r\n        address representative;\r\n        uint64 deadline;\r\n        bool accepted;\r\n        uint8 nativeRewardCount;\r\n        uint8 rewardCount;\r\n        mapping(uint8 => ITasks.NativeReward) nativeReward;\r\n        mapping(uint8 => ITasks.Reward) reward;\r\n    }\r\n\r\n    struct OffchainProject {\r\n        string metadata;\r\n        address representative;\r\n        uint64 deadline;\r\n        bool accepted;\r\n        ITasks.NativeReward[] nativeReward;\r\n        ITasks.Reward[] reward;\r\n    }\r\n\r\n    /// @notice A container for RFP-related information.\r\n    /// @param metadata Metadata of the RFP. (IPFS hash)\r\n    /// @param deadline Block timestamp at which the RFP closes.\r\n    /// @param budget The ERC20 contracts that compose the budget.\r\n    /// @param creator Who has created the RFP.\r\n    /// @param tasksManager Who has the permission to manage the OpenR&D tasks.\r\n    /// @param disputeManager Who has the permission to manage disputes on the OpenR&D tasks.\r\n    /// @param manager Who has the permission to manage the RFP.\r\n    /// @param projects Projects that want to be funded by the RFP.\r\n    struct RFP {\r\n        string metadata;\r\n        // Storage block seperator\r\n        uint64 deadline;\r\n        RFPEscrow escrow;\r\n        // Storage block seperator\r\n        address creator;\r\n        // Storage block seperator\r\n        address tasksManager;\r\n        // Storage block seperator\r\n        address disputeManager;\r\n        // Storage block seperator\r\n        address manager;\r\n        uint8 budgetCount;\r\n        uint32 projectCount;\r\n        // Storage block seperator\r\n        mapping(uint8 => IERC20) budget;\r\n        mapping(uint32 => Project) projects;\r\n    }\r\n\r\n    struct OffChainRFP {\r\n        string metadata;\r\n        uint64 deadline;\r\n        RFPEscrow escrow;\r\n        address creator;\r\n        address tasksManager;\r\n        address disputeManager;\r\n        address manager;\r\n        IERC20[] budget;\r\n        OffchainProject[] projects;\r\n    }\r\n\r\n    /// @notice Retrieves the current amount of created RFPs.\r\n    function rfpCount() external view returns (uint256);\r\n\r\n    /// @notice Retrieves all RFP information by id.\r\n    /// @param _rfpId Id of the RFP.\r\n    function getRFP(uint256 _rfpId) external view returns (OffChainRFP memory);\r\n\r\n    /// @notice Retrieves multiple RFPs.\r\n    /// @param _rfpIds Ids of the RFPs.\r\n    function getRFPs(uint256[] calldata _rfpIds) external view returns (OffChainRFP[] memory);\r\n\r\n    /// @notice Create a new RFP.\r\n    /// @param _metadata Metadata of the RFP. (IPFS hash)\r\n    /// @param _deadline Block timestamp at which the RFP closes.\r\n    /// @param _budget Maximum ERC20 rewards avaliable for projects of the RFP.\r\n    /// @param _tasksManager Who will manage the project Tasks (become the OpenR&D manager).\r\n    /// @param _manager Who will manage the RFP (become the manager).\r\n    /// @return rfpId Id of the newly created RFP.\r\n    function createRFP(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ITasks.ERC20Transfer[] calldata _budget,\r\n        address _tasksManager,\r\n        address _disputeManager,\r\n        address _manager\r\n    ) external payable returns (uint256 rfpId);\r\n\r\n    /// @notice Propose a project to be funded by an RFP.\r\n    /// @param _rfpId Id of the RFP.\r\n    /// @param _metadata Metadata of your project.\r\n    /// @param _deadline Before when the proposed project will be completed.\r\n    /// @param _nativeReward Wanted native currency from the RFP for the project.\r\n    /// @param _reward Wanted rewards from the RFP for the project.\r\n    function submitProject(\r\n        uint256 _rfpId,\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ITasks.NativeReward[] calldata _nativeReward,\r\n        ITasks.Reward[] calldata _reward\r\n    ) external returns (uint32 projectId);\r\n\r\n    /// @notice Accept project to be funnded by the RFP.\r\n    /// @param _rfpId Id of the RFP.\r\n    /// @param _projectId Id of the project to accept.\r\n    /// @param _nativeReward Native reward granted to the project (can be lower or higher than requested).\r\n    /// @param _reward Reward granted to the project (can be lower or higher than requested).\r\n    function acceptProject(\r\n        uint256 _rfpId,\r\n        uint32 _projectId,\r\n        uint96[] calldata _nativeReward,\r\n        uint88[] calldata _reward\r\n    ) external;\r\n\r\n    /// @notice Refunds any leftover budget to the creator.\r\n    /// @param _rfpId Id of the RFP.\r\n    function emptyRFP(uint256 _rfpId) external;\r\n}\r\n"},"src/RFPEscrow.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Escrow, IERC20, SafeERC20} from \"../lib/openrd-foundry/src/Escrow.sol\";\nimport {ITasks} from \"../lib/openrd-foundry/src/ITasks.sol\";\n\ncontract RFPEscrow is Escrow {\n    using SafeERC20 for IERC20;\n\n    /// @notice Initializes the additional RFP logic and performs the base Escrow init.\n    function __RFPEscrow_init(ITasks _spender, ITasks.ERC20Transfer[] calldata _budget) public payable {\n        __Escrow_init();\n\n        for (uint256 i; i < _budget.length;) {\n            // Approve unlimited spending by the Tasks contract to save on gas fees\n            _budget[i].tokenContract.forceApprove(address(_spender), type(uint256).max);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice The Escrow created the task, so that any refunds will flow back to this, instead of the RFPs contract.\n    /// They can be withdrawn if no further tasks are desired to be funded by calling emptyRFP.\n    function createTask(\n        ITasks _tasks,\n        string calldata _metadata,\n        uint64 _deadline,\n        address _manager,\n        address _disputeManager,\n        uint96 _nativeBudget,\n        ITasks.ERC20Transfer[] calldata _budget,\n        ITasks.PreapprovedApplication[] calldata _preapprove\n    ) external returns (uint256) {\n        if (msg.sender != owner) {\n            revert NotOwner();\n        }\n\n        return _tasks.createTask{value: _nativeBudget}(\n            _metadata, _deadline, _manager, _disputeManager, _budget, _preapprove\n        );\n    }\n}\n"},"src/RFPs.sol":{"content":"// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {OpenmeshENSReverseClaimable} from \"../lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol\";\r\n\r\nimport {IRFPs, IERC20, RFPEscrow, ITasks, SafeERC20} from \"./IRFPs.sol\";\r\n\r\ncontract RFPs is OpenmeshENSReverseClaimable, IRFPs {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice The Tasks deployment where accepted projects will be created.\r\n    ITasks public immutable tasks;\r\n\r\n    /// @notice The incremental ID for RFPs.\r\n    uint256 private rfpCounter;\r\n\r\n    /// @notice A mapping between RFP IDs and RFP information.\r\n    mapping(uint256 => RFP) internal rfps;\r\n\r\n    /// @notice The base escrow contract that will be cloned for every RFP.\r\n    address public immutable escrowImplementation;\r\n\r\n    constructor(ITasks _tasks) {\r\n        tasks = _tasks;\r\n        escrowImplementation = address(new RFPEscrow());\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /// @inheritdoc IRFPs\r\n    function rfpCount() external view returns (uint256) {\r\n        return rfpCounter;\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function getRFP(uint256 _rfpId) public view returns (OffChainRFP memory offchainRFP) {\r\n        RFP storage rfp = _getRFP(_rfpId);\r\n        offchainRFP = _toOffchainRFP(rfp);\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function getRFPs(uint256[] memory _rfpIds) public view returns (OffChainRFP[] memory) {\r\n        OffChainRFP[] memory offchainRFPs = new OffChainRFP[](_rfpIds.length);\r\n        for (uint256 i; i < _rfpIds.length;) {\r\n            offchainRFPs[i] = getRFP(_rfpIds[i]);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return offchainRFPs;\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function createRFP(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ITasks.ERC20Transfer[] calldata _budget,\r\n        address _tasksManager,\r\n        address _disputeManager,\r\n        address _manager\r\n    ) external payable returns (uint256 rfpId) {\r\n        rfpId = rfpCounter++;\r\n        RFP storage rfp = rfps[rfpId];\r\n        rfp.metadata = _metadata;\r\n        rfp.deadline = _deadline;\r\n\r\n        RFPEscrow escrow = RFPEscrow(payable(clone(escrowImplementation)));\r\n        escrow.__RFPEscrow_init{value: msg.value}(tasks, _budget);\r\n        rfp.escrow = escrow;\r\n\r\n        rfp.budgetCount = _toUint8(_budget.length);\r\n        for (uint8 i; i < uint8(_budget.length);) {\r\n            _budget[i].tokenContract.safeTransferFrom(msg.sender, address(escrow), _budget[i].amount);\r\n\r\n            // Only token addresses are saved, the escrow can be topped up freely at any time\r\n            rfp.budget[i] = _budget[i].tokenContract;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        rfp.manager = _manager;\r\n        rfp.tasksManager = _tasksManager;\r\n        rfp.disputeManager = _disputeManager;\r\n        rfp.creator = msg.sender;\r\n\r\n        emit RFPCreated(\r\n            rfpId,\r\n            _metadata,\r\n            _deadline,\r\n            msg.value,\r\n            _budget,\r\n            msg.sender,\r\n            _tasksManager,\r\n            _disputeManager,\r\n            _manager,\r\n            escrow\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function submitProject(\r\n        uint256 _rfpId,\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ITasks.NativeReward[] calldata _nativeReward,\r\n        ITasks.Reward[] calldata _reward\r\n    ) external returns (uint32 projectId) {\r\n        RFP storage rfp = _getRFP(_rfpId);\r\n\r\n        // Ensure not past deadline\r\n        if (rfp.deadline <= block.timestamp) {\r\n            revert RFPClosed();\r\n        }\r\n\r\n        // Ensure reward ends with next token\r\n        unchecked {\r\n            if (_reward.length != 0 && !_reward[_reward.length - 1].nextToken) {\r\n                revert RewardDoesntEndWithNextToken();\r\n            }\r\n        }\r\n\r\n        projectId = rfp.projectCount++;\r\n        Project storage project = rfp.projects[projectId];\r\n        project.metadata = _metadata;\r\n        project.deadline = _deadline;\r\n        project.representative = msg.sender;\r\n\r\n        // Gas optimization\r\n        if (_nativeReward.length != 0) {\r\n            project.nativeRewardCount = _toUint8(_nativeReward.length);\r\n            for (uint8 i; i < uint8(_nativeReward.length);) {\r\n                project.nativeReward[i] = _nativeReward[i];\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Gas optimization\r\n        if (_reward.length != 0) {\r\n            project.rewardCount = _toUint8(_reward.length);\r\n            for (uint8 i; i < uint8(_reward.length);) {\r\n                project.reward[i] = _reward[i];\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit ProjectSubmitted(_rfpId, projectId, _metadata, msg.sender, _deadline, _nativeReward, _reward);\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function acceptProject(\r\n        uint256 _rfpId,\r\n        uint32 _projectId,\r\n        uint96[] calldata _nativeReward,\r\n        uint88[] calldata _reward\r\n    ) external {\r\n        RFP storage rfp = _getRFP(_rfpId);\r\n\r\n        // Ensure sender is manager\r\n        if (msg.sender != rfp.manager) {\r\n            revert NotManager();\r\n        }\r\n\r\n        // Ensure project exists\r\n        if (_projectId >= rfp.projectCount) {\r\n            revert ProjectDoesNotExist();\r\n        }\r\n\r\n        Project storage project = rfp.projects[_projectId];\r\n\r\n        // Ensure project not accepted\r\n        if (project.accepted) {\r\n            revert ProjectAlreadyAccepted();\r\n        }\r\n\r\n        uint96 taskNativeBudget;\r\n        ITasks.NativeReward[] memory taskNativeReward = new ITasks.NativeReward[](project.nativeRewardCount);\r\n        for (uint8 i; i < taskNativeReward.length;) {\r\n            taskNativeReward[i] = ITasks.NativeReward(project.nativeReward[i].to, _nativeReward[i]);\r\n            taskNativeBudget += _nativeReward[i];\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        ITasks.ERC20Transfer[] memory taskBudget = new ITasks.ERC20Transfer[](rfp.budgetCount);\r\n        ITasks.Reward[] memory taskReward = new ITasks.Reward[](project.rewardCount);\r\n        {\r\n            uint8 j;\r\n            for (uint8 i; i < taskBudget.length;) {\r\n                IERC20 erc20 = rfp.budget[i];\r\n                uint96 projectBudget;\r\n                while (j < taskReward.length) {\r\n                    taskReward[j] = project.reward[j];\r\n                    taskReward[j].amount = _reward[j];\r\n                    projectBudget += _reward[j];\r\n\r\n                    if (taskReward[j].nextToken) {\r\n                        unchecked {\r\n                            ++j;\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                    unchecked {\r\n                        ++j;\r\n                    }\r\n                }\r\n\r\n                taskBudget[i] = ITasks.ERC20Transfer(erc20, projectBudget);\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        ITasks.PreapprovedApplication[] memory preapproved = new ITasks.PreapprovedApplication[](1);\r\n        preapproved[0] = ITasks.PreapprovedApplication(project.representative, taskNativeReward, taskReward);\r\n\r\n        uint256 taskId = rfp.escrow.createTask(\r\n            tasks,\r\n            project.metadata,\r\n            project.deadline,\r\n            rfp.tasksManager,\r\n            rfp.disputeManager,\r\n            taskNativeBudget,\r\n            taskBudget,\r\n            preapproved\r\n        );\r\n        project.accepted = true;\r\n        emit ProjectAccepted(_rfpId, _projectId, _nativeReward, _reward, taskId);\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function emptyRFP(uint256 _rfpId) external {\r\n        RFP storage rfp = _getRFP(_rfpId);\r\n\r\n        // Ensure sender is manager\r\n        if (msg.sender != rfp.manager) {\r\n            revert NotManager();\r\n        }\r\n\r\n        rfp.escrow.transferNative(payable(rfp.creator), address(rfp.escrow).balance);\r\n\r\n        uint8 budgetCount = rfp.budgetCount;\r\n        for (uint8 i; i < budgetCount;) {\r\n            IERC20 erc20 = rfp.budget[i];\r\n\r\n            rfp.escrow.transfer(erc20, rfp.creator, erc20.balanceOf(address(rfp.escrow)));\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        emit RFPEmptied(_rfpId);\r\n    }\r\n\r\n    function _getRFP(uint256 _rfpId) internal view returns (RFP storage rfp) {\r\n        if (_rfpId >= rfpCounter) {\r\n            revert RFPDoesNotExist();\r\n        }\r\n\r\n        rfp = rfps[_rfpId];\r\n    }\r\n\r\n    function _toOffchainRFP(RFP storage rfp) internal view returns (OffChainRFP memory offchainRFP) {\r\n        offchainRFP.metadata = rfp.metadata;\r\n        offchainRFP.deadline = rfp.deadline;\r\n        offchainRFP.creator = rfp.creator;\r\n        offchainRFP.tasksManager = rfp.tasksManager;\r\n        offchainRFP.manager = rfp.manager;\r\n        offchainRFP.escrow = rfp.escrow;\r\n\r\n        offchainRFP.budget = new IERC20[](rfp.budgetCount);\r\n        for (uint8 i; i < offchainRFP.budget.length;) {\r\n            offchainRFP.budget[i] = rfp.budget[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        offchainRFP.projects = new OffchainProject[](rfp.projectCount);\r\n        for (uint8 i; i < offchainRFP.projects.length;) {\r\n            Project storage project = rfp.projects[i];\r\n            offchainRFP.projects[i].metadata = project.metadata;\r\n            offchainRFP.projects[i].deadline = project.deadline;\r\n            offchainRFP.projects[i].representative = project.representative;\r\n            offchainRFP.projects[i].accepted = project.accepted;\r\n\r\n            offchainRFP.projects[i].nativeReward = new ITasks.NativeReward[](project.nativeRewardCount);\r\n            for (uint8 j; j < offchainRFP.projects[i].nativeReward.length;) {\r\n                offchainRFP.projects[i].nativeReward[j] = project.nativeReward[j];\r\n                unchecked {\r\n                    ++j;\r\n                }\r\n            }\r\n\r\n            offchainRFP.projects[i].reward = new ITasks.Reward[](project.rewardCount);\r\n            for (uint8 j; j < offchainRFP.projects[i].reward.length;) {\r\n                offchainRFP.projects[i].reward[j] = project.reward[j];\r\n                unchecked {\r\n                    ++j;\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    // From: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Clones.sol\r\n    function clone(address implementation) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\r\n            // of the `implementation` address with the bytecode before the address.\r\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\r\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\r\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\r\n            instance := create(0, 0x09, 0x37)\r\n        }\r\n        if (instance == address(0)) {\r\n            revert ERC1167FailedCreateClone();\r\n        }\r\n    }\r\n\r\n    function _toUint8(uint256 value) internal pure returns (uint8) {\r\n        if (value > type(uint8).max) {\r\n            revert Overflow();\r\n        }\r\n        return uint8(value);\r\n    }\r\n}\r\n"}},"settings":{"optimizer":{"enabled":true,"runs":200},"remappings":["@openzeppelin/contracts/=lib/openrd-foundry/lib/openzeppelin-contracts/contracts/","ds-test/=lib/openmesh-admin/lib/forge-std/lib/ds-test/src/","ens-reverse-claimable/=lib/openmesh-admin/lib/ens-reverse-claimable/src/","erc4626-tests/=lib/openrd-foundry/lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","openmesh-admin/=lib/openmesh-admin/src/","openrd-foundry/=lib/openrd-foundry/src/","openzeppelin-contracts/=lib/openrd-foundry/lib/openzeppelin-contracts/","smart-account/=lib/openmesh-admin/lib/smart-account/src/"],"viaIR":true},"evmVersion":"paris","metadata":{"useLiteralContent":true}}},"source":"/home/plopmenz/openmesh-smart-contracts/lib/openrfp","submitted":{"transactionHash":"0xf70934d6a2ffafa228314d0ca435fa1f52798fe23f999618e454e84b25b4210d","date":"2024-03-27T19:44:47.517Z"}}