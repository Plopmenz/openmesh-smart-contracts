{
  "type": "deployment",
  "id": "OpenRFP_80001",
  "batch": "ploptest4",
  "batchIndex": 9,
  "deploymentAddress": "0x14384C4B046FB1908EC66cF0a936fA54053E2590",
  "constructorArgs": ["0x52a7E7C9EB8d92BdFC3B08550EDC8B1f7Eb5fE47"],
  "to": "0x4e59b44847b379578588920ca78fbf26c0b4956c",
  "value": "0",
  "data": "0x0000000000000000000000000000000000000000000000706c6f70746573743460c034620000df576001600160401b0390601f6200306a38819003918201601f191683019184831184841017620000cb57808492602094604052833981010312620000df57516001600160a01b0391908281168103620000df57608052604051906109cb9081830190811183821017620000cb5782916200269f833903905ff08015620000c0571660a0526040516125bb9081620000e4823960805181818160e9015281816102e30152611195015260a05181818161025d0152610d420152f35b6040513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b5f80fdfe6101c0604052600436101561001b575b3615610019575f80fd5b005b5f6101a0525f3560e01c806303523a3c146118125780631291f79d146117a457806320ff430b146116fa578063263daa0d1461150d5780632f72af34146114d657806337374f4c14610d715780634ca8ff5a14610d2a5780638da5cb5b14610cf9578063a42dab6314610742578063bfd890fd14610118578063c305a6d9146100d15763dea8a5910361000f57346100ca576101a0513660031901126100ca5760206101a05154604051908152f35b6101a05180fd5b346100ca576101a0513660031901126100ca576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60c03660031901126100ca576004356001600160401b0381116100ca57610143903690600401611cbc565b602435916001600160401b038316830361073e576044356001600160401b0381116100ca57610176903690600401611ce9565b90916064356001600160a01b038116810361073e57608435916001600160a01b038316830361073e5760a435956001600160a01b038716870361073e576101a05154925f19841461072457600184016101a05155836101a05152600160205260406101a05120976001600160401b03831161070a576101f58954612325565b601f81116106c0575b50826101a051601f8211600114610658576101a0519161064d575b508360011b905f198560031b1c19161789555b6001600160401b038a166001600160401b031960018b0154161760018a01556e5af43d82803e903d91602b57fd5bf37f0000000000000000000000000000000000000000000000000000000000000000763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8260881c16176101a0515260781b17602052603760096101a051f0956001600160a01b0387161561063b576001600160a01b0387163b156100ca5760408051635256cec760e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600482015260248101919091526101a051818061032c604482018d8f612477565b0381346001600160a01b038d165af1801561062d57610616575b5060018a01805468010000000000000000600160e01b031916604089901b68010000000000000000600160e01b031617905561038188612502565b60058b01805460ff60a01b191660a09290921b60ff60a01b169190911790556101a0515b60ff891660ff8216101561051d57886001600160601b036103ec60206103e68e6103db6103d660ff89168884612433565b612443565b9560ff881691612433565b01612237565b6040516323b872dd60e01b60208201523360248201526001600160a01b038c166044820152911660648083019190915281526001600160401b0360a08201908111908211176105095760a081016040526101a051815161047192829190602001826001600160a01b0387165af1610461611da2565b906001600160a01b038416612522565b80519081151591826104ee575b50506104cc57506001818c600661049e6103d68f8f60ff80991691612433565b918584165f520160205260405f2090838060a01b03166001600160601b0360a01b82541617905501166103a5565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6105019250602080918301019101611de0565b158e8061047e565b634e487b7160e01b5f52604160045260245ffd5b50908597916105dd8c7f91536f789dd78c27091e345c96c0cc07ba86b0364742aee608eaba8b795a3e5c98999460209c8e60026001600160601b0360a01b9160018060a01b038916836005830154161760058201556003810160018060a01b038c16848254161790556004810160018060a01b03891684825416179055019033908254161790556001600160401b036105c46040519b8c9b8c6101208091528d0191612457565b93168e8a01523460408a015288830360608a0152612477565b3360808701526001600160a01b0394851660a087015290841660c086015290831660e085015291166101008301520390a2604051908152f35b61061f9061197b565b6101a0516100ca578b610346565b6040513d6101a051823e3d90fd5b6040516330be1a3d60e21b8152600490fd5b90508401358b610219565b6101a080518c9052516020812092505b601f19861681106106a8575084601f1981161061068f575b5050600183811b01895561022c565b8501355f19600386901b60f8161c191690558a80610680565b9091602060018192858a013581550193019101610668565b896101a0515260206101a05120601f850160051c810160208610610703575b601f830160051c820181106106f55750506101fe565b6101a05181556001016106df565b50806106df565b634e487b7160e01b6101a05152604160045260246101a051fd5b634e487b7160e01b6101a05152601160045260246101a051fd5b5f80fd5b346100ca5760a03660031901126100ca576024356001600160401b0381116100ca57610772903690600401611cbc565b906001600160401b03604435166044350361073e576064356001600160401b0381116100ca576107a6903690600401611ce9565b90608435916001600160401b0383116100ca57366023840112156100ca576001600160401b038360040135116100ca573660246060856004013502850101116100ca576107f46004356124d9565b936001600160401b03600186015416421015610ce757600484013515158080610cc2575b610cb05760058601549563ffffffff808860a81c16146107245760079063ffffffff60a81b600163ffffffff8a60a81c160160a81b1663ffffffff60a81b19891617600582015563ffffffff8860a81c165f520160205260405f20906001600160401b03881161070a5761088c8254612325565b601f8111610c66575b50876101a051601f8211600114610bfe576101a05191610bf3575b508860011b905f198a60031b1c19161782555b6001820180546001600160e01b0319811660443560a01b67ffffffffffffffff60a01b1617331790915584610b2e575b50610a61575b506109236020916040949394519763ffffffff8860a81c16895260c0848a015260c0890191612457565b3360408801526001600160401b0360443516606088015286810360808801528381520190916101a0515b818110610a1b5750506020915084810360a086015282600401358152019060248101906101a051905b806004013582106109c1575050507f2788e7d7c40931d25e7d002379e04a016900cde1cdafea94d44f3f7b1a936b5383602094600435930390a263ffffffff6040519160a81c168152f35b9091928335908115158092036100ca5790815260019060609081906001600160a01b036109f060208901611c78565b1660208201526001600160581b03610a0a60408901612402565b166040820152019401920190610976565b909160019060409081906001600160a01b03610a3688611c78565b1681526001600160601b03610a4d602089016123ee565b16602082015201940191019291909261094d565b9491610a74856004989593980135612502565b60018701805460ff60f01b191660f09290921b60ff60f01b169190911790556101a0515b60ff86600401351660ff82161015610b2057600181610ac360ff809416896004013560248b01612416565b8382165f5260038a0160205260405f209084610ade82612426565b1515166101008560a81b03610af560208401612443565b60081b16916001600160a81b031990610b1090604001612311565b60a81b1691171790550116610a98565b5091945091946109236108f9565b60ff60e89994989396999792971b610b4586612502565b6001600160e01b031990921660443560a01b67ffffffffffffffff60a01b1617331760ff60e81b191660e89290921b161760018601556101a0515b60ff811660ff8616811015610be45760ff9181610ba0600193898e612433565b905f526002890160205260405f2090838060a01b03610bbe82612443565b16906001600160a01b031990610bd690602001612237565b60a01b161790550116610b80565b505094969390959196886108f3565b9050830135896108b0565b6101a08051859052516020812092505b601f198b168110610c4e575089601f19811610610c35575b5050600188811b0182556108c3565b8401355f1960038b901b60f8161c191690558880610c26565b90916020600181928589013581550193019101610c0e565b826101a0515260206101a05120601f8a0160051c810160208b10610ca9575b601f830160051c82018110610c9b575050610895565b6101a0518155600101610c85565b5080610c85565b604051631006c52360e01b8152600490fd5b50610ce1610cdc60048701355f1981019060248901612416565b612426565b15610818565b604051630ef7b67760e21b8152600490fd5b346100ca576101a0513660031901126100ca57602060405173cb762ab29cd7911b1d90ed588de9d1cbdf21cd688152f35b346100ca576101a0513660031901126100ca576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100ca5760803660031901126100ca5760243563ffffffff80821682036100ca576044356001600160401b0381116100ca57610db2903690600401611c8c565b6064939193356001600160401b0381116100ca57610dd4903690600401611c8c565b6101405290610de46004356124d9565b6005810154909390926001600160a01b03841633036114c457858460a81c1686831610156114b2578582165f526007850160205260405f20608052600160805101549560ff8760e01c166114a0576101a05195610e4760e889901c60ff166121c9565b6101a051979094905b855160ff8a1690811015610ee257610ed960ff92610ed3610ea38f948c600196610ecd838f815f526002608051016020528a8060a01b0360405f2054166001600160601b03610ea8610ea3858989612227565b612237565b60405192610eb58461198e565b8352166020820152610ec78383611d8e565b52611d8e565b50612227565b9061224b565b99011697610e50565b50868a959493928c9288610f1a60ff8d60a01c16610f10610f02826119e5565b60405160c05260c0516119c4565b8060c051526119e5565b6101a0515b601f1982018110611467575050610f3b60ff8a60f01c1661227a565b60a0526101a051610180819052610100525b60c0515160ff610100511610156110ea576101005160ff165f9081526006870160205260409020546101a051610160526001600160a01b0316985b60a051516101205260ff610180511660e0526101205160e05110156110dc5760e0515f52600360805101602052610fc160405f206122dd565b610fcf60e05160a051611d8e565b52610fde60e05160a051611d8e565b50611037610ffa610ff560e051610140518d612227565b612311565b604061100a60e05160a051611d8e565b51016001600160581b03809216905261102d610ff560e0518d6101405190612227565b166101605161224b565b6101605261104960e05160a051611d8e565b51516110625760ff600161018051011661018052610f88565b90919293949596979860ff6001610180510116610180525b604051906110878261198e565b81526001600160601b03610160511660208201526110ad60ff610100511660c051611d8e565b526110c060ff610100511660c051611d8e565b5060ff6001610100510116610100529796959493929190610f4d565b90919293949596979861107a565b94889195604051906110fb8261198e565b600182526101a0515b6020811061143057506040519061111a826119a9565b6001600160a01b0385168252602082015260a051604082015261113c82611d6d565b5261114681611d6d565b5060018060a01b03600183015460401c16926001600160601b0360018060a01b0360038501541693600460018060a01b039101541698604051998a956321ec955960e11b875260018060a01b037f000000000000000000000000000000000000000000000000000000000000000016600488015261010060248801526001600160401b036111da610104890160805161235d565b9560a01c166044880152606487015260848601521660a48401526003198382030160c4840152602060c05151918281520190602060c05101906101a0515b8181106113f9575050506003198382030160e4840152815180825260208201916020808360051b8301019401926101a051915b83831061139757505050505091818060209403916101a051905af193841561062d576101a05194611363575b5060808051600101805460ff60e01b1916600160e01b1790556040519590911685526020850181905284018190526101a05160a0850191905b81811061133957505060209150838103604085015261014051815201926101a0515b61014051811061131357606084018390526004357fb6c553e6537a417a3520cb59f37487db1585a760dfb66146d6f3431dc8037aa085870386a26101a05180f35b90936020806001926001600160581b0361132c89612402565b16815201950191016112d2565b90916020806001926001600160601b03611352886123ee565b1681520194019101929190926112b0565b9093506020813d60201161138f575b8161137f602093836119c4565b8101031261073e57519281611277565b3d9150611372565b9193955091936020806113e7600193601f1986820301875289519060406113d66060888060a01b03855116845286850151908088860152840190611a3a565b920151906040818403910152611a8a565b97019301930190928a9594929361124b565b825180516001600160a01b031685526020908101516001600160601b0316818601528b965060409094019390920191600101611218565b6020906040999593949951611444816119a9565b6101a0518152606080848301526040820152828287010152019792919397611104565b60209060409b939495969798999a9b516114808161198e565b5f81525f83820152828260c0510101520199989796959493929199610f1f565b60405163087aeca360e41b8152600490fd5b6040516338fde52b60e01b8152600490fd5b60405163607e454560e11b8152600490fd5b346100ca5760203660031901126100ca576115096114f5600435611df8565b604051918291602083526020830190611ae7565b0390f35b3461073e5760208060031936011261073e576004359061152c826124d9565b60058101805490926001600160a01b039291831633036114c457600192600183019181835460401c1660028501928084541690823191833b1561073e5760405190633e97486160e11b8252600482015260249260248201525f816044818382985af180156116ef576116db575b508760ff809a5460a01c166101a0515060066101a0519901915b6115ea575b8b7fdc7e0409b742bc5f5999ed477fba8518523be3d07b41b9a67ce75191f490cab86101a0516101a051a26101a05180f35b8a8916818110156116d5575f528186528260405f2054169883895460401c1685858a5416898d604051938480926370a0823160e01b82528760048301525afa91821561062d576101a051926116a6575b50823b156100ca5760049c6040519d8e6317d5759960e31b81520152878d0152878c01528a6064816101a051936101a051905af190811561062d578b9a8d92611688575b508a0116986115b3565b909a50611695915061197b565b6101a0516100ca578a8a998e61167e565b9091508981813d83116116ce575b6116be81836119c4565b8101031261073e5751905f61163a565b503d6116b4565b506115b8565b6116e49061197b565b5f6101a0528a611599565b6040513d5f823e3d90fd5b3461073e57606036600319011261073e576004356001600160a01b038181169182900361073e5760243590811680910361073e5773cb762ab29cd7911b1d90ed588de9d1cbdf21cd6833036114c4575f916044602092604051948593849263a9059cbb60e01b84526004840152833560248401525af180156116ef5761177c57005b6100199060203d60201161179d575b61179581836119c4565b810190611de0565b503d61178b565b3461073e57604036600319011261073e576004356001600160a01b0381169081900361073e5773cb762ab29cd7911b1d90ed588de9d1cbdf21cd6833036114c4575f80808093602435905af16117f8611da2565b501561180057005b604051633d2cec6f60e21b8152600490fd5b3461073e5760208060031936011261073e576004356001600160401b03811161073e573660238201121561073e57806004013561184e816119e5565b9161185c60405193846119c4565b81835260248484019260051b8201019136831161073e576024859201905b83821061196c5782858051906118a8611892836119e5565b926118a060405194856119c4565b8084526119e5565b601f1901835f5b828110611956575050505f5b81518110156118f657806118da6118d460019385611d8e565b51611df8565b6118e48286611d8e565b526118ef8185611d8e565b50016118bb565b50506040519082820192808352815180945260408301938160408260051b8601019301915f955b82871061192a5785850386f35b909192938280611946600193603f198a82030186528851611ae7565b960192019601959291909261191d565b61195e611d19565b8282870101520184906118af565b8135815290820190820161187a565b6001600160401b03811161050957604052565b604081019081106001600160401b0382111761050957604052565b606081019081106001600160401b0382111761050957604052565b90601f801991011681019081106001600160401b0382111761050957604052565b6001600160401b0381116105095760051b60200190565b91908251928382525f5b848110611a26575050825f602080949584010152601f8019910116010190565b602081830181015184830182015201611a06565b9081518082526020808093019301915f5b828110611a59575050505090565b835180516001600160a01b031686528201516001600160601b03168583015260409094019392810192600101611a4b565b9081518082526020808093019301915f5b828110611aa9575050505090565b8351805115158652808301516001600160a01b0316868401526040908101516001600160581b03169086015260609094019392810192600101611a9b565b90611afc6101208351908084528301906119fc565b9060209081840151916001600160401b038093168183015260409360408601519460018060a01b03809616604085015260609386606089015116606082015260808760808a015116608083015260a0908860a08b01511660a084015260c0928960c08c01511660c082015260e08b01519581810360e08301528780885192838152019701905f5b818110611c6257505050610100809b01519a8187039101528951968786528686019487808a60051b8901019c01995f975b8a8910611bcb575050505050505050505050505090565b909192939495969798999a9b9d9c8a8f611c488f6001948b611c388f958f94611c09908998601f198d880301905251958651908087528601906119fc565b85880151909116848801528b8501518b168c8501528c85015115158d8501528d8501518482038f860152611a3a565b920151908c818403910152611a8a565b9e0199019901979a9998969594939291909d9b9c9d611bb4565b82518d1689529789019791890191600101611b83565b35906001600160a01b038216820361073e57565b9181601f8401121561073e578235916001600160401b03831161073e576020808501948460051b01011161073e57565b9181601f8401121561073e578235916001600160401b03831161073e576020838186019501011161073e57565b9181601f8401121561073e578235916001600160401b03831161073e576020808501948460061b01011161073e57565b6040519061012082018281106001600160401b03821117610509576040526060610100838281525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201528260e08201520152565b805115611d7a5760200190565b634e487b7160e01b5f52603260045260245ffd5b8051821015611d7a5760209160051b010190565b3d15611ddb573d906001600160401b0382116105095760405191611dd0601f8201601f1916602001846119c4565b82523d5f602084013e565b606090565b9081602091031261073e5751801515810361073e5790565b611e0a90611e04611d19565b506124d9565b611e12611d19565b90604051611e2b81611e24818561235d565b03826119c4565b825260018101546001600160401b038116602084015260028201546001600160a01b039081166060850152600383015481166080850152600583015480821660c080870191909152604093841c9092169285019290925290939060a085901c60ff16611eaf611e99826119e5565b91611ea760405193846119c4565b8083526119e5565b601f190136602083013760e08501525f5b60e08501515160ff82161015611f055760018160ff8093165f5260068601602052818060a01b0360405f205416611efd84831660e08a0151611d8e565b520116611ec0565b5090919363ffffffff9060a81c1690611f1d826119e5565b91611f2b60405193846119c4565b808352611f3a601f19916119e5565b01905f5b828110612174575050506101008301525f5b6101008301515160ff8216101561216e5760ff81165f526007840160205260405f2093611f8560ff8316610100860151611d8e565b5160405190611f9f82611f98818a61235d565b03836119c4565b526001850154926001600160401b038460a01c166040611fc760ff8616610100890151611d8e565b51015260018060a01b0384166020611fe760ff8616610100890151611d8e565b5101526060611ffe60ff8516610100880151611d8e565b510160ff8560e01c161515905261201a60ff8560e81c166121c9565b608061202e60ff8616610100890151611d8e565b5101525f5b608061204760ff8616610100890151611d8e565b5101515160ff8216908110156120b85760ff916120b0826001935f5260028b0160205260405f2060806120828c610100898d16910151611d8e565b51015190604051906120938261198e565b54868060a01b038116825260a01c6020820152610ec78383611d8e565b500116612033565b50509091939260ff6120cd9160f01c1661227a565b60a06120e160ff8716610100870151611d8e565b5101525f5b60a06120fa60ff8716610100870151611d8e565b5101515160ff8216101561215d5760018160ff8093165f526003880160205261215560405f2061213f60a0612136878c166101008c0151611d8e565b510151916122dd565b61214b86851683611d8e565b5284831690611d8e565b5001166120e6565b50909350909160010160ff16611f50565b50915090565b60409694965190828201918083106001600160401b0384111761050957602092604052606081525f838201525f60408201525f606082015260606080820152606060a082015282828701015201959395611f3e565b906121d3826119e5565b6040906121e360405191826119c4565b83815280936121f4601f19916119e5565b01915f5b8381106122055750505050565b60209082516122138161198e565b5f8152825f818301528286010152016121f8565b9190811015611d7a5760051b0190565b356001600160601b038116810361073e5790565b9190916001600160601b038080941691160191821161226657565b634e487b7160e01b5f52601160045260245ffd5b90612284826119e5565b60409061229460405191826119c4565b83815280936122a5601f19916119e5565b01915f5b8381106122b65750505050565b60209082516122c4816119a9565b5f8152825f818301525f858301528286010152016122a9565b906040516122ea816119a9565b915460ff811615158352600881901c6001600160a01b0316602084015260a81c6040830152565b356001600160581b038116810361073e5790565b90600182811c92168015612353575b602083101461233f57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691612334565b80545f939261236b82612325565b918282526020936001916001811690815f146123cf5750600114612391575b5050505050565b90939495505f92919252835f2092845f945b8386106123bb57505050500101905f8080808061238a565b8054858701830152940193859082016123a3565b60ff19168685015250505090151560051b010191505f8080808061238a565b35906001600160601b038216820361073e57565b35906001600160581b038216820361073e57565b9190811015611d7a576060020190565b35801515810361073e5790565b9190811015611d7a5760061b0190565b356001600160a01b038116810361073e5790565b908060209392818452848401375f828201840152601f01601f1916010190565b9190808252602080920192915f905b828210612494575050505090565b9293919290916001906001600160a01b036124ae87611c78565b1681526001600160601b036124c48488016123ee565b16818401526040908101950193920190612486565b5f548110156124f0575f52600160205260405f2090565b60405163184092c160e21b8152600490fd5b60ff81116125105760ff1690565b604051631a93c68960e11b8152600490fd5b90612549575080511561253757805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061257c575b61255a575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561255256fea264697066735822122093c97d595546221ee268dc43da743a3b8eb5687498f28dd202618549130c1fcc64736f6c6343000817003360808060405234610016576109b0908161001b8239f35b5f80fdfe60806040526004361015610018575b361561001657005b005b5f3560e01c806343d92ab2146102b457806365b145fb146102a15780637d2e90c21461023c578063a4ad9d8e146100df5763beabacc80361000e57346100db5760603660031901126100db5761006c610761565b6001600160a01b039060243582811691908290036100db57604435925f541633036100c9578261009857005b610016926040519263a9059cbb60e01b602085015260248401526044830152604482526100c4826107cf565b6108a6565b6040516330cd747160e01b8152600490fd5b5f80fd5b60403660031901126100db576100f3610761565b6024906001600160401b039082358281116100db5761011690369060040161079f565b9261011f61081f565b6001600160a01b03928316915f5b85811061013657005b8060061b820135908582168083036100db576040516020918282019063095ea7b360e01b90818352898d8501525f8060449481198688015285875261017a876107cf565b86519082855af19061018a610850565b82610209575b50816101fe575b50156101ac575b50505050600191500161012d565b60405193840152878b8401525f8184015282526080820193828510878611176101eb576100c46101e293600196604052826108a6565b8880808061019e565b8a634e487b7160e01b5f5260416004525ffd5b90503b15158d610197565b809192505190868215928315610224575b505050908e610190565b610234935082018101910161088e565b8e868161021a565b346100db5760403660031901126100db576001600160a01b03600435818116908190036100db57602435915f541633036100c9578161027757005b5f80809381935af1610287610850565b501561028f57005b604051633d2cec6f60e21b8152600490fd5b5f3660031901126100db5761001661081f565b346100db576101003660031901126100db576102ce610761565b6001600160401b03602435116100db573660236024350112156100db576001600160401b0360243560040135116100db5736602480356004013581350101116100db576044356001600160401b03811681036100db57606435916001600160a01b03831683036100db57608435926001600160a01b03841684036100db5760a435926001600160601b03841684036100db5760c4356001600160401b0381116100db5761037f90369060040161079f565b9190926001600160401b0360e435116100db5736602360e4350112156100db576001600160401b0360e43560040135116100db5736602460e4356004013560051b60e4350101116100db575f546001600160a01b031633036107505793826101048793968995604051988997637e19374560e01b895260c060048a01526024356004013560c48a015260243560040135602480350160e48b01375f60e4602435600401358b010152601f19601f6024356004013501168901936001600160401b0360e48601931660248b015260018060a01b031660448a015260018060a01b0316606489015260e0888403016084890152520194905f5b818110610706575050508284036003190160a4840152600460e4359081013580865260051b85016020908101956024909201915f9181015b60e435600401358310610531575050505082906001600160601b03826020960393169060018060a01b03165af18015610526575f906104f3575b602090604051908152f35b506020813d60201161051e575b8161050d602093836107fe565b810103126100db57602090516104e8565b3d9150610500565b6040513d5f823e3d90fd5b91939550919395601f1983820301825260821960e435360301853512156100db576001600160a01b0361056b863560e43501602401610777565b168152843560e435016044810135903603604219018112156100db5760e43586350101906001600160401b036024830135116100db57602482013560061b360360448301136100db576060602082015260248201356060820152608081019160448101905f905b602481013582106106c657505050853560e435016064810135903603604219018112156100db5760e43587350101916001600160401b036024840135116100db576060602484013502360360448401136100db57816040602093830391015260248301358152019060448101905f905b602481013582106106695750505060208060019296019201930190918795939694966104ae565b90919283358015158091036100db5781526001600160a01b0361068e60208601610777565b1660208201526040840135906affffffffffffffffffffff82168092036100db57606081600193604083940152019401920190610642565b909193604080600192838060a01b036106de89610777565b1681526001600160601b036106f560208a0161078b565b1660208201520195019201906105d2565b91939560019193955060408091838060a01b0361072288610777565b16815260206001600160601b0361073a828a0161078b565b1690820152019401910191869492959395610476565b6330cd747160e01b60805260046080fd5b600435906001600160a01b03821682036100db57565b35906001600160a01b03821682036100db57565b35906001600160601b03821682036100db57565b9181601f840112156100db578235916001600160401b0383116100db576020808501948460061b0101116100db57565b608081019081106001600160401b038211176107ea57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f801991011681019081106001600160401b038211176107ea57604052565b5f546001600160a01b03811661083f576001600160a01b03191633175f55565b60405162dc149f60e41b8152600490fd5b3d15610889573d906001600160401b0382116107ea576040519161087e601f8201601f1916602001846107fe565b82523d5f602084013e565b606090565b908160209103126100db575180151581036100db5790565b5f806108ce9260018060a01b03169360208151910182865af16108c7610850565b9083610917565b80519081151591826108fc575b50506108e45750565b60249060405190635274afe760e01b82526004820152fd5b61090f925060208091830101910161088e565b155f806108db565b9061093e575080511561092c57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610971575b61094f575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561094756fea26469706673582212203870d9ca9fdbf5560c61d1fc877f78ee23660664ab254dd17a2bad288a94cf4464736f6c6343000817003300000000000000000000000052a7e7c9eb8d92bdfc3b08550edc8b1f7eb5fe47",
  "gas": "2756005",
  "from": "0xaF7E68bCb2Fc7295492A00177f14F59B92814e70",
  "transactionSettings": {
    "chainId": 80001,
    "nonce": "680",
    "baseFee": "1500000000",
    "priorityFee": "1500000000"
  },
  "salt": "\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ploptest4",
  "artifact": {
    "abi": [
      {
        "type": "constructor",
        "inputs": [
          {
            "name": "_tasks",
            "type": "address",
            "internalType": "contract ITasks"
          }
        ],
        "stateMutability": "nonpayable"
      },
      { "type": "receive", "stateMutability": "payable" },
      {
        "type": "function",
        "name": "acceptProject",
        "inputs": [
          { "name": "_rfpId", "type": "uint256", "internalType": "uint256" },
          { "name": "_projectId", "type": "uint32", "internalType": "uint32" },
          {
            "name": "_nativeReward",
            "type": "uint96[]",
            "internalType": "uint96[]"
          },
          { "name": "_reward", "type": "uint88[]", "internalType": "uint88[]" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "createRFP",
        "inputs": [
          { "name": "_metadata", "type": "string", "internalType": "string" },
          { "name": "_deadline", "type": "uint64", "internalType": "uint64" },
          {
            "name": "_budget",
            "type": "tuple[]",
            "internalType": "struct ITasks.ERC20Transfer[]",
            "components": [
              {
                "name": "tokenContract",
                "type": "address",
                "internalType": "contract IERC20"
              },
              { "name": "amount", "type": "uint96", "internalType": "uint96" }
            ]
          },
          {
            "name": "_tasksManager",
            "type": "address",
            "internalType": "address"
          },
          {
            "name": "_disputeManager",
            "type": "address",
            "internalType": "address"
          },
          { "name": "_manager", "type": "address", "internalType": "address" }
        ],
        "outputs": [
          { "name": "rfpId", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "payable"
      },
      {
        "type": "function",
        "name": "emptyRFP",
        "inputs": [
          { "name": "_rfpId", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "escrowImplementation",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "getRFP",
        "inputs": [
          { "name": "_rfpId", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [
          {
            "name": "offchainRFP",
            "type": "tuple",
            "internalType": "struct IRFPs.OffChainRFP",
            "components": [
              {
                "name": "metadata",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "deadline",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "escrow",
                "type": "address",
                "internalType": "contract RFPEscrow"
              },
              {
                "name": "creator",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "tasksManager",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "disputeManager",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "manager",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "budget",
                "type": "address[]",
                "internalType": "contract IERC20[]"
              },
              {
                "name": "projects",
                "type": "tuple[]",
                "internalType": "struct IRFPs.OffchainProject[]",
                "components": [
                  {
                    "name": "metadata",
                    "type": "string",
                    "internalType": "string"
                  },
                  {
                    "name": "representative",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "deadline",
                    "type": "uint64",
                    "internalType": "uint64"
                  },
                  {
                    "name": "accepted",
                    "type": "bool",
                    "internalType": "bool"
                  },
                  {
                    "name": "nativeReward",
                    "type": "tuple[]",
                    "internalType": "struct ITasks.NativeReward[]",
                    "components": [
                      {
                        "name": "to",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "amount",
                        "type": "uint96",
                        "internalType": "uint96"
                      }
                    ]
                  },
                  {
                    "name": "reward",
                    "type": "tuple[]",
                    "internalType": "struct ITasks.Reward[]",
                    "components": [
                      {
                        "name": "nextToken",
                        "type": "bool",
                        "internalType": "bool"
                      },
                      {
                        "name": "to",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "amount",
                        "type": "uint88",
                        "internalType": "uint88"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "getRFPs",
        "inputs": [
          {
            "name": "_rfpIds",
            "type": "uint256[]",
            "internalType": "uint256[]"
          }
        ],
        "outputs": [
          {
            "name": "",
            "type": "tuple[]",
            "internalType": "struct IRFPs.OffChainRFP[]",
            "components": [
              {
                "name": "metadata",
                "type": "string",
                "internalType": "string"
              },
              {
                "name": "deadline",
                "type": "uint64",
                "internalType": "uint64"
              },
              {
                "name": "escrow",
                "type": "address",
                "internalType": "contract RFPEscrow"
              },
              {
                "name": "creator",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "tasksManager",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "disputeManager",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "manager",
                "type": "address",
                "internalType": "address"
              },
              {
                "name": "budget",
                "type": "address[]",
                "internalType": "contract IERC20[]"
              },
              {
                "name": "projects",
                "type": "tuple[]",
                "internalType": "struct IRFPs.OffchainProject[]",
                "components": [
                  {
                    "name": "metadata",
                    "type": "string",
                    "internalType": "string"
                  },
                  {
                    "name": "representative",
                    "type": "address",
                    "internalType": "address"
                  },
                  {
                    "name": "deadline",
                    "type": "uint64",
                    "internalType": "uint64"
                  },
                  {
                    "name": "accepted",
                    "type": "bool",
                    "internalType": "bool"
                  },
                  {
                    "name": "nativeReward",
                    "type": "tuple[]",
                    "internalType": "struct ITasks.NativeReward[]",
                    "components": [
                      {
                        "name": "to",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "amount",
                        "type": "uint96",
                        "internalType": "uint96"
                      }
                    ]
                  },
                  {
                    "name": "reward",
                    "type": "tuple[]",
                    "internalType": "struct ITasks.Reward[]",
                    "components": [
                      {
                        "name": "nextToken",
                        "type": "bool",
                        "internalType": "bool"
                      },
                      {
                        "name": "to",
                        "type": "address",
                        "internalType": "address"
                      },
                      {
                        "name": "amount",
                        "type": "uint88",
                        "internalType": "uint88"
                      }
                    ]
                  }
                ]
              }
            ]
          }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "owner",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "address" }
        ],
        "stateMutability": "pure"
      },
      {
        "type": "function",
        "name": "rescue",
        "inputs": [
          {
            "name": "token",
            "type": "address",
            "internalType": "contract IERC20"
          },
          { "name": "to", "type": "address", "internalType": "address" },
          { "name": "amount", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "rescueNative",
        "inputs": [
          {
            "name": "to",
            "type": "address",
            "internalType": "address payable"
          },
          { "name": "amount", "type": "uint256", "internalType": "uint256" }
        ],
        "outputs": [],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "rfpCount",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "uint256", "internalType": "uint256" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "function",
        "name": "submitProject",
        "inputs": [
          { "name": "_rfpId", "type": "uint256", "internalType": "uint256" },
          { "name": "_metadata", "type": "string", "internalType": "string" },
          { "name": "_deadline", "type": "uint64", "internalType": "uint64" },
          {
            "name": "_nativeReward",
            "type": "tuple[]",
            "internalType": "struct ITasks.NativeReward[]",
            "components": [
              { "name": "to", "type": "address", "internalType": "address" },
              { "name": "amount", "type": "uint96", "internalType": "uint96" }
            ]
          },
          {
            "name": "_reward",
            "type": "tuple[]",
            "internalType": "struct ITasks.Reward[]",
            "components": [
              { "name": "nextToken", "type": "bool", "internalType": "bool" },
              { "name": "to", "type": "address", "internalType": "address" },
              { "name": "amount", "type": "uint88", "internalType": "uint88" }
            ]
          }
        ],
        "outputs": [
          { "name": "projectId", "type": "uint32", "internalType": "uint32" }
        ],
        "stateMutability": "nonpayable"
      },
      {
        "type": "function",
        "name": "tasks",
        "inputs": [],
        "outputs": [
          { "name": "", "type": "address", "internalType": "contract ITasks" }
        ],
        "stateMutability": "view"
      },
      {
        "type": "event",
        "name": "ProjectAccepted",
        "inputs": [
          {
            "name": "rfpId",
            "type": "uint256",
            "indexed": true,
            "internalType": "uint256"
          },
          {
            "name": "projectId",
            "type": "uint32",
            "indexed": false,
            "internalType": "uint32"
          },
          {
            "name": "nativeReward",
            "type": "uint96[]",
            "indexed": false,
            "internalType": "uint96[]"
          },
          {
            "name": "reward",
            "type": "uint88[]",
            "indexed": false,
            "internalType": "uint88[]"
          },
          {
            "name": "taskId",
            "type": "uint256",
            "indexed": false,
            "internalType": "uint256"
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "ProjectSubmitted",
        "inputs": [
          {
            "name": "rfpId",
            "type": "uint256",
            "indexed": true,
            "internalType": "uint256"
          },
          {
            "name": "projectId",
            "type": "uint32",
            "indexed": false,
            "internalType": "uint32"
          },
          {
            "name": "metadata",
            "type": "string",
            "indexed": false,
            "internalType": "string"
          },
          {
            "name": "representative",
            "type": "address",
            "indexed": false,
            "internalType": "address"
          },
          {
            "name": "deadline",
            "type": "uint64",
            "indexed": false,
            "internalType": "uint64"
          },
          {
            "name": "nativeReward",
            "type": "tuple[]",
            "indexed": false,
            "internalType": "struct ITasks.NativeReward[]",
            "components": [
              { "name": "to", "type": "address", "internalType": "address" },
              { "name": "amount", "type": "uint96", "internalType": "uint96" }
            ]
          },
          {
            "name": "reward",
            "type": "tuple[]",
            "indexed": false,
            "internalType": "struct ITasks.Reward[]",
            "components": [
              { "name": "nextToken", "type": "bool", "internalType": "bool" },
              { "name": "to", "type": "address", "internalType": "address" },
              { "name": "amount", "type": "uint88", "internalType": "uint88" }
            ]
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "RFPCreated",
        "inputs": [
          {
            "name": "rfpId",
            "type": "uint256",
            "indexed": true,
            "internalType": "uint256"
          },
          {
            "name": "metadata",
            "type": "string",
            "indexed": false,
            "internalType": "string"
          },
          {
            "name": "deadline",
            "type": "uint64",
            "indexed": false,
            "internalType": "uint64"
          },
          {
            "name": "nativeBudget",
            "type": "uint256",
            "indexed": false,
            "internalType": "uint256"
          },
          {
            "name": "budget",
            "type": "tuple[]",
            "indexed": false,
            "internalType": "struct ITasks.ERC20Transfer[]",
            "components": [
              {
                "name": "tokenContract",
                "type": "address",
                "internalType": "contract IERC20"
              },
              { "name": "amount", "type": "uint96", "internalType": "uint96" }
            ]
          },
          {
            "name": "creator",
            "type": "address",
            "indexed": false,
            "internalType": "address"
          },
          {
            "name": "tasksManager",
            "type": "address",
            "indexed": false,
            "internalType": "address"
          },
          {
            "name": "disputeManager",
            "type": "address",
            "indexed": false,
            "internalType": "address"
          },
          {
            "name": "manager",
            "type": "address",
            "indexed": false,
            "internalType": "address"
          },
          {
            "name": "escrow",
            "type": "address",
            "indexed": false,
            "internalType": "contract RFPEscrow"
          }
        ],
        "anonymous": false
      },
      {
        "type": "event",
        "name": "RFPEmptied",
        "inputs": [
          {
            "name": "rfpId",
            "type": "uint256",
            "indexed": true,
            "internalType": "uint256"
          }
        ],
        "anonymous": false
      },
      {
        "type": "error",
        "name": "AddressEmptyCode",
        "inputs": [
          { "name": "target", "type": "address", "internalType": "address" }
        ]
      },
      {
        "type": "error",
        "name": "AddressInsufficientBalance",
        "inputs": [
          { "name": "account", "type": "address", "internalType": "address" }
        ]
      },
      { "type": "error", "name": "ERC1167FailedCreateClone", "inputs": [] },
      { "type": "error", "name": "FailedInnerCall", "inputs": [] },
      { "type": "error", "name": "NativeTransferFailed", "inputs": [] },
      { "type": "error", "name": "NotManager", "inputs": [] },
      { "type": "error", "name": "Overflow", "inputs": [] },
      { "type": "error", "name": "ProjectAlreadyAccepted", "inputs": [] },
      { "type": "error", "name": "ProjectDoesNotExist", "inputs": [] },
      { "type": "error", "name": "RFPClosed", "inputs": [] },
      { "type": "error", "name": "RFPDoesNotExist", "inputs": [] },
      { "type": "error", "name": "RewardDoesntEndWithNextToken", "inputs": [] },
      {
        "type": "error",
        "name": "SafeERC20FailedOperation",
        "inputs": [
          { "name": "token", "type": "address", "internalType": "address" }
        ]
      }
    ],
    "bytecode": "0x60c034620000df576001600160401b0390601f6200306a38819003918201601f191683019184831184841017620000cb57808492602094604052833981010312620000df57516001600160a01b0391908281168103620000df57608052604051906109cb9081830190811183821017620000cb5782916200269f833903905ff08015620000c0571660a0526040516125bb9081620000e4823960805181818160e9015281816102e30152611195015260a05181818161025d0152610d420152f35b6040513d5f823e3d90fd5b634e487b7160e01b5f52604160045260245ffd5b5f80fdfe6101c0604052600436101561001b575b3615610019575f80fd5b005b5f6101a0525f3560e01c806303523a3c146118125780631291f79d146117a457806320ff430b146116fa578063263daa0d1461150d5780632f72af34146114d657806337374f4c14610d715780634ca8ff5a14610d2a5780638da5cb5b14610cf9578063a42dab6314610742578063bfd890fd14610118578063c305a6d9146100d15763dea8a5910361000f57346100ca576101a0513660031901126100ca5760206101a05154604051908152f35b6101a05180fd5b346100ca576101a0513660031901126100ca576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b60c03660031901126100ca576004356001600160401b0381116100ca57610143903690600401611cbc565b602435916001600160401b038316830361073e576044356001600160401b0381116100ca57610176903690600401611ce9565b90916064356001600160a01b038116810361073e57608435916001600160a01b038316830361073e5760a435956001600160a01b038716870361073e576101a05154925f19841461072457600184016101a05155836101a05152600160205260406101a05120976001600160401b03831161070a576101f58954612325565b601f81116106c0575b50826101a051601f8211600114610658576101a0519161064d575b508360011b905f198560031b1c19161789555b6001600160401b038a166001600160401b031960018b0154161760018a01556e5af43d82803e903d91602b57fd5bf37f0000000000000000000000000000000000000000000000000000000000000000763d602d80600a3d3981f3363d3d373d3d3d363d7300000062ffffff8260881c16176101a0515260781b17602052603760096101a051f0956001600160a01b0387161561063b576001600160a01b0387163b156100ca5760408051635256cec760e11b81527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316600482015260248101919091526101a051818061032c604482018d8f612477565b0381346001600160a01b038d165af1801561062d57610616575b5060018a01805468010000000000000000600160e01b031916604089901b68010000000000000000600160e01b031617905561038188612502565b60058b01805460ff60a01b191660a09290921b60ff60a01b169190911790556101a0515b60ff891660ff8216101561051d57886001600160601b036103ec60206103e68e6103db6103d660ff89168884612433565b612443565b9560ff881691612433565b01612237565b6040516323b872dd60e01b60208201523360248201526001600160a01b038c166044820152911660648083019190915281526001600160401b0360a08201908111908211176105095760a081016040526101a051815161047192829190602001826001600160a01b0387165af1610461611da2565b906001600160a01b038416612522565b80519081151591826104ee575b50506104cc57506001818c600661049e6103d68f8f60ff80991691612433565b918584165f520160205260405f2090838060a01b03166001600160601b0360a01b82541617905501166103a5565b604051635274afe760e01b81526001600160a01b039091166004820152602490fd5b6105019250602080918301019101611de0565b158e8061047e565b634e487b7160e01b5f52604160045260245ffd5b50908597916105dd8c7f91536f789dd78c27091e345c96c0cc07ba86b0364742aee608eaba8b795a3e5c98999460209c8e60026001600160601b0360a01b9160018060a01b038916836005830154161760058201556003810160018060a01b038c16848254161790556004810160018060a01b03891684825416179055019033908254161790556001600160401b036105c46040519b8c9b8c6101208091528d0191612457565b93168e8a01523460408a015288830360608a0152612477565b3360808701526001600160a01b0394851660a087015290841660c086015290831660e085015291166101008301520390a2604051908152f35b61061f9061197b565b6101a0516100ca578b610346565b6040513d6101a051823e3d90fd5b6040516330be1a3d60e21b8152600490fd5b90508401358b610219565b6101a080518c9052516020812092505b601f19861681106106a8575084601f1981161061068f575b5050600183811b01895561022c565b8501355f19600386901b60f8161c191690558a80610680565b9091602060018192858a013581550193019101610668565b896101a0515260206101a05120601f850160051c810160208610610703575b601f830160051c820181106106f55750506101fe565b6101a05181556001016106df565b50806106df565b634e487b7160e01b6101a05152604160045260246101a051fd5b634e487b7160e01b6101a05152601160045260246101a051fd5b5f80fd5b346100ca5760a03660031901126100ca576024356001600160401b0381116100ca57610772903690600401611cbc565b906001600160401b03604435166044350361073e576064356001600160401b0381116100ca576107a6903690600401611ce9565b90608435916001600160401b0383116100ca57366023840112156100ca576001600160401b038360040135116100ca573660246060856004013502850101116100ca576107f46004356124d9565b936001600160401b03600186015416421015610ce757600484013515158080610cc2575b610cb05760058601549563ffffffff808860a81c16146107245760079063ffffffff60a81b600163ffffffff8a60a81c160160a81b1663ffffffff60a81b19891617600582015563ffffffff8860a81c165f520160205260405f20906001600160401b03881161070a5761088c8254612325565b601f8111610c66575b50876101a051601f8211600114610bfe576101a05191610bf3575b508860011b905f198a60031b1c19161782555b6001820180546001600160e01b0319811660443560a01b67ffffffffffffffff60a01b1617331790915584610b2e575b50610a61575b506109236020916040949394519763ffffffff8860a81c16895260c0848a015260c0890191612457565b3360408801526001600160401b0360443516606088015286810360808801528381520190916101a0515b818110610a1b5750506020915084810360a086015282600401358152019060248101906101a051905b806004013582106109c1575050507f2788e7d7c40931d25e7d002379e04a016900cde1cdafea94d44f3f7b1a936b5383602094600435930390a263ffffffff6040519160a81c168152f35b9091928335908115158092036100ca5790815260019060609081906001600160a01b036109f060208901611c78565b1660208201526001600160581b03610a0a60408901612402565b166040820152019401920190610976565b909160019060409081906001600160a01b03610a3688611c78565b1681526001600160601b03610a4d602089016123ee565b16602082015201940191019291909261094d565b9491610a74856004989593980135612502565b60018701805460ff60f01b191660f09290921b60ff60f01b169190911790556101a0515b60ff86600401351660ff82161015610b2057600181610ac360ff809416896004013560248b01612416565b8382165f5260038a0160205260405f209084610ade82612426565b1515166101008560a81b03610af560208401612443565b60081b16916001600160a81b031990610b1090604001612311565b60a81b1691171790550116610a98565b5091945091946109236108f9565b60ff60e89994989396999792971b610b4586612502565b6001600160e01b031990921660443560a01b67ffffffffffffffff60a01b1617331760ff60e81b191660e89290921b161760018601556101a0515b60ff811660ff8616811015610be45760ff9181610ba0600193898e612433565b905f526002890160205260405f2090838060a01b03610bbe82612443565b16906001600160a01b031990610bd690602001612237565b60a01b161790550116610b80565b505094969390959196886108f3565b9050830135896108b0565b6101a08051859052516020812092505b601f198b168110610c4e575089601f19811610610c35575b5050600188811b0182556108c3565b8401355f1960038b901b60f8161c191690558880610c26565b90916020600181928589013581550193019101610c0e565b826101a0515260206101a05120601f8a0160051c810160208b10610ca9575b601f830160051c82018110610c9b575050610895565b6101a0518155600101610c85565b5080610c85565b604051631006c52360e01b8152600490fd5b50610ce1610cdc60048701355f1981019060248901612416565b612426565b15610818565b604051630ef7b67760e21b8152600490fd5b346100ca576101a0513660031901126100ca57602060405173cb762ab29cd7911b1d90ed588de9d1cbdf21cd688152f35b346100ca576101a0513660031901126100ca576040517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b346100ca5760803660031901126100ca5760243563ffffffff80821682036100ca576044356001600160401b0381116100ca57610db2903690600401611c8c565b6064939193356001600160401b0381116100ca57610dd4903690600401611c8c565b6101405290610de46004356124d9565b6005810154909390926001600160a01b03841633036114c457858460a81c1686831610156114b2578582165f526007850160205260405f20608052600160805101549560ff8760e01c166114a0576101a05195610e4760e889901c60ff166121c9565b6101a051979094905b855160ff8a1690811015610ee257610ed960ff92610ed3610ea38f948c600196610ecd838f815f526002608051016020528a8060a01b0360405f2054166001600160601b03610ea8610ea3858989612227565b612237565b60405192610eb58461198e565b8352166020820152610ec78383611d8e565b52611d8e565b50612227565b9061224b565b99011697610e50565b50868a959493928c9288610f1a60ff8d60a01c16610f10610f02826119e5565b60405160c05260c0516119c4565b8060c051526119e5565b6101a0515b601f1982018110611467575050610f3b60ff8a60f01c1661227a565b60a0526101a051610180819052610100525b60c0515160ff610100511610156110ea576101005160ff165f9081526006870160205260409020546101a051610160526001600160a01b0316985b60a051516101205260ff610180511660e0526101205160e05110156110dc5760e0515f52600360805101602052610fc160405f206122dd565b610fcf60e05160a051611d8e565b52610fde60e05160a051611d8e565b50611037610ffa610ff560e051610140518d612227565b612311565b604061100a60e05160a051611d8e565b51016001600160581b03809216905261102d610ff560e0518d6101405190612227565b166101605161224b565b6101605261104960e05160a051611d8e565b51516110625760ff600161018051011661018052610f88565b90919293949596979860ff6001610180510116610180525b604051906110878261198e565b81526001600160601b03610160511660208201526110ad60ff610100511660c051611d8e565b526110c060ff610100511660c051611d8e565b5060ff6001610100510116610100529796959493929190610f4d565b90919293949596979861107a565b94889195604051906110fb8261198e565b600182526101a0515b6020811061143057506040519061111a826119a9565b6001600160a01b0385168252602082015260a051604082015261113c82611d6d565b5261114681611d6d565b5060018060a01b03600183015460401c16926001600160601b0360018060a01b0360038501541693600460018060a01b039101541698604051998a956321ec955960e11b875260018060a01b037f000000000000000000000000000000000000000000000000000000000000000016600488015261010060248801526001600160401b036111da610104890160805161235d565b9560a01c166044880152606487015260848601521660a48401526003198382030160c4840152602060c05151918281520190602060c05101906101a0515b8181106113f9575050506003198382030160e4840152815180825260208201916020808360051b8301019401926101a051915b83831061139757505050505091818060209403916101a051905af193841561062d576101a05194611363575b5060808051600101805460ff60e01b1916600160e01b1790556040519590911685526020850181905284018190526101a05160a0850191905b81811061133957505060209150838103604085015261014051815201926101a0515b61014051811061131357606084018390526004357fb6c553e6537a417a3520cb59f37487db1585a760dfb66146d6f3431dc8037aa085870386a26101a05180f35b90936020806001926001600160581b0361132c89612402565b16815201950191016112d2565b90916020806001926001600160601b03611352886123ee565b1681520194019101929190926112b0565b9093506020813d60201161138f575b8161137f602093836119c4565b8101031261073e57519281611277565b3d9150611372565b9193955091936020806113e7600193601f1986820301875289519060406113d66060888060a01b03855116845286850151908088860152840190611a3a565b920151906040818403910152611a8a565b97019301930190928a9594929361124b565b825180516001600160a01b031685526020908101516001600160601b0316818601528b965060409094019390920191600101611218565b6020906040999593949951611444816119a9565b6101a0518152606080848301526040820152828287010152019792919397611104565b60209060409b939495969798999a9b516114808161198e565b5f81525f83820152828260c0510101520199989796959493929199610f1f565b60405163087aeca360e41b8152600490fd5b6040516338fde52b60e01b8152600490fd5b60405163607e454560e11b8152600490fd5b346100ca5760203660031901126100ca576115096114f5600435611df8565b604051918291602083526020830190611ae7565b0390f35b3461073e5760208060031936011261073e576004359061152c826124d9565b60058101805490926001600160a01b039291831633036114c457600192600183019181835460401c1660028501928084541690823191833b1561073e5760405190633e97486160e11b8252600482015260249260248201525f816044818382985af180156116ef576116db575b508760ff809a5460a01c166101a0515060066101a0519901915b6115ea575b8b7fdc7e0409b742bc5f5999ed477fba8518523be3d07b41b9a67ce75191f490cab86101a0516101a051a26101a05180f35b8a8916818110156116d5575f528186528260405f2054169883895460401c1685858a5416898d604051938480926370a0823160e01b82528760048301525afa91821561062d576101a051926116a6575b50823b156100ca5760049c6040519d8e6317d5759960e31b81520152878d0152878c01528a6064816101a051936101a051905af190811561062d578b9a8d92611688575b508a0116986115b3565b909a50611695915061197b565b6101a0516100ca578a8a998e61167e565b9091508981813d83116116ce575b6116be81836119c4565b8101031261073e5751905f61163a565b503d6116b4565b506115b8565b6116e49061197b565b5f6101a0528a611599565b6040513d5f823e3d90fd5b3461073e57606036600319011261073e576004356001600160a01b038181169182900361073e5760243590811680910361073e5773cb762ab29cd7911b1d90ed588de9d1cbdf21cd6833036114c4575f916044602092604051948593849263a9059cbb60e01b84526004840152833560248401525af180156116ef5761177c57005b6100199060203d60201161179d575b61179581836119c4565b810190611de0565b503d61178b565b3461073e57604036600319011261073e576004356001600160a01b0381169081900361073e5773cb762ab29cd7911b1d90ed588de9d1cbdf21cd6833036114c4575f80808093602435905af16117f8611da2565b501561180057005b604051633d2cec6f60e21b8152600490fd5b3461073e5760208060031936011261073e576004356001600160401b03811161073e573660238201121561073e57806004013561184e816119e5565b9161185c60405193846119c4565b81835260248484019260051b8201019136831161073e576024859201905b83821061196c5782858051906118a8611892836119e5565b926118a060405194856119c4565b8084526119e5565b601f1901835f5b828110611956575050505f5b81518110156118f657806118da6118d460019385611d8e565b51611df8565b6118e48286611d8e565b526118ef8185611d8e565b50016118bb565b50506040519082820192808352815180945260408301938160408260051b8601019301915f955b82871061192a5785850386f35b909192938280611946600193603f198a82030186528851611ae7565b960192019601959291909261191d565b61195e611d19565b8282870101520184906118af565b8135815290820190820161187a565b6001600160401b03811161050957604052565b604081019081106001600160401b0382111761050957604052565b606081019081106001600160401b0382111761050957604052565b90601f801991011681019081106001600160401b0382111761050957604052565b6001600160401b0381116105095760051b60200190565b91908251928382525f5b848110611a26575050825f602080949584010152601f8019910116010190565b602081830181015184830182015201611a06565b9081518082526020808093019301915f5b828110611a59575050505090565b835180516001600160a01b031686528201516001600160601b03168583015260409094019392810192600101611a4b565b9081518082526020808093019301915f5b828110611aa9575050505090565b8351805115158652808301516001600160a01b0316868401526040908101516001600160581b03169086015260609094019392810192600101611a9b565b90611afc6101208351908084528301906119fc565b9060209081840151916001600160401b038093168183015260409360408601519460018060a01b03809616604085015260609386606089015116606082015260808760808a015116608083015260a0908860a08b01511660a084015260c0928960c08c01511660c082015260e08b01519581810360e08301528780885192838152019701905f5b818110611c6257505050610100809b01519a8187039101528951968786528686019487808a60051b8901019c01995f975b8a8910611bcb575050505050505050505050505090565b909192939495969798999a9b9d9c8a8f611c488f6001948b611c388f958f94611c09908998601f198d880301905251958651908087528601906119fc565b85880151909116848801528b8501518b168c8501528c85015115158d8501528d8501518482038f860152611a3a565b920151908c818403910152611a8a565b9e0199019901979a9998969594939291909d9b9c9d611bb4565b82518d1689529789019791890191600101611b83565b35906001600160a01b038216820361073e57565b9181601f8401121561073e578235916001600160401b03831161073e576020808501948460051b01011161073e57565b9181601f8401121561073e578235916001600160401b03831161073e576020838186019501011161073e57565b9181601f8401121561073e578235916001600160401b03831161073e576020808501948460061b01011161073e57565b6040519061012082018281106001600160401b03821117610509576040526060610100838281525f60208201525f60408201525f838201525f60808201525f60a08201525f60c08201528260e08201520152565b805115611d7a5760200190565b634e487b7160e01b5f52603260045260245ffd5b8051821015611d7a5760209160051b010190565b3d15611ddb573d906001600160401b0382116105095760405191611dd0601f8201601f1916602001846119c4565b82523d5f602084013e565b606090565b9081602091031261073e5751801515810361073e5790565b611e0a90611e04611d19565b506124d9565b611e12611d19565b90604051611e2b81611e24818561235d565b03826119c4565b825260018101546001600160401b038116602084015260028201546001600160a01b039081166060850152600383015481166080850152600583015480821660c080870191909152604093841c9092169285019290925290939060a085901c60ff16611eaf611e99826119e5565b91611ea760405193846119c4565b8083526119e5565b601f190136602083013760e08501525f5b60e08501515160ff82161015611f055760018160ff8093165f5260068601602052818060a01b0360405f205416611efd84831660e08a0151611d8e565b520116611ec0565b5090919363ffffffff9060a81c1690611f1d826119e5565b91611f2b60405193846119c4565b808352611f3a601f19916119e5565b01905f5b828110612174575050506101008301525f5b6101008301515160ff8216101561216e5760ff81165f526007840160205260405f2093611f8560ff8316610100860151611d8e565b5160405190611f9f82611f98818a61235d565b03836119c4565b526001850154926001600160401b038460a01c166040611fc760ff8616610100890151611d8e565b51015260018060a01b0384166020611fe760ff8616610100890151611d8e565b5101526060611ffe60ff8516610100880151611d8e565b510160ff8560e01c161515905261201a60ff8560e81c166121c9565b608061202e60ff8616610100890151611d8e565b5101525f5b608061204760ff8616610100890151611d8e565b5101515160ff8216908110156120b85760ff916120b0826001935f5260028b0160205260405f2060806120828c610100898d16910151611d8e565b51015190604051906120938261198e565b54868060a01b038116825260a01c6020820152610ec78383611d8e565b500116612033565b50509091939260ff6120cd9160f01c1661227a565b60a06120e160ff8716610100870151611d8e565b5101525f5b60a06120fa60ff8716610100870151611d8e565b5101515160ff8216101561215d5760018160ff8093165f526003880160205261215560405f2061213f60a0612136878c166101008c0151611d8e565b510151916122dd565b61214b86851683611d8e565b5284831690611d8e565b5001166120e6565b50909350909160010160ff16611f50565b50915090565b60409694965190828201918083106001600160401b0384111761050957602092604052606081525f838201525f60408201525f606082015260606080820152606060a082015282828701015201959395611f3e565b906121d3826119e5565b6040906121e360405191826119c4565b83815280936121f4601f19916119e5565b01915f5b8381106122055750505050565b60209082516122138161198e565b5f8152825f818301528286010152016121f8565b9190811015611d7a5760051b0190565b356001600160601b038116810361073e5790565b9190916001600160601b038080941691160191821161226657565b634e487b7160e01b5f52601160045260245ffd5b90612284826119e5565b60409061229460405191826119c4565b83815280936122a5601f19916119e5565b01915f5b8381106122b65750505050565b60209082516122c4816119a9565b5f8152825f818301525f858301528286010152016122a9565b906040516122ea816119a9565b915460ff811615158352600881901c6001600160a01b0316602084015260a81c6040830152565b356001600160581b038116810361073e5790565b90600182811c92168015612353575b602083101461233f57565b634e487b7160e01b5f52602260045260245ffd5b91607f1691612334565b80545f939261236b82612325565b918282526020936001916001811690815f146123cf5750600114612391575b5050505050565b90939495505f92919252835f2092845f945b8386106123bb57505050500101905f8080808061238a565b8054858701830152940193859082016123a3565b60ff19168685015250505090151560051b010191505f8080808061238a565b35906001600160601b038216820361073e57565b35906001600160581b038216820361073e57565b9190811015611d7a576060020190565b35801515810361073e5790565b9190811015611d7a5760061b0190565b356001600160a01b038116810361073e5790565b908060209392818452848401375f828201840152601f01601f1916010190565b9190808252602080920192915f905b828210612494575050505090565b9293919290916001906001600160a01b036124ae87611c78565b1681526001600160601b036124c48488016123ee565b16818401526040908101950193920190612486565b5f548110156124f0575f52600160205260405f2090565b60405163184092c160e21b8152600490fd5b60ff81116125105760ff1690565b604051631a93c68960e11b8152600490fd5b90612549575080511561253757805190602001fd5b604051630a12f52160e11b8152600490fd5b8151158061257c575b61255a575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561255256fea264697066735822122093c97d595546221ee268dc43da743a3b8eb5687498f28dd202618549130c1fcc64736f6c6343000817003360808060405234610016576109b0908161001b8239f35b5f80fdfe60806040526004361015610018575b361561001657005b005b5f3560e01c806343d92ab2146102b457806365b145fb146102a15780637d2e90c21461023c578063a4ad9d8e146100df5763beabacc80361000e57346100db5760603660031901126100db5761006c610761565b6001600160a01b039060243582811691908290036100db57604435925f541633036100c9578261009857005b610016926040519263a9059cbb60e01b602085015260248401526044830152604482526100c4826107cf565b6108a6565b6040516330cd747160e01b8152600490fd5b5f80fd5b60403660031901126100db576100f3610761565b6024906001600160401b039082358281116100db5761011690369060040161079f565b9261011f61081f565b6001600160a01b03928316915f5b85811061013657005b8060061b820135908582168083036100db576040516020918282019063095ea7b360e01b90818352898d8501525f8060449481198688015285875261017a876107cf565b86519082855af19061018a610850565b82610209575b50816101fe575b50156101ac575b50505050600191500161012d565b60405193840152878b8401525f8184015282526080820193828510878611176101eb576100c46101e293600196604052826108a6565b8880808061019e565b8a634e487b7160e01b5f5260416004525ffd5b90503b15158d610197565b809192505190868215928315610224575b505050908e610190565b610234935082018101910161088e565b8e868161021a565b346100db5760403660031901126100db576001600160a01b03600435818116908190036100db57602435915f541633036100c9578161027757005b5f80809381935af1610287610850565b501561028f57005b604051633d2cec6f60e21b8152600490fd5b5f3660031901126100db5761001661081f565b346100db576101003660031901126100db576102ce610761565b6001600160401b03602435116100db573660236024350112156100db576001600160401b0360243560040135116100db5736602480356004013581350101116100db576044356001600160401b03811681036100db57606435916001600160a01b03831683036100db57608435926001600160a01b03841684036100db5760a435926001600160601b03841684036100db5760c4356001600160401b0381116100db5761037f90369060040161079f565b9190926001600160401b0360e435116100db5736602360e4350112156100db576001600160401b0360e43560040135116100db5736602460e4356004013560051b60e4350101116100db575f546001600160a01b031633036107505793826101048793968995604051988997637e19374560e01b895260c060048a01526024356004013560c48a015260243560040135602480350160e48b01375f60e4602435600401358b010152601f19601f6024356004013501168901936001600160401b0360e48601931660248b015260018060a01b031660448a015260018060a01b0316606489015260e0888403016084890152520194905f5b818110610706575050508284036003190160a4840152600460e4359081013580865260051b85016020908101956024909201915f9181015b60e435600401358310610531575050505082906001600160601b03826020960393169060018060a01b03165af18015610526575f906104f3575b602090604051908152f35b506020813d60201161051e575b8161050d602093836107fe565b810103126100db57602090516104e8565b3d9150610500565b6040513d5f823e3d90fd5b91939550919395601f1983820301825260821960e435360301853512156100db576001600160a01b0361056b863560e43501602401610777565b168152843560e435016044810135903603604219018112156100db5760e43586350101906001600160401b036024830135116100db57602482013560061b360360448301136100db576060602082015260248201356060820152608081019160448101905f905b602481013582106106c657505050853560e435016064810135903603604219018112156100db5760e43587350101916001600160401b036024840135116100db576060602484013502360360448401136100db57816040602093830391015260248301358152019060448101905f905b602481013582106106695750505060208060019296019201930190918795939694966104ae565b90919283358015158091036100db5781526001600160a01b0361068e60208601610777565b1660208201526040840135906affffffffffffffffffffff82168092036100db57606081600193604083940152019401920190610642565b909193604080600192838060a01b036106de89610777565b1681526001600160601b036106f560208a0161078b565b1660208201520195019201906105d2565b91939560019193955060408091838060a01b0361072288610777565b16815260206001600160601b0361073a828a0161078b565b1690820152019401910191869492959395610476565b6330cd747160e01b60805260046080fd5b600435906001600160a01b03821682036100db57565b35906001600160a01b03821682036100db57565b35906001600160601b03821682036100db57565b9181601f840112156100db578235916001600160401b0383116100db576020808501948460061b0101116100db57565b608081019081106001600160401b038211176107ea57604052565b634e487b7160e01b5f52604160045260245ffd5b90601f801991011681019081106001600160401b038211176107ea57604052565b5f546001600160a01b03811661083f576001600160a01b03191633175f55565b60405162dc149f60e41b8152600490fd5b3d15610889573d906001600160401b0382116107ea576040519161087e601f8201601f1916602001846107fe565b82523d5f602084013e565b606090565b908160209103126100db575180151581036100db5790565b5f806108ce9260018060a01b03169360208151910182865af16108c7610850565b9083610917565b80519081151591826108fc575b50506108e45750565b60249060405190635274afe760e01b82526004820152fd5b61090f925060208091830101910161088e565b155f806108db565b9061093e575080511561092c57805190602001fd5b604051630a12f52160e11b8152600490fd5b81511580610971575b61094f575090565b604051639996b31560e01b81526001600160a01b039091166004820152602490fd5b50803b1561094756fea26469706673582212203870d9ca9fdbf5560c61d1fc877f78ee23660664ab254dd17a2bad288a94cf4464736f6c63430008170033",
    "compiler": { "version": "v0.8.23+commit.f704f362" },
    "contractName": "src/RFPs.sol:RFPs",
    "jsonDescription": {
      "language": "Solidity",
      "sources": {
        "lib/openmesh-admin/lib/ens-reverse-claimable/src/ENSReverseClaimable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract ENSReverseClaimable {\n    /// @notice ENS reverse name resolution is claimable by the owner of the contract.\n    function owner() external pure virtual returns (address) {\n        return 0xaF7E68bCb2Fc7295492A00177f14F59B92814e70; // plopmenz.eth\n    }\n}\n"
        },
        "lib/openmesh-admin/src/Openmesh.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nabstract contract Openmesh {\n    address constant OPENMESH_ADMIN = 0xCb762Ab29cD7911B1d90ED588dE9d1cBdF21cD68;\n}\n"
        },
        "lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ENSReverseClaimable} from \"../lib/ens-reverse-claimable/src/ENSReverseClaimable.sol\";\nimport {Openmesh} from \"./Openmesh.sol\";\n\ncontract OpenmeshENSReverseClaimable is Openmesh, ENSReverseClaimable {\n    /// @inheritdoc ENSReverseClaimable\n    function owner() external pure override returns (address) {\n        return OPENMESH_ADMIN;\n    }\n}\n"
        },
        "lib/openrd-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n"
        },
        "lib/openrd-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Permit.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
        },
        "lib/openrd-foundry/lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC20} from \"../IERC20.sol\";\nimport {IERC20Permit} from \"../extensions/IERC20Permit.sol\";\nimport {Address} from \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n"
        },
        "lib/openrd-foundry/lib/openzeppelin-contracts/contracts/utils/Address.sol": {
          "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"
        },
        "lib/openrd-foundry/src/Escrow.sol": {
          "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {IERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\";\r\nimport {SafeERC20} from \"../lib/openzeppelin-contracts/contracts/token/ERC20/utils/SafeERC20.sol\";\r\n\r\ncontract Escrow {\r\n    using SafeERC20 for IERC20;\r\n\r\n    error AlreadyInitialized();\r\n    error NotOwner();\r\n    error NativeTransferFailed();\r\n\r\n    address internal owner;\r\n\r\n    receive() external payable {}\r\n\r\n    fallback() external payable {}\r\n\r\n    /// @notice Initializes the Escrow with the sender of the transaction as owner.\r\n    /// @dev This should be called in the same transaction as deploying the escrow, to prevent front running.\r\n    function __Escrow_init() public payable {\r\n        if (owner != address(0)) {\r\n            revert AlreadyInitialized();\r\n        }\r\n\r\n        owner = msg.sender;\r\n    }\r\n\r\n    /// @notice Transfers a certain amount of ERC20 token to a given address. Can only be called by the owner.\r\n    /// @param token The ERC20 contract address.\r\n    /// @param to The address to recieve the tokens.\r\n    /// @param amount The amount of ERC20 token to receive.\r\n    /// @dev Wont do anything if amount is 0.\r\n    function transfer(IERC20 token, address to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        if (amount != 0) {\r\n            token.safeTransfer(to, amount);\r\n        }\r\n    }\r\n\r\n    /// @notice Transfers a certain amount of native currency to a given address. Can only be called by the owner.\r\n    /// @param to The address to recieve the currency.\r\n    /// @param amount The amount of native currency to receive.\r\n    /// @dev Wont do anything if amount is 0.\r\n    function transferNative(address payable to, uint256 amount) external {\r\n        if (msg.sender != owner) {\r\n            revert NotOwner();\r\n        }\r\n\r\n        if (amount != 0) {\r\n            // Use call instead of transfer for correct gas estimation to smart contracts\r\n            (bool succes,) = to.call{value: amount}(\"\");\r\n            if (!succes) {\r\n                revert NativeTransferFailed();\r\n            }\r\n        }\r\n    }\r\n}\r\n"
        },
        "lib/openrd-foundry/src/ITasks.sol": {
          "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {Escrow, IERC20} from \"./Escrow.sol\";\r\n\r\ninterface ITasks {\r\n    error TaskDoesNotExist();\r\n    error TaskNotOpen();\r\n    error TaskNotTaken();\r\n    error TaskNotClosed();\r\n    error TaskClosed();\r\n\r\n    error NotManager();\r\n    error NotExecutor();\r\n    error NotDisputeManager();\r\n\r\n    error RewardAboveBudget();\r\n    error RewardDoesntEndWithNextToken();\r\n    error NotEnoughNativeCurrencyAttached();\r\n    error ApplicationDoesNotExist();\r\n    error NotYourApplication();\r\n    error ApplicationNotAccepted();\r\n    error SubmissionDoesNotExist();\r\n    error SubmissionAlreadyJudged();\r\n    error JudgementNone();\r\n\r\n    error RequestDoesNotExist();\r\n    error RequestAlreadyAccepted();\r\n    error RequestNotAccepted();\r\n    error RequestAlreadyExecuted();\r\n\r\n    error Overflow();\r\n    error ManualBudgetIncreaseNeeded();\r\n    error PartialRewardAboveFullReward();\r\n    error NativeTransferFailed();\r\n    error ERC1167FailedCreateClone();\r\n\r\n    // The budget here repesents the call of the funder to the escrow, the actual value in the escrow (actual budget) might differ in case of transfer fees / rewards.\r\n    event TaskCreated(\r\n        uint256 indexed taskId,\r\n        string metadata,\r\n        uint64 deadline,\r\n        address manager,\r\n        address disputeManager,\r\n        address creator,\r\n        uint96 nativeBudget,\r\n        ERC20Transfer[] budget,\r\n        Escrow escrow\r\n    );\r\n    event ApplicationCreated(\r\n        uint256 indexed taskId,\r\n        uint32 indexed applicationId,\r\n        string metadata,\r\n        address applicant,\r\n        NativeReward[] nativeReward,\r\n        Reward[] reward\r\n    );\r\n    event ApplicationAccepted(uint256 indexed taskId, uint32 indexed applicationId);\r\n    event TaskTaken(uint256 indexed taskId, uint32 indexed applicationId);\r\n    event SubmissionCreated(uint256 indexed taskId, uint8 indexed submissionId, string metadata);\r\n    event SubmissionReviewed(\r\n        uint256 indexed taskId, uint8 indexed submissionId, SubmissionJudgement judgement, string feedback\r\n    );\r\n    event TaskCompleted(uint256 indexed taskId, TaskCompletionSource source);\r\n\r\n    event CancelTaskRequested(uint256 indexed taskId, uint8 indexed requestId, string metadata);\r\n    event TaskCancelled(uint256 indexed taskId, string metadata);\r\n    event RequestAccepted(uint256 indexed taskId, RequestType indexed requestType, uint8 indexed requestId);\r\n    event RequestExecuted(uint256 indexed taskId, RequestType indexed requestType, uint8 indexed requestId, address by);\r\n\r\n    event DeadlineChanged(uint256 indexed taskId, uint64 newDeadline);\r\n    event BudgetChanged(uint256 indexed taskId); // Quite expensive to transfer budget into a datastructure to emit\r\n    event RewardIncreased(\r\n        uint256 indexed taskId, uint32 indexed applicationId, uint96[] nativeIncrease, uint88[] increase\r\n    );\r\n    event MetadataChanged(uint256 indexed taskId, string newMetadata);\r\n    event ManagerChanged(uint256 indexed taskId, address newManager);\r\n    event PartialPayment(uint256 indexed taskId, uint96[] partialNativeReward, uint88[] partialReward);\r\n\r\n    /// @notice A container for ERC20 transfer information.\r\n    /// @param tokenContract ERC20 token to transfer.\r\n    /// @param amount How much of this token should be transfered. uint96 to keep struct packed into a single uint256.\r\n    struct ERC20Transfer {\r\n        IERC20 tokenContract;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a native reward payout.\r\n    /// @param to Whom the native reward should be transfered to.\r\n    /// @param amount How much native reward should be transfered. uint96 to keep struct packed into a single uint256.\r\n    struct NativeReward {\r\n        address to;\r\n        uint96 amount;\r\n    }\r\n\r\n    /// @notice A container for a reward payout.\r\n    /// @param nextToken If this reward is payed out in the next ERC20 token.\r\n    /// @dev IERC20 (address) is a lot of storage, rather just keep those only in budget.\r\n    /// @notice nextToken should always be true for the last entry\r\n    /// @param to Whom this token should be transfered to.\r\n    /// @param amount How much of this token should be transfered. uint88 to keep struct packed into a single uint256.\r\n    struct Reward {\r\n        bool nextToken;\r\n        address to;\r\n        uint88 amount;\r\n    }\r\n\r\n    /// @notice A container for a task application.\r\n    /// @param metadata Metadata of the application. (IPFS hash)\r\n    /// @param applicant Who has submitted this application.\r\n    /// @param accepted If the application has been accepted by the manager.\r\n    /// @param nativeReward How much native currency the applicant wants for completion.\r\n    /// @param reward How much rewards the applicant wants for completion.\r\n    struct Application {\r\n        string metadata;\r\n        // Storage block seperator\r\n        address applicant;\r\n        bool accepted;\r\n        uint8 nativeRewardCount;\r\n        uint8 rewardCount;\r\n        // Storage block seperator\r\n        mapping(uint8 => NativeReward) nativeReward;\r\n        mapping(uint8 => Reward) reward;\r\n    }\r\n\r\n    struct OffChainApplication {\r\n        string metadata;\r\n        address applicant;\r\n        bool accepted;\r\n        NativeReward[] nativeReward;\r\n        Reward[] reward;\r\n    }\r\n\r\n    /// @notice For approving people on task creation (they are not required to make an application).\r\n    struct PreapprovedApplication {\r\n        address applicant;\r\n        NativeReward[] nativeReward;\r\n        Reward[] reward;\r\n    }\r\n\r\n    enum SubmissionJudgement {\r\n        None,\r\n        Accepted,\r\n        Rejected\r\n    }\r\n\r\n    /// @notice A container for a task submission.\r\n    /// @param metadata Metadata of the submission. (IPFS hash)\r\n    /// @param judgement Judgement cast on the submission.\r\n    /// @param feedback A response from the manager. (IPFS hash)\r\n    struct Submission {\r\n        string metadata;\r\n        string feedback;\r\n        SubmissionJudgement judgement;\r\n    }\r\n\r\n    // This is for future expansion of the request system\r\n    enum RequestType {CancelTask}\r\n\r\n    /// @notice A container for shared request information.\r\n    /// @param accepted If the request was accepted.\r\n    /// @param executed If the request was executed.\r\n    struct Request {\r\n        bool accepted;\r\n        bool executed;\r\n    }\r\n\r\n    /// @notice A container for a request to cancel the task.\r\n    /// @param request Request information.\r\n    /// @param metadata Metadata of the request. (IPFS hash, Why the task should be cancelled)\r\n    struct CancelTaskRequest {\r\n        Request request;\r\n        string metadata;\r\n    }\r\n\r\n    enum TaskState {\r\n        Open,\r\n        Taken,\r\n        Closed\r\n    }\r\n\r\n    /// @notice A container for task-related information.\r\n    /// @param metadata Metadata of the task. (IPFS hash)\r\n    /// @param deadline Block timestamp at which the task expires if not completed.\r\n    /// @param escrow The address of the escrow which holds the budget funds.\r\n    /// @param budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param nativeBudget Maximum native currency reward that can be earned by completing the task.\r\n    /// @param creator Who has created the task.\r\n    /// @param disputeManager Who has the permission to complete the task without the managers approval.\r\n    /// @param manager Who has the permission to manage the task.\r\n    /// @param state Current state the task is in.\r\n    /// @param applications Applications to take the job.\r\n    /// @param executorApplication Index of the application that will execture the task.\r\n    /// @param submissions Submission made to finish the task.\r\n    struct Task {\r\n        string metadata;\r\n        // Storage block seperator\r\n        uint64 deadline;\r\n        Escrow escrow;\r\n        // Storage block seperator\r\n        uint96 nativeBudget;\r\n        address creator;\r\n        // Storage block seperator\r\n        address disputeManager;\r\n        // Storage block seperator\r\n        address manager;\r\n        TaskState state;\r\n        uint32 executorApplication;\r\n        uint8 budgetCount;\r\n        uint32 applicationCount;\r\n        uint8 submissionCount;\r\n        uint8 cancelTaskRequestCount;\r\n        // Storage block seperator\r\n        mapping(uint8 => ERC20Transfer) budget;\r\n        mapping(uint32 => Application) applications;\r\n        mapping(uint8 => Submission) submissions;\r\n        mapping(uint8 => CancelTaskRequest) cancelTaskRequests;\r\n    }\r\n\r\n    struct OffChainTask {\r\n        string metadata;\r\n        uint64 deadline;\r\n        uint32 executorApplication;\r\n        address manager;\r\n        address disputeManager;\r\n        address creator;\r\n        TaskState state;\r\n        Escrow escrow;\r\n        uint96 nativeBudget;\r\n        ERC20Transfer[] budget;\r\n        OffChainApplication[] applications;\r\n        Submission[] submissions;\r\n        CancelTaskRequest[] cancelTaskRequests;\r\n    }\r\n\r\n    enum TaskCompletionSource {\r\n        SubmissionAccepted,\r\n        Dispute\r\n    }\r\n\r\n    /// @notice Retrieves the current amount of created tasks.\r\n    function taskCount() external view returns (uint256);\r\n\r\n    /// @notice Retrieves all task information by id.\r\n    /// @param _taskId Id of the task.\r\n    function getTask(uint256 _taskId) external view returns (OffChainTask memory);\r\n\r\n    /// @notice Retrieves multiple tasks in a single call.\r\n    /// @param _taskIds Ids of the tasks.\r\n    function getTasks(uint256[] calldata _taskIds) external view returns (OffChainTask[] memory);\r\n\r\n    /// @notice Create a new task.\r\n    /// @param _metadata Metadata of the task. (IPFS hash)\r\n    /// @param _deadline Block timestamp at which the task expires if not completed.\r\n    /// @param _manager Who will manage the task (become the manager).\r\n    /// @param _disputeManager Who will manage the disputes (handle situations where the manager and executor are in disagreement).\r\n    /// @param _budget Maximum ERC20 rewards that can be earned by completing the task.\r\n    /// @param _preapprove List of addresses (with reward) that are able to take the task without creating an application themselves.\r\n    /// @return taskId Id of the newly created task.\r\n    function createTask(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        address _manager,\r\n        address _disputeManager,\r\n        ERC20Transfer[] calldata _budget,\r\n        PreapprovedApplication[] calldata _preapprove\r\n    ) external payable returns (uint256 taskId);\r\n\r\n    /// @notice Apply to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of your application.\r\n    /// @param _nativeReward Wanted native currency for completing the task.\r\n    /// @param _reward Wanted rewards for completing the task.\r\n    /// @return applicationId Id of the newly created application.\r\n    function applyForTask(\r\n        uint256 _taskId,\r\n        string calldata _metadata,\r\n        NativeReward[] calldata _nativeReward,\r\n        Reward[] calldata _reward\r\n    ) external returns (uint32 applicationId);\r\n\r\n    /// @notice Accept application to allow them to take the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationIds Indexes of the applications to accept.\r\n    /// @dev Will revert if applicant reward is higher than the budget. increaseBudget should be called beforehand.\r\n    function acceptApplications(uint256 _taskId, uint32[] calldata _applicationIds) external;\r\n\r\n    /// @notice Take the task after your application has been accepted.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationId Index of application you made that has been accepted.\r\n    function takeTask(uint256 _taskId, uint32 _applicationId) external;\r\n\r\n    /// @notice Create a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Metadata of the submission. (IPFS hash)\r\n    /// @return submissionId Id of the newly created submission.\r\n    function createSubmission(uint256 _taskId, string calldata _metadata) external returns (uint8 submissionId);\r\n\r\n    /// @notice Review a submission.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _submissionId Index of the submission that is reviewed.\r\n    /// @param _judgement Outcome of the review.\r\n    /// @param _feedback Reasoning of the reviewer. (IPFS hash)\r\n    function reviewSubmission(\r\n        uint256 _taskId,\r\n        uint8 _submissionId,\r\n        SubmissionJudgement _judgement,\r\n        string calldata _feedback\r\n    ) external;\r\n\r\n    /// @notice Cancels a task. This can be used to close a task and receive back the budget.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _metadata Why the task was cancelled. (IPFS hash)\r\n    /// @return cancelTaskRequestId Id of the newly created request for task cancellation.\r\n    function cancelTask(uint256 _taskId, string calldata _metadata) external returns (uint8 cancelTaskRequestId);\r\n\r\n    /// @notice Accepts a request, executing the proposed action.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    /// @param _execute If the request should also be executed in this transaction.\r\n    function acceptRequest(uint256 _taskId, RequestType _requestType, uint8 _requestId, bool _execute) external;\r\n\r\n    /// @notice Exectued an accepted request, allows anyone to pay for the gas costs of the execution.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _requestType What kind of request it is.\r\n    /// @param _requestId Id of the request.\r\n    function executeRequest(uint256 _taskId, RequestType _requestType, uint8 _requestId) external;\r\n\r\n    /// @notice Extend the deadline of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _extension How much to extend the deadline by.\r\n    function extendDeadline(uint256 _taskId, uint64 _extension) external;\r\n\r\n    /// @notice Increase the budget of the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _increase How much to increase each tokens amount by.\r\n    /// @dev Any attached native reward will also be used to increase the budget.\r\n    function increaseBudget(uint256 _taskId, uint96[] calldata _increase) external payable;\r\n\r\n    /// @notice Increase the reward of an application of the task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _applicationId Id of the application.\r\n    /// @param _nativeIncrease How much to increase each native amount by.\r\n    /// @param _increase How much to increase each tokens amount by.\r\n    function increaseReward(\r\n        uint256 _taskId,\r\n        uint32 _applicationId,\r\n        uint96[] calldata _nativeIncrease,\r\n        uint88[] calldata _increase\r\n    ) external;\r\n\r\n    /// @notice Edit the metadata of a task.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newMetadata New metadata of the task.\r\n    /// @dev This metadata update might change the task completely. Show a warning to people who applied before the change.\r\n    function editMetadata(uint256 _taskId, string calldata _newMetadata) external;\r\n\r\n    /// @notice Transfers the manager role to a different address.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _newManager What address should become the manager.\r\n    function transferManagement(uint256 _taskId, address _newManager) external;\r\n\r\n    /// @notice Completes the task through dispute resolution.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _partialNativeReward How much of each native reward should be paid out.\r\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\r\n    function completeByDispute(\r\n        uint256 _taskId,\r\n        uint96[] calldata _partialNativeReward,\r\n        uint88[] calldata _partialReward\r\n    ) external;\r\n\r\n    /// @notice Releases a part of the reward to the executor without marking the task as complete.\r\n    /// @param _taskId Id of the task.\r\n    /// @param _partialNativeReward How much of each native reward should be paid out.\r\n    /// @param _partialReward How much of each ERC20 reward should be paid out.\r\n    /// @dev Will fetch balanceOf to set the budget afterwards, can be used in case funds where sent manually to the escrow to sync the budget.\r\n    function partialPayment(uint256 _taskId, uint96[] calldata _partialNativeReward, uint88[] calldata _partialReward)\r\n        external;\r\n}\r\n"
        },
        "src/IRFPs.sol": {
          "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {RFPEscrow, IERC20, SafeERC20} from \"./RFPEscrow.sol\";\r\nimport {ITasks} from \"../lib/openrd-foundry/src/ITasks.sol\";\r\n\r\ninterface IRFPs {\r\n    error RFPDoesNotExist();\r\n    error RFPClosed();\r\n    error NotManager();\r\n    error ProjectDoesNotExist();\r\n    error ProjectAlreadyAccepted();\r\n    error RewardDoesntEndWithNextToken();\r\n\r\n    error Overflow();\r\n    error ERC1167FailedCreateClone();\r\n\r\n    event RFPCreated(\r\n        uint256 indexed rfpId,\r\n        string metadata,\r\n        uint64 deadline,\r\n        uint256 nativeBudget,\r\n        ITasks.ERC20Transfer[] budget,\r\n        address creator,\r\n        address tasksManager,\r\n        address disputeManager,\r\n        address manager,\r\n        RFPEscrow escrow\r\n    );\r\n    event ProjectSubmitted(\r\n        uint256 indexed rfpId,\r\n        uint32 projectId,\r\n        string metadata,\r\n        address representative,\r\n        uint64 deadline,\r\n        ITasks.NativeReward[] nativeReward,\r\n        ITasks.Reward[] reward\r\n    );\r\n    event ProjectAccepted(\r\n        uint256 indexed rfpId, uint32 projectId, uint96[] nativeReward, uint88[] reward, uint256 taskId\r\n    );\r\n    event RFPEmptied(uint256 indexed rfpId);\r\n\r\n    /// @notice A container for a RFP project.\r\n    /// @param metadata Metadata of the project. (IPFS hash)\r\n    /// @param representative Who has submitted this project.\r\n    /// @param deadline The deadline after which the project should be completed.\r\n    /// @param accepted If the project has been accepted. To prevent 2 OpenR&D tasks from being created.\r\n    /// @param nativeReward How much native currency the representative wants for completion.\r\n    /// @param reward How much rewards the representative wants for completion.\r\n    struct Project {\r\n        string metadata;\r\n        address representative;\r\n        uint64 deadline;\r\n        bool accepted;\r\n        uint8 nativeRewardCount;\r\n        uint8 rewardCount;\r\n        mapping(uint8 => ITasks.NativeReward) nativeReward;\r\n        mapping(uint8 => ITasks.Reward) reward;\r\n    }\r\n\r\n    struct OffchainProject {\r\n        string metadata;\r\n        address representative;\r\n        uint64 deadline;\r\n        bool accepted;\r\n        ITasks.NativeReward[] nativeReward;\r\n        ITasks.Reward[] reward;\r\n    }\r\n\r\n    /// @notice A container for RFP-related information.\r\n    /// @param metadata Metadata of the RFP. (IPFS hash)\r\n    /// @param deadline Block timestamp at which the RFP closes.\r\n    /// @param budget The ERC20 contracts that compose the budget.\r\n    /// @param creator Who has created the RFP.\r\n    /// @param tasksManager Who has the permission to manage the OpenR&D tasks.\r\n    /// @param disputeManager Who has the permission to manage disputes on the OpenR&D tasks.\r\n    /// @param manager Who has the permission to manage the RFP.\r\n    /// @param projects Projects that want to be funded by the RFP.\r\n    struct RFP {\r\n        string metadata;\r\n        // Storage block seperator\r\n        uint64 deadline;\r\n        RFPEscrow escrow;\r\n        // Storage block seperator\r\n        address creator;\r\n        // Storage block seperator\r\n        address tasksManager;\r\n        // Storage block seperator\r\n        address disputeManager;\r\n        // Storage block seperator\r\n        address manager;\r\n        uint8 budgetCount;\r\n        uint32 projectCount;\r\n        // Storage block seperator\r\n        mapping(uint8 => IERC20) budget;\r\n        mapping(uint32 => Project) projects;\r\n    }\r\n\r\n    struct OffChainRFP {\r\n        string metadata;\r\n        uint64 deadline;\r\n        RFPEscrow escrow;\r\n        address creator;\r\n        address tasksManager;\r\n        address disputeManager;\r\n        address manager;\r\n        IERC20[] budget;\r\n        OffchainProject[] projects;\r\n    }\r\n\r\n    /// @notice Retrieves the current amount of created RFPs.\r\n    function rfpCount() external view returns (uint256);\r\n\r\n    /// @notice Retrieves all RFP information by id.\r\n    /// @param _rfpId Id of the RFP.\r\n    function getRFP(uint256 _rfpId) external view returns (OffChainRFP memory);\r\n\r\n    /// @notice Retrieves multiple RFPs.\r\n    /// @param _rfpIds Ids of the RFPs.\r\n    function getRFPs(uint256[] calldata _rfpIds) external view returns (OffChainRFP[] memory);\r\n\r\n    /// @notice Create a new RFP.\r\n    /// @param _metadata Metadata of the RFP. (IPFS hash)\r\n    /// @param _deadline Block timestamp at which the RFP closes.\r\n    /// @param _budget Maximum ERC20 rewards avaliable for projects of the RFP.\r\n    /// @param _tasksManager Who will manage the project Tasks (become the OpenR&D manager).\r\n    /// @param _manager Who will manage the RFP (become the manager).\r\n    /// @return rfpId Id of the newly created RFP.\r\n    function createRFP(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ITasks.ERC20Transfer[] calldata _budget,\r\n        address _tasksManager,\r\n        address _disputeManager,\r\n        address _manager\r\n    ) external payable returns (uint256 rfpId);\r\n\r\n    /// @notice Propose a project to be funded by an RFP.\r\n    /// @param _rfpId Id of the RFP.\r\n    /// @param _metadata Metadata of your project.\r\n    /// @param _deadline Before when the proposed project will be completed.\r\n    /// @param _nativeReward Wanted native currency from the RFP for the project.\r\n    /// @param _reward Wanted rewards from the RFP for the project.\r\n    function submitProject(\r\n        uint256 _rfpId,\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ITasks.NativeReward[] calldata _nativeReward,\r\n        ITasks.Reward[] calldata _reward\r\n    ) external returns (uint32 projectId);\r\n\r\n    /// @notice Accept project to be funnded by the RFP.\r\n    /// @param _rfpId Id of the RFP.\r\n    /// @param _projectId Id of the project to accept.\r\n    /// @param _nativeReward Native reward granted to the project (can be lower or higher than requested).\r\n    /// @param _reward Reward granted to the project (can be lower or higher than requested).\r\n    function acceptProject(\r\n        uint256 _rfpId,\r\n        uint32 _projectId,\r\n        uint96[] calldata _nativeReward,\r\n        uint88[] calldata _reward\r\n    ) external;\r\n\r\n    /// @notice Refunds any leftover budget to the creator.\r\n    /// @param _rfpId Id of the RFP.\r\n    function emptyRFP(uint256 _rfpId) external;\r\n}\r\n"
        },
        "src/RFPEscrow.sol": {
          "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Escrow, IERC20, SafeERC20} from \"../lib/openrd-foundry/src/Escrow.sol\";\nimport {ITasks} from \"../lib/openrd-foundry/src/ITasks.sol\";\n\ncontract RFPEscrow is Escrow {\n    using SafeERC20 for IERC20;\n\n    /// @notice Initializes the additional RFP logic and performs the base Escrow init.\n    function __RFPEscrow_init(ITasks _spender, ITasks.ERC20Transfer[] calldata _budget) public payable {\n        __Escrow_init();\n\n        for (uint256 i; i < _budget.length;) {\n            // Approve unlimited spending by the Tasks contract to save on gas fees\n            _budget[i].tokenContract.forceApprove(address(_spender), type(uint256).max);\n\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /// @notice The Escrow created the task, so that any refunds will flow back to this, instead of the RFPs contract.\n    /// They can be withdrawn if no further tasks are desired to be funded by calling emptyRFP.\n    function createTask(\n        ITasks _tasks,\n        string calldata _metadata,\n        uint64 _deadline,\n        address _manager,\n        address _disputeManager,\n        uint96 _nativeBudget,\n        ITasks.ERC20Transfer[] calldata _budget,\n        ITasks.PreapprovedApplication[] calldata _preapprove\n    ) external returns (uint256) {\n        if (msg.sender != owner) {\n            revert NotOwner();\n        }\n\n        return _tasks.createTask{value: _nativeBudget}(\n            _metadata, _deadline, _manager, _disputeManager, _budget, _preapprove\n        );\n    }\n}\n"
        },
        "src/RFPs.sol": {
          "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport {OpenmeshENSReverseClaimable} from \"../lib/openmesh-admin/src/OpenmeshENSReverseClaimable.sol\";\r\n\r\nimport {IRFPs, IERC20, RFPEscrow, ITasks, SafeERC20} from \"./IRFPs.sol\";\r\n\r\ncontract RFPs is OpenmeshENSReverseClaimable, IRFPs {\r\n    using SafeERC20 for IERC20;\r\n\r\n    /// @notice The Tasks deployment where accepted projects will be created.\r\n    ITasks public immutable tasks;\r\n\r\n    /// @notice The incremental ID for RFPs.\r\n    uint256 private rfpCounter;\r\n\r\n    /// @notice A mapping between RFP IDs and RFP information.\r\n    mapping(uint256 => RFP) internal rfps;\r\n\r\n    /// @notice The base escrow contract that will be cloned for every RFP.\r\n    address public immutable escrowImplementation;\r\n\r\n    constructor(ITasks _tasks) {\r\n        tasks = _tasks;\r\n        escrowImplementation = address(new RFPEscrow());\r\n    }\r\n\r\n    receive() external payable {}\r\n\r\n    /// @inheritdoc IRFPs\r\n    function rfpCount() external view returns (uint256) {\r\n        return rfpCounter;\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function getRFP(uint256 _rfpId) public view returns (OffChainRFP memory offchainRFP) {\r\n        RFP storage rfp = _getRFP(_rfpId);\r\n        offchainRFP = _toOffchainRFP(rfp);\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function getRFPs(uint256[] memory _rfpIds) public view returns (OffChainRFP[] memory) {\r\n        OffChainRFP[] memory offchainRFPs = new OffChainRFP[](_rfpIds.length);\r\n        for (uint256 i; i < _rfpIds.length;) {\r\n            offchainRFPs[i] = getRFP(_rfpIds[i]);\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n        return offchainRFPs;\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function createRFP(\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ITasks.ERC20Transfer[] calldata _budget,\r\n        address _tasksManager,\r\n        address _disputeManager,\r\n        address _manager\r\n    ) external payable returns (uint256 rfpId) {\r\n        rfpId = rfpCounter++;\r\n        RFP storage rfp = rfps[rfpId];\r\n        rfp.metadata = _metadata;\r\n        rfp.deadline = _deadline;\r\n\r\n        RFPEscrow escrow = RFPEscrow(payable(clone(escrowImplementation)));\r\n        escrow.__RFPEscrow_init{value: msg.value}(tasks, _budget);\r\n        rfp.escrow = escrow;\r\n\r\n        rfp.budgetCount = _toUint8(_budget.length);\r\n        for (uint8 i; i < uint8(_budget.length);) {\r\n            _budget[i].tokenContract.safeTransferFrom(msg.sender, address(escrow), _budget[i].amount);\r\n\r\n            // Only token addresses are saved, the escrow can be topped up freely at any time\r\n            rfp.budget[i] = _budget[i].tokenContract;\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        rfp.manager = _manager;\r\n        rfp.tasksManager = _tasksManager;\r\n        rfp.disputeManager = _disputeManager;\r\n        rfp.creator = msg.sender;\r\n\r\n        emit RFPCreated(\r\n            rfpId,\r\n            _metadata,\r\n            _deadline,\r\n            msg.value,\r\n            _budget,\r\n            msg.sender,\r\n            _tasksManager,\r\n            _disputeManager,\r\n            _manager,\r\n            escrow\r\n        );\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function submitProject(\r\n        uint256 _rfpId,\r\n        string calldata _metadata,\r\n        uint64 _deadline,\r\n        ITasks.NativeReward[] calldata _nativeReward,\r\n        ITasks.Reward[] calldata _reward\r\n    ) external returns (uint32 projectId) {\r\n        RFP storage rfp = _getRFP(_rfpId);\r\n\r\n        // Ensure not past deadline\r\n        if (rfp.deadline <= block.timestamp) {\r\n            revert RFPClosed();\r\n        }\r\n\r\n        // Ensure reward ends with next token\r\n        unchecked {\r\n            if (_reward.length != 0 && !_reward[_reward.length - 1].nextToken) {\r\n                revert RewardDoesntEndWithNextToken();\r\n            }\r\n        }\r\n\r\n        projectId = rfp.projectCount++;\r\n        Project storage project = rfp.projects[projectId];\r\n        project.metadata = _metadata;\r\n        project.deadline = _deadline;\r\n        project.representative = msg.sender;\r\n\r\n        // Gas optimization\r\n        if (_nativeReward.length != 0) {\r\n            project.nativeRewardCount = _toUint8(_nativeReward.length);\r\n            for (uint8 i; i < uint8(_nativeReward.length);) {\r\n                project.nativeReward[i] = _nativeReward[i];\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Gas optimization\r\n        if (_reward.length != 0) {\r\n            project.rewardCount = _toUint8(_reward.length);\r\n            for (uint8 i; i < uint8(_reward.length);) {\r\n                project.reward[i] = _reward[i];\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        emit ProjectSubmitted(_rfpId, projectId, _metadata, msg.sender, _deadline, _nativeReward, _reward);\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function acceptProject(\r\n        uint256 _rfpId,\r\n        uint32 _projectId,\r\n        uint96[] calldata _nativeReward,\r\n        uint88[] calldata _reward\r\n    ) external {\r\n        RFP storage rfp = _getRFP(_rfpId);\r\n\r\n        // Ensure sender is manager\r\n        if (msg.sender != rfp.manager) {\r\n            revert NotManager();\r\n        }\r\n\r\n        // Ensure project exists\r\n        if (_projectId >= rfp.projectCount) {\r\n            revert ProjectDoesNotExist();\r\n        }\r\n\r\n        Project storage project = rfp.projects[_projectId];\r\n\r\n        // Ensure project not accepted\r\n        if (project.accepted) {\r\n            revert ProjectAlreadyAccepted();\r\n        }\r\n\r\n        uint96 taskNativeBudget;\r\n        ITasks.NativeReward[] memory taskNativeReward = new ITasks.NativeReward[](project.nativeRewardCount);\r\n        for (uint8 i; i < taskNativeReward.length;) {\r\n            taskNativeReward[i] = ITasks.NativeReward(project.nativeReward[i].to, _nativeReward[i]);\r\n            taskNativeBudget += _nativeReward[i];\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        ITasks.ERC20Transfer[] memory taskBudget = new ITasks.ERC20Transfer[](rfp.budgetCount);\r\n        ITasks.Reward[] memory taskReward = new ITasks.Reward[](project.rewardCount);\r\n        {\r\n            uint8 j;\r\n            for (uint8 i; i < taskBudget.length;) {\r\n                IERC20 erc20 = rfp.budget[i];\r\n                uint96 projectBudget;\r\n                while (j < taskReward.length) {\r\n                    taskReward[j] = project.reward[j];\r\n                    taskReward[j].amount = _reward[j];\r\n                    projectBudget += _reward[j];\r\n\r\n                    if (taskReward[j].nextToken) {\r\n                        unchecked {\r\n                            ++j;\r\n                        }\r\n                        break;\r\n                    }\r\n\r\n                    unchecked {\r\n                        ++j;\r\n                    }\r\n                }\r\n\r\n                taskBudget[i] = ITasks.ERC20Transfer(erc20, projectBudget);\r\n\r\n                unchecked {\r\n                    ++i;\r\n                }\r\n            }\r\n        }\r\n\r\n        ITasks.PreapprovedApplication[] memory preapproved = new ITasks.PreapprovedApplication[](1);\r\n        preapproved[0] = ITasks.PreapprovedApplication(project.representative, taskNativeReward, taskReward);\r\n\r\n        uint256 taskId = rfp.escrow.createTask(\r\n            tasks,\r\n            project.metadata,\r\n            project.deadline,\r\n            rfp.tasksManager,\r\n            rfp.disputeManager,\r\n            taskNativeBudget,\r\n            taskBudget,\r\n            preapproved\r\n        );\r\n        project.accepted = true;\r\n        emit ProjectAccepted(_rfpId, _projectId, _nativeReward, _reward, taskId);\r\n    }\r\n\r\n    /// @inheritdoc IRFPs\r\n    function emptyRFP(uint256 _rfpId) external {\r\n        RFP storage rfp = _getRFP(_rfpId);\r\n\r\n        // Ensure sender is manager\r\n        if (msg.sender != rfp.manager) {\r\n            revert NotManager();\r\n        }\r\n\r\n        rfp.escrow.transferNative(payable(rfp.creator), address(rfp.escrow).balance);\r\n\r\n        uint8 budgetCount = rfp.budgetCount;\r\n        for (uint8 i; i < budgetCount;) {\r\n            IERC20 erc20 = rfp.budget[i];\r\n\r\n            rfp.escrow.transfer(erc20, rfp.creator, erc20.balanceOf(address(rfp.escrow)));\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        emit RFPEmptied(_rfpId);\r\n    }\r\n\r\n    error NativeTransferFailed();\r\n\r\n    /// @notice To save any native funds stuck in this contract (done by the Openmesh community)\r\n    function rescueNative(address payable to, uint256 amount) external {\r\n        if (msg.sender != OPENMESH_ADMIN) {\r\n            revert NotManager();\r\n        }\r\n\r\n        (bool success,) = to.call{value: amount}(\"\");\r\n        if (!success) {\r\n            revert NativeTransferFailed();\r\n        }\r\n    }\r\n\r\n    /// @notice To save any erc20 funds stuck in this contract (done by the Openmesh community)\r\n    function rescue(IERC20 token, address to, uint256 amount) external {\r\n        if (msg.sender != OPENMESH_ADMIN) {\r\n            revert NotManager();\r\n        }\r\n\r\n        token.transfer(to, amount);\r\n    }\r\n\r\n    function _getRFP(uint256 _rfpId) internal view returns (RFP storage rfp) {\r\n        if (_rfpId >= rfpCounter) {\r\n            revert RFPDoesNotExist();\r\n        }\r\n\r\n        rfp = rfps[_rfpId];\r\n    }\r\n\r\n    function _toOffchainRFP(RFP storage rfp) internal view returns (OffChainRFP memory offchainRFP) {\r\n        offchainRFP.metadata = rfp.metadata;\r\n        offchainRFP.deadline = rfp.deadline;\r\n        offchainRFP.creator = rfp.creator;\r\n        offchainRFP.tasksManager = rfp.tasksManager;\r\n        offchainRFP.manager = rfp.manager;\r\n        offchainRFP.escrow = rfp.escrow;\r\n\r\n        offchainRFP.budget = new IERC20[](rfp.budgetCount);\r\n        for (uint8 i; i < offchainRFP.budget.length;) {\r\n            offchainRFP.budget[i] = rfp.budget[i];\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n\r\n        offchainRFP.projects = new OffchainProject[](rfp.projectCount);\r\n        for (uint8 i; i < offchainRFP.projects.length;) {\r\n            Project storage project = rfp.projects[i];\r\n            offchainRFP.projects[i].metadata = project.metadata;\r\n            offchainRFP.projects[i].deadline = project.deadline;\r\n            offchainRFP.projects[i].representative = project.representative;\r\n            offchainRFP.projects[i].accepted = project.accepted;\r\n\r\n            offchainRFP.projects[i].nativeReward = new ITasks.NativeReward[](project.nativeRewardCount);\r\n            for (uint8 j; j < offchainRFP.projects[i].nativeReward.length;) {\r\n                offchainRFP.projects[i].nativeReward[j] = project.nativeReward[j];\r\n                unchecked {\r\n                    ++j;\r\n                }\r\n            }\r\n\r\n            offchainRFP.projects[i].reward = new ITasks.Reward[](project.rewardCount);\r\n            for (uint8 j; j < offchainRFP.projects[i].reward.length;) {\r\n                offchainRFP.projects[i].reward[j] = project.reward[j];\r\n                unchecked {\r\n                    ++j;\r\n                }\r\n            }\r\n\r\n            unchecked {\r\n                ++i;\r\n            }\r\n        }\r\n    }\r\n\r\n    // From: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/Clones.sol\r\n    function clone(address implementation) internal returns (address instance) {\r\n        /// @solidity memory-safe-assembly\r\n        assembly {\r\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\r\n            // of the `implementation` address with the bytecode before the address.\r\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\r\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\r\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\r\n            instance := create(0, 0x09, 0x37)\r\n        }\r\n        if (instance == address(0)) {\r\n            revert ERC1167FailedCreateClone();\r\n        }\r\n    }\r\n\r\n    function _toUint8(uint256 value) internal pure returns (uint8) {\r\n        if (value > type(uint8).max) {\r\n            revert Overflow();\r\n        }\r\n        return uint8(value);\r\n    }\r\n}\r\n"
        }
      },
      "settings": {
        "remappings": [
          "@openzeppelin/contracts/=lib/openrd-foundry/lib/openzeppelin-contracts/contracts/",
          "ds-test/=lib/openrd-foundry/lib/openzeppelin-contracts/lib/forge-std/lib/ds-test/src/",
          "ens-reverse-claimable/=lib/openmesh-admin/lib/ens-reverse-claimable/src/",
          "erc4626-tests/=lib/openrd-foundry/lib/openzeppelin-contracts/lib/erc4626-tests/",
          "forge-std/=lib/forge-std/src/",
          "openmesh-admin/=lib/openmesh-admin/src/",
          "openrd-foundry/=lib/openrd-foundry/src/",
          "openzeppelin-contracts/=lib/openrd-foundry/lib/openzeppelin-contracts/",
          "smart-account/=lib/openmesh-admin/lib/smart-account/src/"
        ],
        "optimizer": { "enabled": true, "runs": 200 },
        "evmVersion": "shanghai",
        "viaIR": true
      },
      "metadata": { "useLiteralContent": true }
    },
    "license": "MIT"
  },
  "source": "/home/plopmenz/openmesh-smart-contracts/lib/openrfp",
  "submitted": {
    "transactionHash": "0xc645b9d3248dc2a28ca63b8999494433bec575c793c2c6d1e19bed520dc5c7ea",
    "date": "2024-04-01T20:41:40.794Z"
  }
}
